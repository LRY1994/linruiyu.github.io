<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>圆玉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lry1994.github.io/"/>
  <updated>2018-03-30T09:37:03.789Z</updated>
  <id>http://lry1994.github.io/</id>
  
  <author>
    <name>Ruiyu Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018-12面试题摘录</title>
    <link href="http://lry1994.github.io/2018/2018-12-12-interview.html"/>
    <id>http://lry1994.github.io/2018/2018-12-12-interview.html</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2018-03-30T09:37:03.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue数据双向绑定的原理"><a href="#vue数据双向绑定的原理" class="headerlink" title="vue数据双向绑定的原理"></a>vue数据双向绑定的原理</h3><p>主要讲了实现是基于Object.defineProperty<br>另外也大概阐述了<code>发布-订阅者模式</code>，主要是Observer，Dep，Watcher等</p><h3 id="JSONP可以用post请求吗？为什么？"><a href="#JSONP可以用post请求吗？为什么？" class="headerlink" title="JSONP可以用post请求吗？为什么？"></a>JSONP可以用post请求吗？为什么？</h3><p>不支持<br>因为script标签只支持get请求…</p><h3 id="描述一下css的盒模型"><a href="#描述一下css的盒模型" class="headerlink" title="描述一下css的盒模型"></a>描述一下css的盒模型</h3><p>标准盒模型和怪异模式</p><p>标准模式：box-sizing:content-box;</p><p>怪异模式：box-sizing:border-box;</p><h3 id="H5异步上传文件"><a href="#H5异步上传文件" class="headerlink" title="H5异步上传文件"></a>H5异步上传文件</h3><p>关键代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input id=<span class="string">"uploadFile"</span> type=<span class="string">"file"</span> name=<span class="string">"myPhoto"</span> /&gt; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();<span class="comment">//新建FormData</span></span><br><span class="line"> fd.append(<span class="string">"myPhoto"</span>, $(<span class="string">"uploadFile"</span>).files[<span class="number">0</span>]);<span class="comment">//塞数据</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//创建XMLHttpRequest 对象</span></span><br><span class="line"> xhr.open(<span class="string">"post"</span>,<span class="string">"/uploadPhoto.action"</span>, <span class="literal">true</span>);<span class="comment">//打开链接</span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//监听</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flag = xhr.responseText;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">"success"</span>) &#123;</span><br><span class="line">            alert(<span class="string">"图片上传成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"图片上传成功！"</span>);</span><br><span class="line">        &#125;;                        </span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;; </span><br><span class="line">xhr.send(fd);<span class="comment">//发送</span></span><br></pre></td></tr></table></figure><h3 id="实现垂直水平居中有哪些方法"><a href="#实现垂直水平居中有哪些方法" class="headerlink" title="实现垂直水平居中有哪些方法"></a>实现垂直水平居中有哪些方法</h3><ol><li><p>flexbox</p></li><li><p>绝对定位+margin负值(子容器宽高固定)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">childElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;                              </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;           </span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;      </span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;                          </span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">100px</span>;<span class="comment">/*高度的一半*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">200px</span>;<span class="comment">/*宽度的一半*/</span>                                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位top left right bottom 0 + margin auto (子容器宽高固定)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chilElement</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位+transfrom负值（子容器宽高不知)</p></li></ol><p>（1） 不知道自己高度和父容器高度的情况下, 利用绝对定位只需要以下三行：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> （2）若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">parentElement</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:xxx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.tuicool.com/articles/v2aeMbn?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">HTML5中37个最重要的技术点</a></p><p><a href="https://www.tuicool.com/articles/bInqieZ?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">BAT 要的是什么样的前端实习生？</a></p><p><a href="http://www.codeceo.com/chrome-broswer-layout.html" target="_blank" rel="noopener">从 Chrome 源码看浏览器如何 layout 布局</a></p><p><a href="https://segmentfault.com/a/1190000013894510" target="_blank" rel="noopener">从八道面试题看JavaScript DOM事件机制</a></p><p><a href="https://segmentfault.com/a/1190000013963213" target="_blank" rel="noopener">【前端性能优化】高性能JavaScript整理总结</a></p><p><a href="https://www.tuicool.com/articles/n22MNrA?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">三分钟快速理解javascript内存管理</a><br><a href="https://segmentfault.com/a/1190000013972464" target="_blank" rel="noopener">ES6小技巧</a><br><a href="https://www.tuicool.com/articles/zANVnqM" target="_blank" rel="noopener">优雅的 JavaScript 排序算法（ES6）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue数据双向绑定的原理&quot;&gt;&lt;a href=&quot;#vue数据双向绑定的原理&quot; class=&quot;headerlink&quot; title=&quot;vue数据双向绑定的原理&quot;&gt;&lt;/a&gt;vue数据双向绑定的原理&lt;/h3&gt;&lt;p&gt;主要讲了实现是基于Object.defineProperty
      
    
    </summary>
    
      <category term="面试" scheme="http://lry1994.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://lry1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《全栈应用开发精益实践》读书笔记</title>
    <link href="http://lry1994.github.io/2018/2018-3-16-full-stack-develop-study.html"/>
    <id>http://lry1994.github.io/2018/2018-3-16-full-stack-develop-study.html</id>
    <published>2018-03-16T05:38:38.000Z</published>
    <updated>2018-03-19T09:35:58.516Z</updated>
    
    <content type="html"><![CDATA[<p>这本书以前翻过几章，但是因为其他事情耽搁了，重新阅读已不太记得讲了什么，故重新阅读</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><table><thead><tr><th>System</th><th style="text-align:left">包管理</th><th style="text-align:left">快速启动</th><th style="text-align:left">命令行</th></tr></thead><tbody><tr><td>window</td><td style="text-align:left">chocolatey</td><td style="text-align:left">wox</td><td style="text-align:left">cmder/Cygwin</td><td></td></tr><tr><td>GNU/Linux</td><td style="text-align:left">apt/yum/yast</td><td style="text-align:left">Launchy</td><td style="text-align:left">Zsh</td></tr><tr><td>Mac</td><td style="text-align:left">Homebrew</td><td style="text-align:left"></td><td style="text-align:left">iTerm2</td></tr></tbody></table><h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><p><code>&lt;a href=&quot;#&quot;&gt;回到顶部&lt;/a&gt;</code></p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><ul><li>每日站会。讲述昨天今天做了什么，遇到什么问题。</li><li>结对编程。两个人实现一个功能除了可以减少bug，还能分享。</li><li>代码审查</li><li>开卡和验收。开发人员和业务分析人员、测试人员一起开卡来进行新的任务，并在最后一起验收。</li><li>迭代回顾。</li></ul><h3 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h3><ul><li>测试驱动开发。先写测试，再实现代码，最后对代码进行重构。</li><li>重构。</li><li>技术债管理。由于发布临近，可能在这次发布里使用一些比较粗暴的方式来实现功能，代码不太吗。每当出现一点时就对问题进行标识，在适当的时候修复，若果所欠的债务越来越多，意味着软件的质量受到影响，需要重新审视这个问题。</li><li>浮现式设计。敏捷开发并不意味着架构设计不存在，在实践过程中依据问题改进代码。随着对软件质量的重视，我们的架构就会浮现出来。<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3></li><li>文件存储。<br>GoAcess/Hadoop/Spark.Logstash/ElasticSearch/Kibana</li><li>数据库<ul><li>关系数据库。MYSQL/SQLite3/PostgreSQL</li><li>非关系数据库。NoSQL/MongoDB/Redis/Cassandra</li></ul></li></ul><h3 id="UI框架。Foundation-Skeleton-Pure-css"><a href="#UI框架。Foundation-Skeleton-Pure-css" class="headerlink" title="UI框架。Foundation/Skeleton/Pure.css"></a>UI框架。Foundation/Skeleton/Pure.css</h3><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><ul><li>安装<br>  <code>pip install Django =1.10.2</code></li><li><p>创建项目<br>  <code>django-admin startproject project-name</code></p><p>文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- project-name</span><br><span class="line">    - __pycache__</span><br><span class="line">    - project-name</span><br><span class="line">        - __init__.py//指明这是一个Python模块</span><br><span class="line">        - settings.py //包含数据库环境、启用插件等的配置</span><br><span class="line">        - urls.py//指明了某个URL应该指向某个函数来处理</span><br><span class="line">        - wsgi.py//用于部署</span><br><span class="line">    - manage.py //可以和django-admin做类似的事情</span><br><span class="line">    - db.sqlite3</span><br></pre></td></tr></table></figure></li><li><p>启动服务器<br>  <code>python manage.py runserver</code></p><p>   打开 “<a href="http://localhost:8000/”" target="_blank" rel="noopener">http://localhost:8000/”</a></p><ul><li>下载SQLite3数据库 <a href="https://sqlite.org/download.html" target="_blank" rel="noopener">https://sqlite.org/download.html</a></li><li>数据库迁移<br>  <code>python manage.py migrate</code></li><li>创建超级用户来登录后台<br>  <code>python manage.py createsuperuser</code></li><li>登录后台-打开 “<a href="http://localhost:8000/admin”" target="_blank" rel="noopener">http://localhost:8000/admin”</a></li></ul></li></ul><h3 id="Fabric搭建构建系统"><a href="#Fabric搭建构建系统" class="headerlink" title="Fabric搭建构建系统"></a>Fabric搭建构建系统</h3><ul><li>安装<code>pip install fabric3</code></li><li>创建<code>fabfile.py</code>。执行  <code>fab 函数名:arg</code><br>fab命令从fabfile.py里面寻找对应的函数来执行</li><li><p>fabric有两种运行方式</p><ul><li><p>本地运行 <code>local函数</code></p><p>  需要<code>from fabric.api import local</code></p></li><li><p>在远程机器上执行命令</p></li></ul></li><li><p><code>fab --list</code> 会列出<code>fabfile.py</code>文件中所有有<code>@task</code>修饰器的方法</p><h3 id="代码风格监测"><a href="#代码风格监测" class="headerlink" title="代码风格监测"></a>代码风格监测</h3></li><li><p>pep8 </p><p>  安装<code>pip install pep8--1.7.0</code></p><p>  执行 <code>pep .</code></p></li><li><p>pylint</p><p>  安装 <code>pip install pylint</code>,再加入requirements.txt即可。</p><p>  有pylint-django插件</p></li><li><p>Flake8,他包装了</p><p>  静态检查<strong>PEP8</strong>风格的pep8,</p><p>  静态检查<strong>python代码逻辑错误</strong>的PyFlakes, </p><p>  静态分析<strong>pyhon代码复杂度</strong>的Ned Batchelder’sMcCabe script</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3></li></ul><p>在<code>project-name/project-name</code>目录下</p><p><code>django-admin startapp homepage</code></p><p>文件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- project-name          </span><br><span class="line">    - project-name</span><br><span class="line">        - __init__.py //指明这是一个Python模块</span><br><span class="line">        - settings.py //包含数据库环境、启用插件等的配置</span><br><span class="line">        - urls.py  //指明了某个URL应该指向某个函数来处理</span><br><span class="line">        - wsgi.py  //用于部署</span><br><span class="line">        - requirements</span><br><span class="line">            - dev.txt</span><br><span class="line">            - prod.txt</span><br><span class="line"></span><br><span class="line">    - homepage </span><br><span class="line">        - __init__.py</span><br><span class="line">        - admin.py</span><br><span class="line">        - apps.py</span><br><span class="line">        - models.py // 模型</span><br><span class="line">        - tests.py</span><br><span class="line">        - views.py //业务逻辑</span><br><span class="line">        - migratios</span><br><span class="line">            - __init__.py</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    - templates</span><br><span class="line">    - static</span><br><span class="line"></span><br><span class="line">    - manage.py // 可以和django-admin做类似的事情</span><br><span class="line">    - fabfile.py // fab命令寻找的文件</span><br><span class="line">    - db.sqlite3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这本书以前翻过几章，但是因为其他事情耽搁了，重新阅读已不太记得讲了什么，故重新阅读&lt;/p&gt;
&lt;h3 id=&quot;系统工具&quot;&gt;&lt;a href=&quot;#系统工具&quot; class=&quot;headerlink&quot; title=&quot;系统工具&quot;&gt;&lt;/a&gt;系统工具&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;

      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>制作H5动画页面</title>
    <link href="http://lry1994.github.io/2018/2018-3-6-H5.html"/>
    <id>http://lry1994.github.io/2018/2018-3-6-H5.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-03-07T02:55:50.613Z</updated>
    
    <content type="html"><![CDATA[<p>突然看到有H5页面外快做，看到微信朋友圈发的那些H5页面里面都用的了TweenMax，所以来研究一下，结果吓一跳，太太太强大了！！！！</p><h1 id="复习一下CSS3"><a href="#复习一下CSS3" class="headerlink" title="复习一下CSS3"></a>复习一下CSS3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">background-size: width height</span><br><span class="line">background-clip:content-box/padding-box/border-box</span><br><span class="line">background-origin:content-box/padding-box/border-box</span><br><span class="line">background-image:url(bg_flower.gif),url(bg_flower_2.gif);多个背景</span><br><span class="line"></span><br><span class="line">text-shadow:水平阴影 垂直阴影 模糊距离 阴影的颜色</span><br><span class="line">box-shadow: 水平阴影 垂直阴影 模糊距离  阴影的尺寸 阴影的颜色</span><br><span class="line"></span><br><span class="line">clip: rect (top, right, bottom, left)</span><br><span class="line">&lt;top&gt;和&lt;bottom&gt;指定偏移量是从元素盒子顶部边缘算起；</span><br><span class="line">&lt;left&gt;和&lt;right&gt;指定的偏移量是从元素盒子左边边缘算起。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">word-wrap:break-word</span><br><span class="line">@font-face</span><br><span class="line"></span><br><span class="line">转换</span><br><span class="line">transform:translate()/rotate()/scale()/skew()/matrix()/rotateX()/rotateY()</span><br><span class="line"></span><br><span class="line">动画</span><br><span class="line">transition:transition-property transition-duration transition-timing-function transition-delay</span><br><span class="line">        @keyframes myfirst</span><br><span class="line">        &#123;</span><br><span class="line">        from &#123;background: red;&#125;</span><br><span class="line">        to &#123;background: yellow;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        animation: myfirst 5s;</span><br><span class="line"></span><br><span class="line">多列，这个只能平均分</span><br><span class="line">column-count</span><br><span class="line">column-gap</span><br><span class="line">column-rule</span><br><span class="line"></span><br><span class="line">resize:both 可以鼠标拖拽</span><br><span class="line">box-sizing:border-box;</span><br><span class="line"></span><br><span class="line">outline:2px solid red;</span><br><span class="line">outline-offset:15px;</span><br></pre></td></tr></table></figure><h1 id="GreenSock"><a href="#GreenSock" class="headerlink" title="GreenSock"></a>GreenSock</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>了解资料</p><p><a href="https://greensock.com/get-started-js#intro" target="_blank" rel="noopener">greensock get-started-js</a></p><p><a href="https://greensock.com/css3" target="_blank" rel="noopener">3D Transforms &amp; More CSS3 Goodies Arrive in GSAP JS</a></p><p>基础实例</p><p><a href="https://greensock.com/jump-start-js#welcome" target="_blank" rel="noopener">Jump Start: GSAP JS</a></p><p><a href="https://greensock.com/position-parameter" target="_blank" rel="noopener">Timeline Tip: Understanding the Position Parameter</a></p><p><a href="https://codepen.io/GreenSock/pen/qeHac" target="_blank" rel="noopener">Basic play / pause toggle button</a></p><p><a href="https://tympanus.net/codrops/2015/03/25/jump-loader-animation-svg-gsap/" target="_blank" rel="noopener">create a playful Jump Loader animation</a></p><p>进阶<br><a href="https://css-tricks.com/writing-smarter-animation-code/" target="_blank" rel="noopener">Writing Smarter Animation Code</a></p><p><a href="https://greensock.com/examples-showcases" target="_blank" rel="noopener">https://greensock.com/examples-showcases</a></p><p><a href="https://tympanus.net/codrops/" target="_blank" rel="noopener">https://tympanus.net/codrops/</a><br>隆重介绍这个网站，上面有好多好多好看的动画</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GreenSock Animation Platform(GSAP)<br>是一套脚本动画工具。它包括：</p><blockquote><ul><li><code>TweenLite</code>: the core of the engine which handles animating just about any property of any object. It is relatively lightweight yet full-featured and can be expanded using optional plugins (like CSSPlugin for animating DOM element styles in the browser, or ScrollToPlugin scrolling to a specific location on a page or div, etc.)</li><li><code>TweenMax</code>: TweenLite’s beefy big brother; it does everything TweenLite can do plus non-essentials like repeat, yoyo, repeatDelay, etc. It includes many common plugins too like CSSPlugin so that you don’t need to load as many files. The focus is on being full-featured rather than lightweight.</li><li><code>TimelineLite</code>: a powerful, lightweight sequencing tool that acts like a container for tweens, making it simple to control them as a whole and precisely manage their timing in relation to each other. You can even nest timelines inside other timelines as deeply as you want. This allows you to modularize your animation workflow easily.</li><li><code>TimelineMax</code>: extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), and many more. Again, just like TweenMax does for TweenLite, TimelineMax aims to be the ultimate full-featured tool rather than lightweight.</li><li>Extras like easing tools, plugins, utilities like Draggable, and more</li></ul></blockquote><h2 id="TweenLite-可以解决基础动画"><a href="#TweenLite-可以解决基础动画" class="headerlink" title="TweenLite 可以解决基础动画"></a><code>TweenLite</code> 可以解决基础动画</h2><h3 id="动画曲线"><a href="#动画曲线" class="headerlink" title="动画曲线"></a>动画曲线</h3><p>Lightweight TweenLite: Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, and Strong </p><p>EasePack : Elastic, SlowMo, Bounce, SteppedEase, Sine, Circ, and Expo<a href="https://greensock.com/ease-visualizer" target="_blank" rel="noopener">https://greensock.com/ease-visualizer</a></p><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><pre><code>rotation, scaleX,scaleY,scale, skewX, skewY,x, (相当于css的translateX)y, (相当于css的translateY)xPercent, yPercent</code></pre><ul><li>you could set <code>xPercent</code> and <code>yPercent</code> to <code>-50</code> and <code>position:&quot;absolute&quot;</code> so that everything starts with their centers in the same spot</li><li>IE6, IE7, and IE8 transforms don’t apply to child elements (that’s a browser limitation).</li></ul><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><pre><code>rotationX, rotationY, rotationZ (identical to regular &quot;rotation&quot;), z,(相当于css的translateZ)perspective,transformPerspective</code></pre><ul><li><p>To get your elements to have a true 3D visual perspective applied, you must either set the <code>&quot;perspective&quot;</code> property of the parent element or set the special <code>&quot;transformPerspective&quot;</code> of the element itself (common values range from around 200 to 1000, the lower the number the stronger the perspective distortion)</p>  <blockquote><p>perspective distortion透视变形指的是一个物体及其周围区域与标准镜头中看到的相比完全不同，由于远近特征的相对比例变化，发生了弯曲或变形。</p></blockquote></li></ul><h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><ul><li><p>transformOrigin </p><ul><li>Sets the origin around which all transforms occur. By default, it is in the center of the element (“50% 50%”).</li></ul></li><li><p>directionalRotation</p><ul><li>_cw, _ccw , _short</li></ul></li><li><p>autoAlpha</p></li><li><p>className</p></li><li><p>autoRound<br>  By default, CSSPlugin will round pixel values and zIndex to the closest integer during the tween<br>  if you’d rather disable that behavior, pass autoRound:false<br>  You can still use the RoundPropsPlugin to manually define properties that you want rounded.</p></li><li><p>immediateRender :默认值true,在 from(), fromTo(), staggerFrom() and staggerFromTo() 方法中用</p></li><li><p>force3D :默认false</p><h3 id="Controlling-tween"><a href="#Controlling-tween" class="headerlink" title="Controlling tween"></a>Controlling tween</h3><p>  tween.pause();</p><pre><code>tl.pause() // pauses the animationtl.paused() // gets paused state, returns true or falsetl.paused(true) // sets paused state to truetl.paused(!tl.paused()) // sets paused state to inverse of current paused state.</code></pre><p>  tween.resume();<br>  tween.reverse();<br>  tween.seek(0.5);<br>  tween.timeScale(0.5);<br>  tween.timeScale(2);<br>  tween.kill();</p><p>  TweenLite.killTweensOf(myElement);</p></li></ul><h2 id="TimelineLite-让动画有序和组织"><a href="#TimelineLite-让动画有序和组织" class="headerlink" title="TimelineLite 让动画有序和组织"></a><code>TimelineLite</code> 让动画有序和组织</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a TimelineLite instance</span></span><br><span class="line"><span class="keyword">var</span> tl = <span class="keyword">new</span> TimelineLite();</span><br><span class="line"></span><br><span class="line"><span class="comment">//append a to() tween</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">width</span>:<span class="string">"50%"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add another sequenced tween (by default, tweens are added to the end of the timeline which makes sequencing simple)</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">height</span>:<span class="string">"300px"</span>, <span class="attr">ease</span>:Elastic.easeOut&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//offset the next tween by 0.75 seconds so there's a gap between the end of the previous tween and this new one</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">opacity</span>:<span class="number">0.5</span>&#125;, <span class="string">"+=0.75"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//overlap the next tween with the previous one by 0.5 seconds (notice the negative offset at the end)</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">backgroundColor</span>:<span class="string">"#FF0000"</span>&#125;, <span class="string">"-=0.5"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//animate 3 elements (e1, e2, and e3) to a rotation of 60 degrees, and stagger their start times by 0.2 seconds</span></span><br><span class="line">tl.staggerTo([e1, e2, e3], <span class="number">1</span>, &#123;<span class="attr">rotation</span>:<span class="number">60</span>&#125;, <span class="number">0.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//then call myFunction()</span></span><br><span class="line">tl.call(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//now we can control the entire sequence with the standard methods like these:</span></span><br><span class="line">tl.pause();</span><br><span class="line">tl.resume();</span><br><span class="line">tl.restart();</span><br><span class="line">tl.reverse();</span><br><span class="line">tl.play();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to exactly 2.5 seconds into the animation</span></span><br><span class="line">tl.seek(<span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//slow down playback to 10% of the normal speed</span></span><br><span class="line">tl.timeScale(<span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a label named "myLabel" at exactly 3 seconds:</span></span><br><span class="line">tl.add(<span class="string">"myLabel"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a tween that starts at "myLabel"</span></span><br><span class="line">tl.add( TweenLite.to(element, <span class="number">1</span>, &#123;<span class="attr">scale</span>:<span class="number">0.5</span>&#125;), <span class="string">"myLabel"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to "myLabel" and play from there:</span></span><br><span class="line">tl.play(<span class="string">"myLabel"</span>);</span><br></pre></td></tr></table></figure><h2 id="TimelineMax和TweenMax-多一些功能"><a href="#TimelineMax和TweenMax-多一些功能" class="headerlink" title="TimelineMax和TweenMax 多一些功能"></a><code>TimelineMax</code>和<code>TweenMax</code> 多一些功能</h2><pre><code>repeat, yoyo:BooleanrepeatDelay and more.</code></pre><p><code>TimelineMax</code> 还有方法</p><pre><code>tweenTo(), currentLabel(),getLabelBefore() getLabelAfter() and more.</code></pre><h2 id="Overwriting-other-tweens"><a href="#Overwriting-other-tweens" class="headerlink" title="Overwriting other tweens"></a>Overwriting other tweens</h2><p> all,none,auto</p><p>TweenLite.defaultOverwrite = “all”;</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p> stagger可以让多个元素执行同一个动画</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然看到有H5页面外快做，看到微信朋友圈发的那些H5页面里面都用的了TweenMax，所以来研究一下，结果吓一跳，太太太强大了！！！！&lt;/p&gt;
&lt;h1 id=&quot;复习一下CSS3&quot;&gt;&lt;a href=&quot;#复习一下CSS3&quot; class=&quot;headerlink&quot; title=&quot;复
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="H5" scheme="http://lry1994.github.io/tags/H5/"/>
    
      <category term="GreenSock" scheme="http://lry1994.github.io/tags/GreenSock/"/>
    
  </entry>
  
  <entry>
    <title>2018-3随笔笔记</title>
    <link href="http://lry1994.github.io/2018/2018-3-suibi.html"/>
    <id>http://lry1994.github.io/2018/2018-3-suibi.html</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-03-30T08:16:28.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给点击路由的时候加上监听事件"><a href="#给点击路由的时候加上监听事件" class="headerlink" title="给点击路由的时候加上监听事件"></a>给点击路由的时候加上监听事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"my-link"</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'main.provider.index', params: &#123;providerId: scope.row.providerId&#125;&#125;"</span>&gt;</span>提供者主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>解决方法：&gt; 给组件绑定原生事件    有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 v-on 的修饰符 .native。例如：    &lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</code></pre><p>参考连接<br><a href="https://segmentfault.com/q/1010000007896386" target="_blank" rel="noopener">给组件绑定原生事件</a></p><h3 id="块内元素文字上下居中"><a href="#块内元素文字上下居中" class="headerlink" title="块内元素文字上下居中"></a>块内元素文字上下居中</h3><p>line-height设置为height的值</p><h3 id="export及export-default的区别"><a href="#export及export-default的区别" class="headerlink" title="export及export default的区别"></a>export及export default的区别</h3><p>在一个文件或模块中，export可以有多个，export default仅有一个。 </p><ul><li>export</li></ul><p>(1) 导入的时候带花括号</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;; <span class="comment">//export m 或者export 1都错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br></pre></td></tr></table></figure></code></pre><p>(2) export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p><ul><li>export default </li></ul><p>(1) 导入的时候没有花括号</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'demo1'</span> <span class="comment">//导入的时候没有花括号</span></span><br></pre></td></tr></table></figure></code></pre><p>(2) export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。</p><h3 id="用refs来组件通信"><a href="#用refs来组件通信" class="headerlink" title="用refs来组件通信"></a>用refs来组件通信</h3><p>在讨论非父子通信的时候，并在没有用Vuex的情况下，我是用官网那种创建Vue实例的方法，但是同事提到了另一种方法<br>用refs来引用，不禁一想这好像也是一种解决方案，就是觉得怪怪的。在这里记录一下</p><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><p><a href="https://www.cnblogs.com/shixiaomiao1122/p/7591556.html" target="_blank" rel="noopener">https://www.cnblogs.com/shixiaomiao1122/p/7591556.html</a><br><a href="https://www.cnblogs.com/slly/p/6732749.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6732749.html</a></p><p>判断缓存是否过期步骤是：</p><ul><li><p>不发生请求 强缓存：<br>  <strong>s-maxage优先于max-age优先于expires</strong></p><p>  1） 查看是否有cache-control 的max-age / s-maxage , 如果有，则用服务器时间date值 + max-age/s-maxage 的秒数计算出新的过期时间，将当前时间与过期时间进行比较，判断是否过期</p><p>  2）查看是否有cache-control 的max-age / s-maxage，如果没有，则用expires 作为过期时间比较</p></li><li><p>发送请求</p><p>  3）Last-Modified与ETag，<strong>ETag优先于Last-Modified</strong></p><pre><code>Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：1. Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度2. 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存3. 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</code></pre></li></ul><img src="/2018/2018-3-suibi/cache.png" title="浏览器缓存机制"><img src="/2018/2018-3-suibi/user_cache.png" title="用户行为影响浏览器缓存"><p>浏览器的缓存来源是怎么设置的？</p><p>看到知乎有人讨论 <a href="https://www.zhihu.com/question/64201378" target="_blank" rel="noopener">https://www.zhihu.com/question/64201378</a></p><h3 id="关于第4点，今天工作用了this-refs来传播事件，类似于-brocast-但是VUE2把-brocast废除了。"><a href="#关于第4点，今天工作用了this-refs来传播事件，类似于-brocast-但是VUE2把-brocast废除了。" class="headerlink" title="关于第4点，今天工作用了this.$refs来传播事件，类似于$brocast,但是VUE2把$brocast废除了。"></a>关于第4点，今天工作用了this.$refs来传播事件，类似于$brocast,但是VUE2把$brocast废除了。</h3><p>总结一下vue传播事件</p><p>(1) 子组件传播事件给父组件，用<code>$on,$emit</code>.</p><p>虽然说是这样说，但是不是直接在父组件里面写$on的,应该是这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">eventname</span>=<span class="string">"event"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在parent组件里面写 event函数.event(){}</p><p>子组件调用的时候用<code>this.$emit(&#39;eventname&#39;,payload)</code></p><p>(2)父组件传播事件给子组件，用 <code>$refs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">"refname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parant</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用的时候用<code>this.$ref[&#39;refname&#39;].eventname()</code></p><p>(3)上面有种都麻烦的话，创建实例bus</p><h3 id="js的数组可以是这样的形式"><a href="#js的数组可以是这样的形式" class="headerlink" title="js的数组可以是这样的形式"></a>js的数组可以是这样的形式</h3><p><code>(4) [{…}, {…}, {…}, {…}, total: 4, code: &quot;core.ok&quot;, __ob__: Observer]</code></p><p>他的length是4，不知道是不是ES6的新特性<br>我把下面这句在浏览器下运行是出错的</p><p><code>let arr= [{id:1}, {id:2}, {id:3}, {id:4}, total: 4, code: &quot;core.ok&quot;];</code></p><h3 id="把字符串转换成数字可以用数字运算符-但是-不行"><a href="#把字符串转换成数字可以用数字运算符-但是-不行" class="headerlink" title="把字符串转换成数字可以用数字运算符,但是 + 不行"></a>把字符串转换成数字可以用数字运算符,但是 + 不行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;&gt;&gt;<span class="number">0</span>)  <span class="comment">//2 number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;&gt;<span class="number">0</span>)  <span class="comment">//2 number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&lt;&lt;<span class="number">0</span>)  <span class="comment">//2 number  没有（&lt;&lt;&lt;）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>- <span class="number">0</span>)    <span class="comment">//2 number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>+<span class="number">0</span>)    <span class="comment">//20 string</span></span><br></pre></td></tr></table></figure><h3 id="reduce函数好好用"><a href="#reduce函数好好用" class="headerlink" title="reduce函数好好用"></a>reduce函数好好用</h3><p>今天写了一个有重大作用的reduce函数，好开心。在此纪念一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str &#123;String&#125;, "app.get.logo.list"</span></span><br><span class="line"><span class="comment">//ctx &#123;Object&#125;,  this._$http</span></span><br><span class="line"><span class="comment">//return &#123;Object&#125;, this._$http.app.get.logo.list</span></span><br><span class="line"> getBackend(str)&#123;</span><br><span class="line">        <span class="keyword">const</span> arr = <span class="keyword">this</span>.loadBackend.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">let</span> ctx= <span class="keyword">this</span>._$http;</span><br><span class="line">        <span class="keyword">let</span> a;</span><br><span class="line">        <span class="keyword">let</span> b=arr.reduce(<span class="function">(<span class="params">prev, cur, idx</span>) =&gt;</span> &#123;        </span><br><span class="line">              a = prev[cur] ;         </span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,ctx);              </span><br><span class="line">          <span class="keyword">return</span> b;      </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="用mpVue开发小程序了"><a href="#用mpVue开发小程序了" class="headerlink" title="用mpVue开发小程序了"></a>用mpVue开发小程序了</h3><p><a href="https://www.itcodemonkey.com/article/2573.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/2573.html</a></p><h3 id="vue项目中全局引入scss文件的方法"><a href="#vue项目中全局引入scss文件的方法" class="headerlink" title="vue项目中全局引入scss文件的方法"></a>vue项目中全局引入scss文件的方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br><span class="line">npm install sass-resources-loader --save-dev</span><br></pre></td></tr></table></figure><p>修改build/utils.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          resources: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="elementUI的layout问题"><a href="#elementUI的layout问题" class="headerlink" title="elementUI的layout问题"></a>elementUI的layout问题</h3><p>el-footer会直接fixed在窗口底部，不好看，</p><p>解决方法：el-footer放到el-main里面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">"height:100%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">style</span>=<span class="string">"height:100px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cty-navbar</span> <span class="attr">:navs</span>=<span class="string">"navs"</span>&gt;</span><span class="tag">&lt;/<span class="name">cty-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-style</span>=<span class="string">"overflow-x:hidden;"</span> <span class="attr">style</span>=<span class="string">"min-height: 800px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-footer</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">style</span>=<span class="string">"height:70px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cty-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">cty-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="vue路由刷新问题，两个路由对应一个组件，如何能让路由重载"><a href="#vue路由刷新问题，两个路由对应一个组件，如何能让路由重载" class="headerlink" title="vue路由刷新问题，两个路由对应一个组件，如何能让路由重载"></a>vue路由刷新问题，两个路由对应一个组件，如何能让路由重载</h3><p><a href="https://segmentfault.com/q/1010000010844655" target="_blank" rel="noopener">https://segmentfault.com/q/1010000010844655</a><br>写在共用组件文件里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">mounted()&#123;...&#125;,</span><br><span class="line"> watch: &#123;          </span><br><span class="line">            $route: &#123;</span><br><span class="line">                handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.worksheet_type = <span class="keyword">this</span>.$route.params.type;                     </span><br><span class="line">                &#125;,</span><br><span class="line">                deep: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>在共用组件上加上key<br><code>&lt;div :key=&quot;$route.path&quot;&gt;</code></p><h2 id="JS运行机制"><a href="#JS运行机制" class="headerlink" title="JS运行机制"></a>JS运行机制</h2><p>执行栈,任务队列<br><code>process.nextTick</code>方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数<br><code>setImmediate</code>方法则是在当前”任务队列”的尾部添加事件<br><code>process.nextTick</code>指定的回调函数是在本次”事件循环”触发，而setImmediate指定的是在下次”事件循环”触发<br><code>setTimeout(fn,0)</code>表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。<br><code>Promise</code>，里面的函数是直接执行的.<br><code>Promise</code> 的 then 应当会放到当前 “执行栈”的尾部</p><img src="/2018/2018-3-suibi/js_zhan_duilie.jpg" title="js堆栈">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;给点击路由的时候加上监听事件&quot;&gt;&lt;a href=&quot;#给点击路由的时候加上监听事件&quot; class=&quot;headerlink&quot; title=&quot;给点击路由的时候加上监听事件&quot;&gt;&lt;/a&gt;给点击路由的时候加上监听事件&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随笔笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%9A%8F%E7%AC%94%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="http://lry1994.github.io/tags/vue/"/>
    
      <category term="ES6" scheme="http://lry1994.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客过程</title>
    <link href="http://lry1994.github.io/2018/2018-2-26-rebuild-blog.html"/>
    <id>http://lry1994.github.io/2018/2018-2-26-rebuild-blog.html</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-03-08T09:43:32.198Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个很喜欢做笔记的人，老是写在word文档不方便。之前用jekyll搭了一个，感觉写得也是乱七八糟，页面也不好看，改的话不如重新重写一个好了</p><p>有了上次经验，觉得做一个东西真的要认真规划一下，不然做出来的东西老是迁就的感觉，能用就行。这样是不行的。像做一个产品来做它</p><p>源码地址  <a href="https://github.com/LRY1994/hexo-blog.git" target="_blank" rel="noopener">https://github.com/LRY1994/hexo-blog.git</a></p><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>重构博客原因有下：</p><ol><li>Jkeyll目录文件关系得按照规定放置，灵活性差（虽然hexo也是这样）</li><li>日记页面不美观，想换，干脆重新规划做一个</li><li>学习一下怎么在github上弄1.0版本，2.0版本</li><li>jekyll显示markdown不好看</li></ol><p>参考<a href="https://www.jianshu.com/p/c4f145fdd637" target="_blank" rel="noopener">博客搭建可行性方案( jekyll , hexo , Wordpress )</a></p><p>较多人采用的博客搭建方案有如下几种：</p><ol><li>Git+Github+Markdown+jekyll （免费）</li><li>Git+Github+Markdown+hexo （免费）</li><li>虚拟主机＋插件＋Wordpress （付费）</li></ol><p>为了省钱，所以选择第二种</p><h2 id="可行性研究"><a href="#可行性研究" class="headerlink" title="可行性研究"></a>可行性研究</h2><p>毋庸置疑，可行</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>分为工作、学习、生活三个模块</p><ul><li>工作<ul><li>简历 (制作简历网页，jekyll那个是直接把简历模板copy过来的)</li></ul></li><li>学习<ul><li>笔记 （可按时间、类别分类）<ul><li>读书笔记（以书籍为单位来）</li><li>随笔笔记（在生活中遇到的问题或者想要摘录的，以月为单位）</li><li>专题笔记（围绕某个东西的笔记，以主题为单位）</li></ul></li><li>项目<ul><li>项目一</li><li>项目二 等</li></ul></li><li>用户体验（把有时候产品用得不愉快的经历记录下来，一篇，不定时更新）</li></ul></li><li>生活<ul><li>减肥 <ul><li>运动日历 （因为办了健身卡 ）</li><li>减脂餐图栏</li></ul></li><li>护肤化妆心得 （我一直都有颗当美妆博主的心）</li><li>旅游攻略 （喜欢旅游，但不可以经常旅游，所以很珍惜每一次，都想把它记录下来）</li></ul></li><li>其他<ul><li>社区账号（比较常用segmentfault/weibo/V2EX）</li><li>聊天框</li></ul></li></ul><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><p>输出原型图<br>使用mockplus</p><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h2 id="编码和单元测试"><a href="#编码和单元测试" class="headerlink" title="编码和单元测试"></a>编码和单元测试</h2><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>最终部署在github</p><ol><li><p>Permission denied (publickey)错误<br> 解决方法<br> <a href="https://www.cnblogs.com/xsilence/p/6001938.html" target="_blank" rel="noopener">针对github权限导致hexo部署失败的解决方案</a></p></li><li><p>和jekyll不同，<code>hexo d</code>会覆盖掉github仓库的代码，试了创建两个分支，比较麻烦，放弃。建立两个仓库，一个放源代码，一个放生成代    码。注意，生成代码需要放在master分支上，跟jekyll一样，生成代码的项目名字要取名为<code>username.github.io</code></p></li><li><p>使用next主题的时候需要在_config.yml把<code>permalink: :title</code>中改成<br> <code>permalink: :title.html</code><br> 不然点击文章的时候会出现下载框</p></li><li><p>about页面需要自己创建，并且自己写。</p><p> 大容器页面布局默认_layout布局，在<code>theme/next/layout_layout.swig</code>中定义。</p><p> 全部页面都是默认page布局，在<code>theme/next/layout/page.swig</code>中定义。</p><p> 只有archive,tag,category页面不用创建，直接在<code>theme/next/layout/</code>对应名字文件里面写，即</p><p> <code>theme/next/layout/archive.swig</code></p><p> <code>theme/next/layout/category.swig</code></p><p> <code>theme/next/layout/tag.swig</code></p><p> 但是tag,category页面还需要多做一步：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p> 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p> 在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives</span><br><span class="line">tags: /tags</span><br></pre></td></tr></table></figure></li><li><p>换了主题重新部署，需要重新打包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> 这个需要一段时间githubPage才会更新</p></li><li><p>写文章的时候要插入图片 </p><p> (1) 按照<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">官方说法</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_posts</span><br><span class="line"></span><br><span class="line">    |- post1.md</span><br><span class="line"></span><br><span class="line">    |_ post1</span><br><span class="line"></span><br><span class="line">        |- pic1.png</span><br></pre></td></tr></table></figure><ol><li><p>首先确认_config.yml中有：</p><figure class="highlight plain"><figcaption><span>true``</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2. 安装</span><br><span class="line"></span><br><span class="line">```npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>这样可以插入文章资源目录下的图片</p><p>(2) 还是写正常的markdown,<code>![](./img.png)</code>,<code>hexo g</code>生成public文件夹之后，把图片复制到改目录下，再<code>hexo d</code></p><p>(3) 看到还有一个解决方法，没试过<br><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p></li></ol></li><li><p>添加文章阅读量<br><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="noopener">添加文章阅读量</a></p></li></ol><h2 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h2><p>管理博客</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>最后发现hexo并不能实现博客以外的东西，可能它的定位就是博客框架吧。而且hexo和next都不可以自定义layout,Jekyll还可以自定义layout放置在_layout目录下</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是一个很喜欢做笔记的人，老是写在word文档不方便。之前用jekyll搭了一个，感觉写得也是乱七八糟，页面也不好看，改的话不如重新重写一个好了&lt;/p&gt;
&lt;p&gt;有了上次经验，觉得做一个东西真的要认真规划一下，不然做出来的东西老是迁就的感觉，能用就行。这样是不行的。像做一个产
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>原生DOM兼容特性总结</title>
    <link href="http://lry1994.github.io/2018/2018-2-26-front-end-summary.html"/>
    <id>http://lry1994.github.io/2018/2018-2-26-front-end-summary.html</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-03-01T05:37:09.306Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器主要也就是IE有点独特，所以把IE重点区分开</p><table><thead><tr><th>名称</th><th style="text-align:left">主流</th><th style="text-align:left">IE</th></tr></thead><tbody><tr><td>内文本</td><td style="text-align:left">innerText</td><td style="text-align:left">textContent</td></tr><tr><td>请求对象</td><td style="text-align:left">XMLHttpRequest</td><td style="text-align:left">ActiveXObject<br>[“MSXML2.XMLHttp.6.0”,”MSXML2.XMLHttp.3.0”,”MSXML2.XMLHttp”]</td></tr><tr><td>监听事件添加</td><td style="text-align:left">addEventListener(DOM2),<br> [\’on\’+eventName](DOM0)</td><td style="text-align:left">attachEvent</td></tr><tr><td>监听事件移除</td><td style="text-align:left">removeEventListener(DOM2),<br>[‘on’+eventName]=null(DOM0)</td><td style="text-align:left">detachEvent</td></tr><tr><td>事件对象</td><td style="text-align:left">function(e) e</td><td style="text-align:left">window.event(IE7之前)</td></tr><tr><td>阻止默认事件</td><td style="text-align:left">preventDefault</td><td style="text-align:left">e.returnValue=false</td></tr><tr><td>阻止冒泡</td><td style="text-align:left">stopPropagation</td><td style="text-align:left">e.cancelBubble=true</td></tr><tr><td>键盘事件键盘编码</td><td style="text-align:left">e.charCode</td><td style="text-align:left">e.keyCode</td></tr><tr><td>获取剪贴板的文本</td><td style="text-align:left">e.clipboardData</td><td style="text-align:left">window.clipboardData</td></tr><tr><td>设置剪贴板文本</td><td style="text-align:left">e.clipboardData.setData(“text/plain”,value);</td><td style="text-align:left">window.clipboardData.setData(“text”,value);</td></tr><tr><td>触发事件的元素</td><td style="text-align:left">e.target</td><td style="text-align:left">e.srcElement</td></tr><tr><td>获取样式</td><td style="text-align:left">getComputedStyle(obj,false)[attr];(Firefox浏览器)<br> obj.style.attr(只对filter,opacity等有效)<br>obj.style[attr]</td><td style="text-align:left">obj.currentStyle[attr];</td></tr><tr><td>窗口左边的位置</td><td style="text-align:left">window.screenLeft</td><td style="text-align:left">window.screenX</td></tr><tr><td>页面视口大小</td><td style="text-align:left">window.innerHeight</td><td style="text-align:left">if(document.compatMode==”CSS1Compat”)window.documentElement.clientHeight;<br> if(document.compatMode==”BackCompat”)window.body.clientHeight<br></td></tr><tr><td>获取元素</td><td style="text-align:left">document.getElementById(id);</td><td style="text-align:left">document.all[id];(IE5)</td></tr><tr><td>返回指定的属性</td><td style="text-align:left">ele.getAttribute(attr)</td><td style="text-align:left">ele.attribute[attr]</td></tr><tr><td>ele是否存在指定属性 attr</td><td style="text-align:left">ele.hasAttribute(attr)</td><td style="text-align:left">ele.attributes[attr].specified;</td></tr><tr><td>鼠标滚动，正数表示向上滚动</td><td style="text-align:left">function getWheelDelta(e){<br>if(e.wheelData){<br>return (client.engine.opera&amp;&amp;client.engine.opera&lt;9.5)?<br>-e.wheelData:e.wheelData;<br>}else {<br>return -e.detail*40;//firefox<br>}<br>}</td><td style="text-align:left"></td></tr><tr><td>提取选中的文本</td><td style="text-align:left">textbox.value.subString(textbox.selectionStart,textbox.selectionEnd);</td><td style="text-align:left">document.selection.createRange().text;<br>(IE8之前没有selectionStart，selectionEnd属性</td><td></td></tr><tr><td>设置文本选中</td><td style="text-align:left">textbox.setSelectionRange(startIndex,stopIndex);</td><td style="text-align:left">var range=textbox.createTextRange();<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,stopIndex-startIndex);<br>range.select()</td></tr></tbody></table><p>下面是积累下来的一些兼容函数，可以当做模板用</p><ul><li><a href="#添加多个onload事件">添加多个onload事件</a></li><li><a href="#处理ActiveXObject/XMLHttpRequest问题">处理ActiveXObject/XMLHttpRequest问题</a></li><li><a href="#请求对象的属性和方法设置">请求对象的属性和方法设置</a></li><li><a href="#发送表单数据">发送表单数据</a></li><li><a href="#跨浏览器的CORS">跨浏览器的CORS</a></li><li><a href="#跨浏览器事件处理程序">跨浏览器事件处理程序</a></li><li><a href="#处理target/srcelemnt问题，代替this">处理target/srcelemnt问题，代替this</a></li><li><a href="#实现insertAfter">实现insertAfter</a></li><li><a href="#给element加上类名">给element加上类名</a></li><li><a href="#判断是不是数组">判断是不是数组</a></li><li><a href="#IE10之前不支持docunment.getElementByClassName">IE10之前不支持docunment.getElementByClassName</a></li><li><a href="#获取css样式">获取css样式</a></li><li><a href="#手写动画">手写动画</a></li><li><a href="#取得窗口左边和上边的位置">取得窗口左边和上边的位置</a></li><li><a href="#取得页面视口大小">取得页面视口大小</a></li><li><a href="#检测插件方法">检测插件方法</a></li><li><a href="#获取元素">获取元素</a></li><li><a href="#检查对象的某个特性是否存在">检查对象的某个特性是否存在</a></li><li><a href="#对象转换成数组">对象转换成数组</a></li><li><a href="#返回指定的属性">返回指定的属性</a></li><li><a href="#ele是否存在指定属性">ele是否存在指定属性</a></li><li><a href="#ele是否符合选择器selector">ele是否符合选择器selector</a></li><li><a href="#获取内文本">获取内文本</a></li><li><a href="#获取鼠标事件的父元素">获取鼠标事件的父元素</a></li><li><a href="#探测按的是鼠标的哪个键">探测按的是鼠标的哪个键</a></li><li><a href="#鼠标滚动事件">鼠标滚动事件</a></li><li><a href="#提取选中的文本">提取选中的文本</a></li><li><a href="#设置文本选中">设置文本选中</a></li><li><a href="#bind方法对老版本的浏览器不起作用">bind方法对老版本的浏览器不起作用</a></li><li><a href="#包装cookie">包装cookie</a></li><li><a href="#包装子cookie">包装子cookie</a></li><li><a href="#indexedDB">indexedDB</a></li><li><a href="#手写typeof">手写typeof</a></li><li><a href="#深度克隆">深度克隆</a></li><li><a href="#组合使用构造函数模式和原型模式创建对象">组合使用构造函数模式和原型模式创建对象</a></li><li><a href="#组合继承">组合继承</a></li><li><a href="#观察者模式">观察者模式</a></li><li><a href="#分享一个题目">分享一个题目</a></li></ul><h2 id="添加多个onload事件"><a href="#添加多个onload事件" class="headerlink" title="添加多个onload事件"></a>添加多个onload事件</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldonload=<span class="built_in">window</span>.onload;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.onload!= <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload=func;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            oldonload();</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理ActiveXObject-XMLHttpRequest问题"><a href="#处理ActiveXObject-XMLHttpRequest问题" class="headerlink" title="处理ActiveXObject/XMLHttpRequest问题"></a>处理ActiveXObject/XMLHttpRequest问题</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法，《js高级程序设计》的写法  惰性载入技巧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest!=<span class="string">"undefined"</span>)&#123;<span class="comment">//XMLHttpRequest</span></span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject!=<span class="string">"undefined"</span>)&#123;<span class="comment">//IE ActiveXObject</span></span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString!=<span class="string">"string"</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> versions=[<span class="string">"MSXML2.XMLHttp.6.0"</span>,<span class="string">"MSXML2.XMLHttp.3.0"</span>,<span class="string">"MSXML2.XMLHttp"</span>],<span class="comment">//IE</span></span><br><span class="line">    i,len;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>,len=versions.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">    <span class="built_in">arguments</span>.callee.activeXString=version[i];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> createXHR();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">        XMLHttpRequest= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP.6.0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP.3.0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求对象的属性和方法设置"><a href="#请求对象的属性和方法设置" class="headerlink" title="请求对象的属性和方法设置"></a>请求对象的属性和方法设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=createXHR();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//firfox引入onlaod，readyState==4时触发,代替onreadystatechange</span></span><br><span class="line"><span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">alert(xhr.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">"unsuccessful"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">alert(xhr.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">"unsuccessful"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onprogress=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.lengthComputable)&#123;<span class="comment">//进度信息是否可用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Received"</span>+event.position+<span class="string">"of"</span>+event.totalSize);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.timeout=<span class="number">1000</span>;</span><br><span class="line">xhr.ontimeout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"timeout"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"example.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.overrideMimeType(<span class="string">"text/xml"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);<span class="comment">//GET</span></span><br></pre></td></tr></table></figure><h2 id="发送表单数据"><a href="#发送表单数据" class="headerlink" title="发送表单数据"></a>发送表单数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form=<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">xhr.send(serialize(form));<span class="comment">//第一种写法</span></span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure><h2 id="跨浏览器的CORS"><a href="#跨浏览器的CORS" class="headerlink" title="跨浏览器的CORS"></a>跨浏览器的CORS</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCORSRequest</span>(<span class="params">method,url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"withCredentials"</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> XDomainRequest !=<span class="string">"undefined"</span>)&#123;</span><br><span class="line">xhr=<span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xhr.open(method,url);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">xhr=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request=createCORSRequest(<span class="string">"get"</span>,<span class="string">"http://www.somewhere"</span>);</span><br><span class="line"><span class="keyword">if</span>(request)&#123;</span><br><span class="line">request.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">request.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventUtil=&#123;</span><br><span class="line"><span class="comment">// 页面加载完成后</span></span><br><span class="line">    readyEvent : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn==<span class="literal">null</span>) &#123;</span><br><span class="line">            fn=<span class="built_in">document</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = fn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                oldonload();</span><br><span class="line">                fn();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addEventHandler: <span class="function"><span class="keyword">function</span> (<span class="params">obj, eventName, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">            obj.attachEvent(<span class="string">"on"</span> + eventName, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//DOM2级</span></span><br><span class="line">            obj.addEventListener(eventName, handler, <span class="literal">false</span>);<span class="comment">//false- 默认。事件句柄在冒泡阶段执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//DOM0级</span></span><br><span class="line">            obj[<span class="string">'on'</span>+eventName]=handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    removeEventHandler:<span class="function"><span class="keyword">function</span>(<span class="params">obj, eventName, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">            obj.detachEvent(<span class="string">"on"</span> + eventName, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//DOM2级</span></span><br><span class="line">            obj.removeEventListener(eventName, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//DOM0级</span></span><br><span class="line">            obj[<span class="string">'on'</span>+eventName]=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="comment">//获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">            <span class="keyword">while</span> (c) &#123;</span><br><span class="line">                ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                c = c.caller;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//事件类型</span></span><br><span class="line">    getType: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.type;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//调用事件的元素</span></span><br><span class="line">    getElement: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.target|| e.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//阻止默认事件</span></span><br><span class="line">    preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e= <span class="keyword">this</span>.getEvent(e);</span><br><span class="line">        <span class="keyword">if</span>(e.preventDefault)&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> e.returnValue=<span class="literal">false</span>;<span class="comment">//IE</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//阻止冒泡</span></span><br><span class="line">    stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(e.stopPropagation)&#123;</span><br><span class="line">          e.stopPropagation();</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          e.cancelBubble=<span class="literal">true</span>;<span class="comment">//IE</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//键盘事件键盘的编号</span></span><br><span class="line">    getCharCode:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> e.charCode==<span class="string">"number"</span>)<span class="keyword">return</span> e.charCode;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> e.keyCode;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取剪贴板的文本</span></span><br><span class="line">    getClipbordText:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData=(e.clipboardData||<span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置剪贴板文本</span></span><br><span class="line">    setClipboardText:<span class="function"><span class="keyword">function</span>(<span class="params">e,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.clipboardData)&#123;</span><br><span class="line">    <span class="keyword">return</span> e.clipboardData.setData(<span class="string">"text/plain"</span>,value);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.clipboardData)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理target-srcelemnt问题，代替this"><a href="#处理target-srcelemnt问题，代替this" class="headerlink" title="处理target/srcelemnt问题，代替this"></a>处理target/srcelemnt问题，代替this</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActivatedObject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">        <span class="comment">// early version of IE</span></span><br><span class="line">        obj = <span class="built_in">window</span>.event.srcElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.srcElement) &#123;</span><br><span class="line">        <span class="comment">// IE 7 or later</span></span><br><span class="line">        obj = e.srcElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// DOM Level 2 browser</span></span><br><span class="line">        obj = e.target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现insertAfter"><a href="#实现insertAfter" class="headerlink" title="实现insertAfter"></a>实现insertAfter</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把newElement插在targetElement后面 ,js的API只有insertBefore，没有insertAfter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement,targetElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">        parent.appendChild(newElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.insertBefore(newElement,targetElement.nextSibling);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给element加上类名"><a href="#给element加上类名" class="headerlink" title="给element加上类名"></a>给element加上类名</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element,value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!element.className) &#123;</span><br><span class="line">        element.className = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newClassName = element.className;</span><br><span class="line">        newClassName+= <span class="string">" "</span>;</span><br><span class="line">        newClassName+= value;</span><br><span class="line">        element.className = newClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是不是数组"><a href="#判断是不是数组" class="headerlink" title="判断是不是数组"></a>判断是不是数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="comment">//return Object.prototype.toString.call(arr)=='[Object Array]';这种方法也可以</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg == <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">//所有数组都有一个包含单词'arry'的constructor,最后的i表示不区分大小写</span></span><br><span class="line">        <span class="keyword">var</span> criteria = arg.constructor.toString().match(<span class="regexp">/array/i</span>);</span><br><span class="line">        <span class="keyword">return</span> (criteria != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IE10之前不支持docunment-getElementByClassName"><a href="#IE10之前不支持docunment-getElementByClassName" class="headerlink" title="IE10之前不支持docunment.getElementByClassName"></a>IE10之前不支持docunment.getElementByClassName</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">clsName,parent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(docunment.getElementByClassName) <span class="keyword">return</span> docunment.getElementByClassName(clsName);</span><br><span class="line">    <span class="comment">//IE10之前</span></span><br><span class="line">    <span class="keyword">var</span> oParent=parent?<span class="built_in">document</span>.getElementById(parent):<span class="built_in">document</span>,</span><br><span class="line">        eles=[],</span><br><span class="line">        elements=oParent.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=elements.length;i&lt;l;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(elements[i].className==clsName)&#123;</span><br><span class="line">            eles.push(elements[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> eles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取css样式"><a href="#获取css样式" class="headerlink" title="获取css样式"></a>获取css样式</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle) &#123;<span class="comment">//IE 浏览器</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//Firefox浏览器</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写动画"><a href="#手写动画" class="headerlink" title="手写动画"></a>手写动画</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动画 startMove(oLi,&#123;width:400,height:200,opacity:100&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj,json,fn</span>)</span>&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer=setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="keyword">var</span> cur=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)&#123;</span><br><span class="line">                cur=<span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(obj,attr))*<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur=<span class="built_in">parseInt</span>(getStyle(obj,attr));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> speed=(json[attr]-cur)/<span class="number">8</span>;</span><br><span class="line">            speed=speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</span><br><span class="line">            <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur!=json[attr])&#123;<span class="comment">//使得所有属性做完运动才结束</span></span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.filter=<span class="string">'alpha(opacity:'</span>+(cur+speec)+<span class="string">')'</span>;</span><br><span class="line">                obj.style.opacity=(cur+speed)/<span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                obj.style[attr]=(cur+speed)+<span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="keyword">if</span>(fn)&#123;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取得窗口左边和上边的位置"><a href="#取得窗口左边和上边的位置" class="headerlink" title="取得窗口左边和上边的位置"></a>取得窗口左边和上边的位置</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos=(<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft ==<span class="string">"number"</span>)?<span class="built_in">window</span>.screenLeft:<span class="built_in">window</span>.screenX;</span><br></pre></td></tr></table></figure><h2 id="取得页面视口大小"><a href="#取得页面视口大小" class="headerlink" title="取得页面视口大小"></a>取得页面视口大小</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth=<span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight=<span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> pageHeight!=<span class="string">"number"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode==<span class="string">"CSS1Compat"</span>)&#123;<span class="comment">//标准模式</span></span><br><span class="line">    pageHeight=<span class="built_in">window</span>.documentElement.clientHeight;</span><br><span class="line">    pageWidth=<span class="built_in">window</span>.documentElement.clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//BackCompat</span></span><br><span class="line">    pageHeight=<span class="built_in">window</span>.body.clientHeight;</span><br><span class="line">    pageWidth=<span class="built_in">window</span>.body.clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="检测插件方法"><a href="#检测插件方法" class="headerlink" title="检测插件方法"></a>检测插件方法</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">* 检测插件方法一，IE下无效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">name=name.toLowerCase();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;navigator.plugins.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(navigator.plugins[i].toLowerCase().indexOf(name)!=<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测IE插件方法二 ,name是COM对象唯一标识符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;<span class="comment">//IE5前</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.all[id];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"no way to retrieve element!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查对象的某个特性是否存在"><a href="#检查对象的某个特性是否存在" class="headerlink" title="检查对象的某个特性是否存在"></a>检查对象的某个特性是否存在</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHostMethod</span>(<span class="params">object,property</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> t =<span class="keyword">typeof</span> object[property];</span><br><span class="line"><span class="keyword">return</span> t==<span class="string">"function"</span>||</span><br><span class="line">       (!!(t==<span class="string">"object"</span>)&amp;&amp;object[property])||</span><br><span class="line">       t==<span class="string">"unknown"</span>;<span class="comment">//不懂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象转换成数组"><a href="#对象转换成数组" class="headerlink" title="对象转换成数组"></a>对象转换成数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> array=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">array=<span class="built_in">Array</span>.propotype.slice.call(nodes,<span class="number">0</span>);<span class="comment">//IE8前无效</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&lt;len;i++)&#123;</span><br><span class="line">array.push(nodes[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回指定的属性"><a href="#返回指定的属性" class="headerlink" title="返回指定的属性"></a>返回指定的属性</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回指定的属性 IE ele.attribute[]</span></span><br><span class="line"><span class="comment"> * Element.getAttribute()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttribute</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pairs=<span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">    attrname,attrvalue,u,len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,len=ele.attribute.length;i&lt;len;i++)&#123;</span><br><span class="line">attrname=ele.attributes[i].nodeName;</span><br><span class="line">attrvalue=ele.attributes[i].nodeValue;</span><br><span class="line"><span class="keyword">if</span>(ele.attributes[i].specified)&#123;<span class="comment">//IE</span></span><br><span class="line">pairs.push(attrname+<span class="string">'=\"'</span>+attrvalue+<span class="string">'\"'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ele是否存在指定属性"><a href="#ele是否存在指定属性" class="headerlink" title="ele是否存在指定属性"></a>ele是否存在指定属性</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ele是否存在指定属性 attr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasattribute</span>(<span class="params">ele,attr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ele.hasAttribute)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.hasAttribute(attr);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//IE</span></span><br><span class="line"><span class="keyword">return</span> ele.attributes[attr].specified;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ele是否符合选择器selector"><a href="#ele是否符合选择器selector" class="headerlink" title="ele是否符合选择器selector"></a>ele是否符合选择器selector</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ele是否符合选择器selector</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchesSelector</span>(<span class="params">ele,selector</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ele.matchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.matchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.msmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.msmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.mozmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.mozmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.webkitmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.webkitmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"not support"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取内文本"><a href="#获取内文本" class="headerlink" title="获取内文本"></a>获取内文本</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//innerText/textContent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">typeof</span> ele.innerText==<span class="string">"string"</span>)?</span><br><span class="line">ele.innerText:ele.textContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取鼠标事件的父元素"><a href="#获取鼠标事件的父元素" class="headerlink" title="获取鼠标事件的父元素"></a>获取鼠标事件的父元素</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRelatedTarget</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.relatedTarget) <span class="keyword">return</span> e.relatedTarget;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.fromElement) <span class="keyword">return</span> e.fromElement;<span class="comment">//mouseover</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.toElement) <span class="keyword">return</span> e.toElement;<span class="comment">//mouseout</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="探测按的是鼠标的哪个键"><a href="#探测按的是鼠标的哪个键" class="headerlink" title="探测按的是鼠标的哪个键"></a>探测按的是鼠标的哪个键</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getButton</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>,<span class="string">"2.0"</span>))&#123;</span><br><span class="line">   <span class="keyword">return</span> e.button;</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">switch</span>(e.button)&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标滚动事件"><a href="#鼠标滚动事件" class="headerlink" title="鼠标滚动事件"></a>鼠标滚动事件</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//鼠标滚动，正数表示向上滚动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWheelDelta</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.wheelData)&#123;</span><br><span class="line">    <span class="keyword">return</span> (client.engine.opera&amp;&amp;client.engine.opera&lt;<span class="number">9.5</span>)?</span><br><span class="line">    -e.wheelData:e.wheelData;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -e.detail*<span class="number">40</span>;<span class="comment">//firefox</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="提取选中的文本"><a href="#提取选中的文本" class="headerlink" title="提取选中的文本"></a>提取选中的文本</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedText</span>(<span class="params">textbox</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> selectionStart==<span class="string">"number"</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> textbox.value.subString(textbox.selectionStart,textbox.selectionEnd);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.selection)&#123;<span class="comment">//IE8之前没有selectionStart，selectionEnd属性</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置文本选中"><a href="#设置文本选中" class="headerlink" title="设置文本选中"></a>设置文本选中</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectText</span>(<span class="params">textbox,startIndex,stopIndex</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(textbox.setSelectionRange)&#123;</span><br><span class="line">textbox.setSelectionRange(startIndex,stopIndex);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(textbox.createTextRange)&#123;<span class="comment">//IE</span></span><br><span class="line"><span class="keyword">var</span> range=textbox.createTextRange();</span><br><span class="line">range.collapse(<span class="literal">true</span>);</span><br><span class="line">range.moveStart(<span class="string">"character"</span>,<span class="number">0</span>);</span><br><span class="line">range.moveEnd(<span class="string">"character"</span>,stopIndex-startIndex);</span><br><span class="line">range.select();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bind方法对老版本的浏览器不起作用"><a href="#bind方法对老版本的浏览器不起作用" class="headerlink" title="bind方法对老版本的浏览器不起作用"></a>bind方法对老版本的浏览器不起作用</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="包装cookie"><a href="#包装cookie" class="headerlink" title="包装cookie"></a>包装cookie</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie</span></span><br><span class="line"><span class="keyword">var</span> cookieUtil=&#123;</span><br><span class="line"><span class="comment">// 创建cookie</span></span><br><span class="line">setcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cookieText += <span class="string">'; expires='</span> + expires.toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        cookieText += <span class="string">'; path='</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">        cookieText += <span class="string">'; domain='</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">        cookieText += <span class="string">'; secure'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 获取cookie</span></span><br><span class="line">    getcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">var</span> cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName);</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</span><br><span class="line">        <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">        &#125;</span><br><span class="line">        cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;,</span><br><span class="line">   <span class="comment">// 删除cookie</span></span><br><span class="line">    unsetcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name,path,domain,secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setcookie(name,<span class="string">""</span>,<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>),path,domain,secure);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装子cookie"><a href="#包装子cookie" class="headerlink" title="包装子cookie"></a>包装子cookie</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子cookie</span></span><br><span class="line"><span class="keyword">var</span> subcookieUtil=&#123;</span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params">name,subname</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subcookie=getAll(name);</span><br><span class="line"><span class="keyword">if</span>(subcookie)&#123;</span><br><span class="line"><span class="keyword">return</span> subcookie[subname];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">getAll:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">        <span class="keyword">var</span> cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName);</span><br><span class="line">        <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> subcookie,result=&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> len,i,parts;</span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">           &#125;</span><br><span class="line">        cookieValue = <span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd);</span><br><span class="line">        <span class="keyword">if</span>(cookieValue.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        subcookie=cookieValue.split(<span class="string">'&amp;'</span>);</span><br><span class="line">        len=subcookie.length;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;llen;i++)&#123;</span><br><span class="line">        parts=subcookie[i].split(<span class="string">'='</span>);</span><br><span class="line">        result[parts[<span class="number">0</span>]]=parts[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">set:<span class="function"><span class="keyword">function</span> (<span class="params">name, subname,value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> subcookies=<span class="keyword">this</span>.getAll(name)||&#123;&#125;;</span><br><span class="line">subcookies[subname]=value;</span><br><span class="line"><span class="keyword">this</span>.setAll(name,subcookies,expires,path,domain,secure);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">setAll:<span class="function"><span class="keyword">function</span>(<span class="params">name,subcookies,expires,path,domain,secure</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">        <span class="keyword">var</span> subcookiesParts=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">var</span> subname;</span><br><span class="line">        <span class="keyword">for</span>(subname <span class="keyword">in</span> subcookies)&#123;</span><br><span class="line">        <span class="keyword">if</span>(subname.length&gt;<span class="number">0</span>&amp;&amp;subcookies.hasOwnProperty(subname))&#123;</span><br><span class="line">        subcookiesParts.push(<span class="built_in">encodeURIComponent</span>(subname)+<span class="string">'='</span>+<span class="built_in">encodeURIComponent</span>(subcookies[subname]));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(subcookiesParts.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        cookieText+=subcookiesParts.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">                cookieText += <span class="string">'; expires='</span> + expires.toGMTString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (path) &#123;</span><br><span class="line">                cookieText += <span class="string">'; expires='</span> + expires;</span><br><span class="line">             &#125;</span><br><span class="line">            <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">                cookieText += <span class="string">'; domain='</span> + domain;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">                cookieText += <span class="string">'; secure'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    unset:<span class="function"><span class="keyword">function</span>(<span class="params">name,subname,path,domain,secure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> subcookies=<span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span>(subcookies)&#123;</span><br><span class="line">      <span class="keyword">delete</span> subcookies[subname];</span><br><span class="line">      <span class="keyword">this</span>.setAll(name,subcookies,<span class="literal">null</span>,path,domain,secure);</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    unsetAll:<span class="function"><span class="keyword">function</span>(<span class="params">name,path,domain,secure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setAll(name,<span class="literal">null</span>,<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>),path,domain,secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexedDB=<span class="built_in">window</span>.indexedDB||<span class="built_in">window</span>.mozIndexedDB||<span class="built_in">window</span>.msIndexedDB||<span class="built_in">window</span>.webkitIndexedDB;</span><br><span class="line"><span class="keyword">var</span> idbRequest=indexedDB.open(<span class="string">'vvv'</span>);</span><br><span class="line">idbRequest.onsuccess=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">database=event.target.result;</span><br><span class="line">&#125;</span><br><span class="line">idbRequest.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">alert(event.target.errorCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写typeof"><a href="#手写typeof" class="headerlink" title="手写typeof"></a>手写typeof</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>  : <span class="string">'boolean'</span>, </span><br><span class="line">    <span class="string">'[object Number]'</span>   : <span class="string">'number'</span>, </span><br><span class="line">    <span class="string">'[object String]'</span>   : <span class="string">'string'</span>, </span><br><span class="line">    <span class="string">'[object Function]'</span> : <span class="string">'function'</span>, </span><br><span class="line">    <span class="string">'[object Array]'</span>    : <span class="string">'array'</span>, </span><br><span class="line">    <span class="string">'[object Date]'</span>     : <span class="string">'date'</span>, </span><br><span class="line">    <span class="string">'[object RegExp]'</span>   : <span class="string">'regExp'</span>, </span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>     : <span class="string">'null'</span>, </span><br><span class="line">    <span class="string">'[object Object]'</span>   : <span class="string">'object'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Element) &#123;<span class="comment">//因为对不同标签，toString会返回对应不同标签的构造函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'element'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度克隆方法一，用的是instanceof</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buf;   </span><br><span class="line">    <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        buf = [];  <span class="comment">// 创建一个空的数组</span></span><br><span class="line">        <span class="keyword">var</span> i = Obj.length;</span><br><span class="line">        <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">            buf[i] = clone(Obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">        buf = &#123;&#125;;  <span class="comment">// 创建一个空对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> Obj) &#123;  <span class="comment">// 为这个对象添加新的属性</span></span><br><span class="line">            buf[k] = clone(Obj[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度拷贝方法二，用的是 toString</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = type(data), o, i, ni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    o = [];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    o = &#123;&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ni = data.length; i &lt; ni; i++) &#123;</span><br><span class="line">        o.push(deepClone(data[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>( i <span class="keyword">in</span> data) &#123;</span><br><span class="line">        o[i] = deepClone(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过JSON.stringify一下，然后再JSON.parse一下，就能实现深拷贝。但是数据类型只支持基本数值类型。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="string">'a'</span>,    </span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj);<span class="comment">// "&#123;"a":"a"&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="组合使用构造函数模式和原型模式创建对象"><a href="#组合使用构造函数模式和原型模式创建对象" class="headerlink" title="组合使用构造函数模式和原型模式创建对象"></a>组合使用构造函数模式和原型模式创建对象</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合使用构造函数模式和原型模式创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">this</span>.friends=[<span class="string">"may"</span>,<span class="string">"john"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line"><span class="keyword">constructor</span>:Person,//字面量形式的原型默认构造函数是object,所以在这里要指定<span class="keyword">constructor</span></span><br><span class="line">sayName=function()&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合继承</span></span><br><span class="line">funcion <span class="keyword">super</span>(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.sayname=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">Super.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super();<span class="comment">//</span></span><br><span class="line">Sub.prototype.constructor=Sub;<span class="comment">//这个很重要！！</span></span><br><span class="line">Sub.prototype.sayage=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">    <span class="keyword">this</span>.handlers = &#123;&#125;; </span><br><span class="line">&#125; </span><br><span class="line">EventTarget.prototype = &#123;     </span><br><span class="line">    <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">    addHandler: function(type, handler)&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>)&#123;</span><br><span class="line">              <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">     &#125;, </span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">//执行</span></span><br><span class="line">         <span class="keyword">if</span> (!event.target)&#123;</span><br><span class="line">             event.target = <span class="keyword">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">             <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=handlers.length; i &lt; len; i++)&#123;</span><br><span class="line">                 handlers[i](event); </span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">type, handler</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123; </span><br><span class="line">            <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type]; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=handlers.length; i &lt; len; i++)&#123; </span><br><span class="line">                <span class="keyword">if</span> (handlers[i] === handler)&#123; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             handlers.splice(i, <span class="number">1</span>); </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分享一个题目"><a href="#分享一个题目" class="headerlink" title="分享一个题目"></a>分享一个题目</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//[附加题] 请实现下面的自定义事件 Event 对象的接口，功能见注释(测试1)</span></span><br><span class="line"><span class="comment">//该 Event 对象的接口需要能被其他对象拓展复用(测试2)</span></span><br><span class="line"><span class="comment">//测试1</span></span><br><span class="line">Event.on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line">Event.on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">Event.emit(<span class="string">'test'</span>, <span class="string">'hello world'</span>); <span class="comment">// 输出 'hello world' 和 'test'</span></span><br><span class="line"><span class="comment">// 测试2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(person1, Event);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, Event);</span><br><span class="line">person1.on(<span class="string">'call1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">'call2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person1.emit(<span class="string">'call1'</span>); <span class="comment">//输出 'person1'</span></span><br><span class="line">person1.emit(<span class="string">'call2'</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">'call1'</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">'call2'</span>); <span class="comment">// 输出 'person2'</span></span><br><span class="line"><span class="keyword">var</span> Event = &#123;</span><br><span class="line">    <span class="comment">// 通过on接口监听事件eventName</span></span><br><span class="line">    <span class="comment">// 如果事件eventName被触发，则执行callback回调函数</span></span><br><span class="line">    on: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.handles)&#123;</span><br><span class="line">        <span class="comment">//Object.assign(target, source);</span></span><br><span class="line"><span class="comment">//这个是ES6的新对象方法，用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"handles"</span>, &#123;</span><br><span class="line">                value: &#123;&#125;,</span><br><span class="line">                enumerable: <span class="literal">false</span>,<span class="comment">//关键！</span></span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                writable: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">this</span>.handles[eventName])&#123;</span><br><span class="line">            <span class="keyword">this</span>.handles[eventName]=[];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">this</span>.handles[eventName].push(callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 触发事件 eventName</span></span><br><span class="line">    emit: <span class="function"><span class="keyword">function</span> (<span class="params">eventName</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]])&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]].length;i++)&#123;</span><br><span class="line">               <span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]][i](<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出所有页面宽度和高度大于50像素的节点。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">oNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aResult = [];</span><br><span class="line">    oNode = oNode || <span class="built_in">document</span>.body;</span><br><span class="line">    <span class="keyword">if</span> (oNode.style) &#123;</span><br><span class="line">        <span class="keyword">var</span> nWidth = <span class="built_in">window</span>.parseInt(oNode.style.width, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> nHeight = <span class="built_in">window</span>.parseInt(oNode.style.height, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nWidth &gt; <span class="number">50</span> &amp;&amp; nHeight &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            aResult.push(oNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aChildNodes = oNode.childNodes;</span><br><span class="line">    <span class="keyword">if</span> (aChildNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = aChildNodes.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> oTmp = aChildNodes[i];</span><br><span class="line">            aResult = aResult.concat(traverse(oTmp));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器主要也就是IE有点独特，所以把IE重点区分开&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;主流&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;IE&lt;/th&gt;
&lt;/
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DOM" scheme="http://lry1994.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>2018-2随笔笔记</title>
    <link href="http://lry1994.github.io/2018/2018-2-suibi.html"/>
    <id>http://lry1994.github.io/2018/2018-2-suibi.html</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2018-03-02T02:47:04.988Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Cache-Control<br>  no-cache: 告诉浏览器、缓存服务器，不管本地副本是否过期，使用资源副本前，一定要到源服务器进行副本有效性校验。<br>  must-revalidate：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本；本地副本一旦过期，必须去源服务器进行有效性校验。<br>  max-age： 指缓存资源的缓存时间比指定的值小，那么客户端就接受缓存资源，且缓存服务器不对资源有效性进行再次确认</p></li><li><p>CSS像素是web编程的概念,是相对的而不是绝对的单位. 用户的缩放比会影响单位CSS像素点对应的实际物理像素的多少</p></li><li><p>使用Flexible实现手淘H5页面的终端适配<br> <a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">https://github.com/amfe/article/issues/17</a></p></li></ul><ul><li><p>异步脚本禁止使用document.write()<br>延迟脚本禁止使用document.write()</p></li><li><p>火狐和IE下href=”javascript:void(0) 会弹出空白页</p><p>  本来javascript:void(0);的用处是不用整体刷新网页且返回一个空值，但这儿由于DOM本身的冒泡事件所以会最后执行HREF属性内的javascript:void(0);导致执行函数返回了一个空值，所以覆盖掉了前面正常执行函数所返回的值引起的错误。</p><p>  一般情况下，IE会先运行DOM本身绑定的事件，如ONCLICK;如果没有阻止冒泡，则会顺序执行HREF属性。如果想正确运行，可以在前面用RETURN FALSE终止冒泡，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target=&quot;_blank&quot; class=&quot;prev&quot; onclick=&quot;return false;&quot;   href=&quot;javascript:void(0);&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  或者直接删去也行，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a target=&quot;_blank&quot;  class=&quot;prev&quot; &gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  但是后者hover的时候没有手势的pointer</p></li><li><p>vue2父组件传递props异步数据到子组件，获取到的是undefined.</p><p>  解决方法<a href="http://www.jb51.net/article/117447.htm" target="_blank" rel="noopener">参考链接</a></p><ol><li>最简单的解决方法：使用v-if</li><li>子组件使用watch来监听父组件改变的prop，使用methods来代替created</li><li>子组件watch computed data 相结合，有点麻烦</li><li>使用emit，on，bus相结合（使用了bus库）</li><li>vuex结合computed、mapState或者合computed、mapGetters</li></ol></li><li><p>对象的属性名称可以是变量吗？</p><p>  可以，运用方括号法设置就是。如</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;name&quot;;</span><br><span class="line">var b = 10;</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj[a] = b;</span><br></pre></td></tr></table></figure></li><li><p>后台给的服务链接直接插入html中img的src里，修改图片之后，因为src的内容一直都是后台服务链接，是个不变的值，所以不会重新去请求，图    片会一直不变。如果刷新页面这个链接返回的图片会改变，为了做到点击图片只重载这个src而整个页面不刷新，采用的方法是在后面加上          Math.random()，例如 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`http:$&#123;this.baseURL&#125;gw/app.get.logo?tenantId=$&#123;this.tenantId&#125;&amp;appId=$&#123;this.appId&#125;?`+Math.random();</span><br></pre></td></tr></table></figure></li><li><p>扩展运算符可以用于数组深拷贝</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr2 = arr;</span><br><span class="line">var arr3 = [...arr];</span><br><span class="line">console.log(arr===arr2); //true, 说明arr和arr2指向同一个数组</span><br><span class="line">console.log(arr===arr3); //false, 说明arr3和arr指向不同数组</span><br></pre></td></tr></table></figure></li><li><p>数字类型的验证需要在 v-model 处加上 .number 的修饰符，这是 Vue 自身提供的用于将绑定值转化为 number 类型的修饰符。              v-model.number只会截取数字部分，比如100ttt只会取前面的100。做修改操作的时候这种情况用自定义validator解决</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cache-Control&lt;br&gt;  no-cache: 告诉浏览器、缓存服务器，不管本地副本是否过期，使用资源副本前，一定要到源服务器进行副本有效性校验。&lt;br&gt;  must-revalidate：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随笔笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%9A%8F%E7%AC%94%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>《Web 全栈工程师的自我修养》读书笔记</title>
    <link href="http://lry1994.github.io/2018/2018-1-30-web-full-stack-study.html"/>
    <id>http://lry1994.github.io/2018/2018-1-30-web-full-stack-study.html</id>
    <published>2018-01-29T16:00:00.000Z</published>
    <updated>2018-03-02T06:56:46.909Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/book/web-full-stack-self-cultivation.jpg" alt="cover"></p><h2 id="减少同一域名下的HTTP请求数"><a href="#减少同一域名下的HTTP请求数" class="headerlink" title="减少同一域名下的HTTP请求数"></a>减少同一域名下的HTTP请求数</h2><p>1、把静态资源放在单独的非主域名。这样可以增加浏览器并发连接数，而且减少HTTP请求中携带的不必要的cookie数据（cookie的作用域是整个域名）</p><p>2、合并同一域名下的资源。比如，合并CSS文件，将图片组合为CSS贴图（sprite）</p><p>3、省掉不必要的HTTP请求，可以 内嵌小型css/js,设置缓存，减少重定向等</p><h2 id="减少每一个资源的体积"><a href="#减少每一个资源的体积" class="headerlink" title="减少每一个资源的体积"></a>减少每一个资源的体积</h2><p>1、    选择合适的图片格式，就能用更小的体积，达到更好的显示效果。如果图片颜色数较多就使用JPG格式，较少就使用PNG格式。如果能够通过服务器端判断浏览器支持WebP,那么久使用WebP格式和SVG格式</p><p>2、    对于比较大的文本资源，必须开启服务器端的gzip压缩。因为gzip对于含有重复“单词”的文本文件，压缩率比较高，能够有效提高传输过程。Gzip对文本资源非常有效，对图片资源则没那么大的压缩率</p><p>3、    压缩源码和图片</p><p>Js文件源代码可以采用混淆压缩 的方式</p><p>Css文件源代码进行普通压缩</p><p>JPG图片可以根据具体质量压缩为50%到70%</p><p>PNG可以使用一些开源压缩软件来压缩，比图24色变为8色、去掉一些PNG格式信息</p><h2 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h2><p>可以增加并发下载量，还能与其他网站共享缓存</p><h2 id="推荐的浏览器缓存设置的最佳实践"><a href="#推荐的浏览器缓存设置的最佳实践" class="headerlink" title="推荐的浏览器缓存设置的最佳实践"></a>推荐的浏览器缓存设置的最佳实践</h2><p>1、    对于动态生成的HTML页面使用HTTPS头：Cache-Control：no-cache</p><p>2、    对于静态HTML页面使用HTTPS头：Last-Modified</p><p>3、    其他所有的文件类型都设置Expires头，并且在文件内容有所修改的时候修改query string。</p><p>为了避免出现运营商劫持文件的情况，使用更加强硬的方法：修改文件名，而不是修改query string。用户的宽带运营商为了提高速度，可能会在自己的某个节点服务器上缓存你的文件，但是如果query string更新了，运营商仍然可能那自己节点的缓存发给你。（根据HTTP规范，如果修改了请求资源的Query string,就应该被视为一个新的文件）<br>这些都是服务器对每个资源的响应头里设置的</p><h2 id="版本控制最佳实践"><a href="#版本控制最佳实践" class="headerlink" title="版本控制最佳实践"></a>版本控制最佳实践</h2><p>1、    鼓励频繁提交，不要等到代码没问题了再提交</p><p>2、    确定分支流程。基本上所有的特性和较大的bug都应该使用分支来修改</p><p>3、    定义主干原则，并且坚守它。我们的团队的主干原则是“主干对应的代码必须是可以发布并且不会产生bug的”</p><p>4、    不要把逻辑的修改和代码格式化操作混在一起提交</p><p>5、    不相干的代码分开提交，也就是说不要在一次提交里面修复两个bug</p><p>6、    保持代码库的“干净”</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>1、三次法则（rule of three）允许按需直接赋值粘贴代码一次，如果相同的代码重复出现三次及三次以上，将其提取处理做成一个子程序</p><p>2、WET（wwrite everything twice）</p><p>3、DRY（don’t repeat youselft）</p><p>4、惯例优先于设置</p><p>5、KISS原则，keep it simple,stupid</p><p>6、最少知道原则</p><h2 id="在别的地方看到的图"><a href="#在别的地方看到的图" class="headerlink" title="在别的地方看到的图"></a>在别的地方看到的图</h2><p>性能优化</p><img src="/2018/2018-1-30-web-full-stack-study/performance-optimize.png" title="性能优化"><p>图片适配</p><img src="/2018/2018-1-30-web-full-stack-study/pic-adapt.jpg" title="图片适配"><p>aria无障碍文本<br><img src="/2018/2018-1-30-web-full-stack-study/aria.png" title="aria"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/book/web-full-stack-self-cultivation.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;减少同一域名下的HTTP请求数&quot;&gt;&lt;a href=&quot;#减少同一域名下的HTTP请求数&quot; class=&quot;h
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端优化" scheme="http://lry1994.github.io/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端库收集</title>
    <link href="http://lry1994.github.io/popular-resource.html"/>
    <id>http://lry1994.github.io/popular-resource.html</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-03-08T02:11:06.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="GreenSock"><a href="#GreenSock" class="headerlink" title="GreenSock"></a>GreenSock</h3><pre><code>了解资料[greensock get-started-js](https://greensock.com/get-started-js#intro)[3D Transforms &amp; More CSS3 Goodies Arrive in GSAP JS](https://greensock.com/css3)基础实例[Jump Start: GSAP JS](https://greensock.com/jump-start-js#welcome)[Timeline Tip: Understanding the Position Parameter](https://greensock.com/position-parameter)[Basic play / pause toggle button](https://codepen.io/GreenSock/pen/qeHac)[create a playful Jump Loader animation](https://tympanus.net/codrops/2015/03/25/jump-loader-animation-svg-gsap/)进阶[Writing Smarter Animation Code](https://css-tricks.com/writing-smarter-animation-code/)[https://greensock.com/examples-showcases](https://greensock.com/examples-showcases)[https://tympanus.net/codrops/](https://tympanus.net/codrops/)隆重介绍这个网站，上面有好多好多好看的动画</code></pre><h3 id="Draggable"><a href="#Draggable" class="headerlink" title="Draggable"></a>Draggable</h3><pre><code>Draggable是一个简单易用的模块化拖放库。它通过快速DOM重新排序，干净的API和可访问的标记提供了出色的拖放功能。Draggable附带额外的模块，可以添加更多的功能，如排序，交换和其他实用程序。</code></pre><h3 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h3><pre><code>Animate.css是一个跨浏览器的CSS动画库。它非常易于使用，并提供大量不同的动画效果，如反弹，脉冲，摆动，淡入淡出，翻转等等。它可以用于在任何你喜欢的地方添加一些很酷和有趣的动画效果。</code></pre><h3 id="Micron"><a href="#Micron" class="headerlink" title="Micron"></a>Micron</h3><pre><code>是一个允许你为DOM元素添加不同的CSS增强动画的库。其中交互可以通过HTML数据属性或通过链接JavaScript方法来设置速度、消除和其他选项来控制。它支持不同的交互，如摇晃、褪色、反弹、摇摆（shake, fade, bounce, swing）等等。</code></pre><h2 id="animate-elements-on-scroll"><a href="#animate-elements-on-scroll" class="headerlink" title="animate elements on scroll"></a>animate elements on scroll</h2><h3 id="WOW"><a href="#WOW" class="headerlink" title="WOW"></a>WOW</h3><pre><code>http://mynameismatthieu.com/WOW/docs.html </code></pre><h3 id="AOS"><a href="#AOS" class="headerlink" title="AOS"></a>AOS</h3><pre><code>http://michalsnik.github.io/aos/AOS 是一个用于在页面滚动的时候呈现元素动画的工具库，和 WOWJS 类似。但是AOS是 CSS3 动画驱动的库，该库是高度可定制的，非常小，易于使用（通过CDN安装）。在页面往回滚动时，元素会恢复到原来的状态，如此达到循环动画的效果。</code></pre><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="localForage"><a href="#localForage" class="headerlink" title="localForage"></a>localForage</h3><pre><code>用于indexedDB和WebSQL的封装程序，能够让你的Web应用程序存储更多数据，并提升应用程序的离线体验。写入和读取操作与                localStorage类似，支持 BLOB 和任意类型的数据，可以存储图片，文件等等，而不仅仅是字符串。它还提供多种API，使开发               人员可以选择回调的异步API。</code></pre><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><h3 id="MJML"><a href="#MJML" class="headerlink" title="MJML"></a>MJML</h3><pre><code>The only framwork that makes responsive email easy</code></pre><h2 id="VR"><a href="#VR" class="headerlink" title="VR"></a>VR</h2><h3 id="A-Frame"><a href="#A-Frame" class="headerlink" title="A-Frame"></a>A-Frame</h3><pre><code>是 Mozilla 开源的网页虚拟现实体验（ WebVR ）框架。能够在HTML中创建3D场景的框架，使用Three.js和WebGL来创建VR场景。可用于桌面、iPhone（即将支持安卓）以及 Oculus Rift。</code></pre><h3 id="GPU-js"><a href="#GPU-js" class="headerlink" title="GPU.js"></a>GPU.js</h3><pre><code>用于在GPU中运行浏览器JavaScript代码的库。使用GPU.js，您可以通过将专门编写的JS编译成可通过WebGL在GPU上运行的着色器语言来更快速地执行复杂的计算。如果WebGL不可用，则函数将回退到常规JavaScript。</code></pre><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="R2"><a href="#R2" class="headerlink" title="R2"></a>R2</h3><pre><code>这是一个更轻量级的 HTTP 客户端解决方案，它建立在浏览器原生的 Fetch API 的基础之上，并为 Node.js 提供优化。压缩后的R2大小只有16K。</code></pre><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><pre><code>为处理HTTP请求提供了一个现代化的JavaScript解决方案。它有一个基于Promise的API，在处理async调用时使你的代码更加结构化。该库可以在浏览器中工作，也可以在node.js环境中工作。</code></pre><h2 id="桌面通知"><a href="#桌面通知" class="headerlink" title="桌面通知"></a>桌面通知</h2><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><pre><code>Push是一款可靠的跨浏览器的JavaScript桌面通知库。它基于强大的Notification API，如果用户的浏览器不支持新API，则会回退到较早的实现。</code></pre><h2 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h2><h3 id="Devices-css"><a href="#Devices-css" class="headerlink" title="Devices.css"></a>Devices.css</h3><pre><code>Devices.css 是一个使用纯 CSS 实现移动设备的库。它包含了一些目前主流的移动设备，如 iPhone X，Google Pixel 2 XL 和三星Galaxy S8。由于其高品质的设计，可用于着陆页面或者网页快照。</code></pre><h3 id="Lit"><a href="#Lit" class="headerlink" title="Lit"></a>Lit</h3><pre><code>是一个非常小和响应式CSS框架。它包含12列响应式网格、不同的排印风格、自定义输入、三种按钮类型以及CSS框架应该提供的所有功能。Lit适用于所有现代浏览器，以及IE11等一些较旧的浏览器</code></pre><h3 id="Tachyons"><a href="#Tachyons" class="headerlink" title="Tachyons"></a>Tachyons</h3><pre><code>你可以制作漂亮且响应速度快的界面，并且几乎不需要CSS。它很容易使用和定制，移动优先，并能很好地与React、Ember、Angular和其他框架配合使用。更重要的是，它非常轻量级，并且具有非常详细的文档，你可以在其中找到所需的一切。</code></pre><h3 id="Rekit"><a href="#Rekit" class="headerlink" title="Rekit"></a>Rekit</h3><pre><code>是一款可帮助你使用React、Redux和React-router创建出色的响应式Web应用程序的工具包。该框架提供了两个用于处理框架的强大工具 — 一个名为Rekit Studio的全功能IDE，以及一个用于在终端上工作的扩展命令行界面。</code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="Nerd-Font"><a href="#Nerd-Font" class="headerlink" title="Nerd Font"></a>Nerd Font</h3><pre><code>这是一个流行字体和图标的集合。它包含39个补充字体系列，以及来自诸如Font Awesome、Devicons、Octicons等流行图标集的1300多个图形和图标。所有字体在Linux、macOS和Windows上兼容。</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="Kutt"><a href="#Kutt" class="headerlink" title="Kutt"></a>Kutt</h3><pre><code>是一个免费的可以用来缩短你的URL、管理链接和设置自定义域的开源库。它有一个易于使用的API，并允许你创建和删除URL，以及使用详细统计信息跟踪它们。</code></pre><h2 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h2><h3 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h3><pre><code>Card是一个小巧的vanilla JS项目（带有jQuery版本），可以让你的信用卡表格变得更加有趣生动。快速安装后，将采取您的表格，并将其转换为一张动画的信用卡。</code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="Direction-Reveal"><a href="#Direction-Reveal" class="headerlink" title="Direction Reveal"></a>Direction Reveal</h3><pre><code>该插件检测光标进入或离开块时的方向，允许你使用各种酷炫特效和过渡。它提供了一些开箱即用的CSS动画，让你可以轻松创建自己的CSS动画。</code></pre><h3 id="Carbon"><a href="#Carbon" class="headerlink" title="Carbon"></a>Carbon</h3><pre><code>允许你创建并分享代码组成的美丽图像。你所需要做的就是将你的代码粘贴到编辑器中，或直接自己编写代码。你可以通过更改字体样式、编辑器主题、语法高亮和甚至窗口按钮来自定义图像的外观。</code></pre><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><h3 id="SweetAlert2"><a href="#SweetAlert2" class="headerlink" title="SweetAlert2"></a>SweetAlert2</h3><pre><code>是一个可以创建漂亮和可响应弹出框的库。SweetAlert2是高度可定制的，100%响应式并且在所有屏幕尺寸上都能有很好的显示效果。使用SweetAlert2 你可以创建各种不同的拥有惊艳的风格、显示效果和动画的弹出框。</code></pre><h2 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h2><h3 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h3><pre><code>是一个快速的开源框架，可以开发为运行在桌面浏览器或手机浏览器的HTML5游戏。你也可以为iOS、Android和其他不同的本地应用程序创建游戏。Phaser有对开发人员非常友好的API，并且Phaser的团队也积极开发和维护。最近，在Phaser 3.0版本中发布了很多新的特性和功能。</code></pre><h2 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h2><h3 id="KeystoneJS"><a href="#KeystoneJS" class="headerlink" title="KeystoneJS"></a>KeystoneJS</h3><pre><code>KeystoneJS是一个功能强大的CMS框架，基于Express和MongoDB构建，它提供了一个漂亮的管理用户界面，实用的API应用程序，会话管理，电子邮件发送，扩展等等。</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h3><pre><code>Puppeteer是一个Node.js API，用于控制 headless Chrome。由 Google官方的 Chrome DevTools 团队维护。在headless环境中，开发者可以生成网页截图或者 PDF ，通过Puppeteer的提供的api直接控制Chrome模拟大部分用户操作来进行UI Test或者作为爬虫访问页面来收集数据。</code></pre><h3 id="Deeplearn-js"><a href="#Deeplearn-js" class="headerlink" title="Deeplearn.js"></a>Deeplearn.js</h3><pre><code>Deeplearn.js是一个开放源代码库，可将高性能机器学习构建模块带入网络。它提供了两个API，即时执行模型和延期执行模型。它可以完全在浏览器中运行，不需要安装，不需要后端处理。</code></pre><h3 id="Popper-js"><a href="#Popper-js" class="headerlink" title="Popper.js"></a>Popper.js</h3><pre><code>Popper是一个JavaScript库，它提供了大量的定制选项，并且完全模块化，每个功能都有独立的插件。不需要依赖 jQuery 库，大小仅为 3.5KB 左右，使用与配置相当简单，Twitter，WebClipper中的Microsoft以及AtlasKit等大企业都在使用</code></pre><h3 id="Apollo-Client"><a href="#Apollo-Client" class="headerlink" title="Apollo Client"></a>Apollo Client</h3><pre><code>是一款全功能的GraphQL客户端，用于 React 、Angular 的交互。压缩的大小还不到25K。</code></pre><h3 id="Jarvis"><a href="#Jarvis" class="headerlink" title="Jarvis"></a>Jarvis</h3><pre><code>一款基于Webpack仪表板的智能浏览器，它可以给你显示你在webpack构建所需的所有重要信息。它向你展示了你的资源在12种不同的连接类型中的表现如何，你项目中所有包的大小，并拥有一个漂亮的错误输出。它仍处于beta版本，预计会增加许多新功能。</code></pre><h3 id="Wiki-js"><a href="#Wiki-js" class="headerlink" title="Wiki.js"></a>Wiki.js</h3><pre><code>是一个强大的Wiki App，基于Node.js、Git和Markdown开发。你可以使用内置编辑器用Markdown格式来写作，并且可以自动同步到你的Git仓库。Wiki.js 有完整的访问控制和配置管理，但只占用很少的CPU资源。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;h3 id=&quot;GreenSock&quot;&gt;&lt;a href=&quot;#GreenSock&quot; class=&quot;headerlink&quot; title=&quot;GreenSo
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="资料收集" scheme="http://lry1994.github.io/tags/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>vue vs react vs angular1</title>
    <link href="http://lry1994.github.io/2017/2017-12-28-vue-comparison.html"/>
    <id>http://lry1994.github.io/2017/2017-12-28-vue-comparison.html</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2018-03-02T06:55:08.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-与angualr1-react-不同体验整理"><a href="#vue-与angualr1-react-不同体验整理" class="headerlink" title="vue 与angualr1 ,react 不同体验整理"></a>vue 与angualr1 ,react 不同体验整理</h1><p>之前项目组的前端用的是angualr1.x版本，给我的感觉就是angular啥都有，只要注入依赖就可以用。</p><p>工作闲暇之余会自己学习新知识，react很火，但是公司没有react的项目实操，所以自己找了网上一个比较适合入门的项目来练手，下面是我在边敲边学的过程中体验到的不同点。</p><p>而react和vue就是轻量级的，要什么就去找，找来再用。</p><ul><li><a href="#React与vue比较">React与vue比较</a><ul><li><a href="#生命周期">生命周期</a></li><li><a href="#总结">总结</a></li></ul></li><li><a href="#React-redux与vuex比较">React-redux与vuex比较</a><ul><li><a href="#1-使用流程">1-使用流程</a></li><li><a href="#2-共享数据store">2-共享数据store</a></li><li><a href="#3-模块">3-模块</a></li><li><a href="#4-唯一可以改变state的方式">4-唯一可以改变state的方式</a></li><li><a href="#5-组件连接姿势">5-组件连接姿势</a></li><li><a href="#6-调用链">6-调用链</a></li><li><a href="#7-总结">7-总结</a></li></ul></li></ul><h1 id="React与vue比较"><a href="#React与vue比较" class="headerlink" title="React与vue比较"></a>React与vue比较</h1><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h4><img src="/2017/2017-12-28-vue-comparison/react-life.png" title="react生命周期"><h4 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h4><img src="/2017/2017-12-28-vue-comparison/vue-life.png" title="vue生命周期"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ol><li>子组件直接import后使用</li><li>在render()的return里面进行模板渲染</li><li>实例的方法在constructor里面定义</li><li>实例的数据在constructor里面定义</li><li>contextTypes验证数据类型</li><li>defaultProps设置默认值</li><li>父组件传给子组件的数据，在子组件内用this.props.xxx获取</li></ol><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ol><li>子组件import后，还需在实例里面的components注册</li><li>直接在实例的template属性或标签渲染模板</li><li>实例的方法写在method里面</li><li>实例的数据写在data,computed里面</li><li>props验证数据类型</li><li>props里面的default设置默认值</li><li>父组件传给子组件的数据在props里面注册，在子组件内用this.xxx获取。这一点有点像angular的隔离scope<br>(react没有的)</li><li>computed可以依赖于data更新而更新</li><li>有watch监听函数</li></ol><h4 id="觉得与angular类似地方"><a href="#觉得与angular类似地方" class="headerlink" title="觉得与angular类似地方"></a>觉得与angular类似地方</h4><ol><li>双向绑定，v-指令和angular的ng-指令类似</li><li>同样有watch监听函数</li><li>vue父组件传给子组件的数据要在props里面注册，在子组件内用this.xxx获取。这一点有点像angular的隔离scope</li></ol><p>觉得vue比起angular更像react。vue和react很像，但是比react细腻。</p><h1 id="React-redux与vuex比较"><a href="#React-redux与vuex比较" class="headerlink" title="React-redux与vuex比较"></a>React-redux与vuex比较</h1><h3 id="1-使用流程"><a href="#1-使用流程" class="headerlink" title="1-使用流程"></a>1-使用流程</h3><h4 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h4><ol><li>写reducer（previousState,action）函数 return 更新后的所需要的数据</li><li>Store=createStore(reducer)</li><li><provider store="{store}">{router}&lt; Provider/&gt;</provider></li><li>定义action对象，{事件类型type,事件参数data}</li><li>connect(mapStateToProps, mapDispatchToProps)（组件）</li><li>组件里面使用this.props.（action.type）(action.data)</li></ol><img src="/2017/2017-12-28-vue-comparison/react-redux-process.png" title="react-redux使用流程"><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><ol><li>写好store和不同模块的state,mutations,getters,actions </li><li>store = new Vuex.Store( )</li><li>new Vue({<br>el: ‘#app’,<br>store,<br>render: h =&gt; h(App)<br>})</li><li>组件使用</li></ol><p>mapState</p><p>mapMutations</p><p>mapGetters</p><p>mapActions</p><p>连接</p><h3 id="2-共享数据store"><a href="#2-共享数据store" class="headerlink" title="2-共享数据store"></a>2-共享数据store</h3><h4 id="React-redux的store"><a href="#React-redux的store" class="headerlink" title="React-redux的store"></a>React-redux的store</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">    combineReducers(reducer),</span><br><span class="line">       </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">  &#123;router&#125;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h4 id="Vuex的store"><a href="#Vuex的store" class="headerlink" title="Vuex的store"></a>Vuex的store</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:</span><br><span class="line">mutations</span><br><span class="line">actions</span><br><span class="line">getters</span><br><span class="line">  modules:&#125;）</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-模块"><a href="#3-模块" class="headerlink" title="3-模块"></a>3-模块</h3><h4 id="React-redux的reducer"><a href="#React-redux的reducer" class="headerlink" title="React-redux的reducer"></a>React-redux的reducer</h4><p>reducer和vuex的modules类似，可以用来划分不同模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">state = JSON.parse(Tool.localItem(<span class="string">'User'</span></span>)), <span class="title">action</span>) </span>&#123;     </span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> SIGNIN_SUCCESS: <span class="comment">//登录成功                               </span></span><br><span class="line">                Tool.localItem(<span class="string">'User'</span>, <span class="built_in">JSON</span>.stringify(action.target));               </span><br><span class="line">                <span class="keyword">return</span> action.target;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">case</span> SIGNIN: <span class="comment">//退出</span></span><br><span class="line">                Tool.removeLocalItem(<span class="string">'User'</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:            </span><br><span class="line">               <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**省略。。。。。。*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; IndexList, Topic, MyMessages, UserView, User &#125;</span><br></pre></td></tr></table></figure><h4 id="vuex的modules"><a href="#vuex的modules" class="headerlink" title="vuex的modules"></a>vuex的modules</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    user: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setUser (state, payload) &#123;</span><br><span class="line">      state.user = payload     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    cart,</span><br><span class="line">    products,</span><br><span class="line">    login&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-唯一可以改变state的方式"><a href="#4-唯一可以改变state的方式" class="headerlink" title="4-唯一可以改变state的方式"></a>4-唯一可以改变state的方式</h3><h4 id="React-redux的action"><a href="#React-redux的action" class="headerlink" title="React-redux的action"></a>React-redux的action</h4><p>action就是一个对象,具体处理方法在reducer里面实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">signinSuccess</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">type:<span class="string">'signinSuccess'</span>,</span><br><span class="line">target</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="Vuex的mutation"><a href="#Vuex的mutation" class="headerlink" title="Vuex的mutation"></a>Vuex的mutation</h4><p>mutation是方法，由action调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [types.RECEIVE_PRODUCTS] (state, &#123; products &#125;) &#123;</span><br><span class="line">    state.all = products</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  [types.ADD_TO_CART] (state, &#123; id &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'form product'</span>)</span><br><span class="line">    state.all.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === id).inventory--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-组件连接姿势"><a href="#5-组件连接姿势" class="headerlink" title="5-组件连接姿势"></a>5-组件连接姿势</h3><h4 id="React-redux连接"><a href="#React-redux连接" class="headerlink" title="React-redux连接"></a>React-redux连接</h4><p>用connect方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      User: state.User</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        signinSuccess: <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">            dispatch(signinSuccess(user))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(SignIn);</span><br></pre></td></tr></table></figure></p><h4 id="Vuex连接"><a href="#Vuex连接" class="headerlink" title="Vuex连接"></a>Vuex连接</h4><p>只需要在组件里面映射<br>mapState\<br>mapMutations\<br>mapGetters\<br>mapActions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: mapGetters(&#123;</span><br><span class="line">    products: <span class="string">'allProducts'</span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: mapActions([</span><br><span class="line">    <span class="string">'addToCart'</span></span><br><span class="line">  ]),</span><br></pre></td></tr></table></figure><h3 id="6-调用链"><a href="#6-调用链" class="headerlink" title="6-调用链"></a>6-调用链</h3><h4 id="React-redux调用链"><a href="#React-redux调用链" class="headerlink" title="React-redux调用链"></a>React-redux调用链</h4><img src="/2017/2017-12-28-vue-comparison/react-redux-lian.png" title="React-redux调用链"><h4 id="Vuex调用链"><a href="#Vuex调用链" class="headerlink" title="Vuex调用链"></a>Vuex调用链</h4><img src="/2017/2017-12-28-vue-comparison/vuex-lian.png" title="vuex调用链"><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7-总结"></a>7-总结</h3><h4 id="React-redux-1"><a href="#React-redux-1" class="headerlink" title="React-redux"></a>React-redux</h4><p>action是唯一修改state的方法</p><p>Action用dispatch调用</p><p>reducer， 和vuex的modules相似</p><p>组件调用都是dispatch action</p><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><p>mutation是唯一修改state的方法，类似React-redux的action</p><p>除了mutation还有action,</p><p>mutation用于同步操作，用commit调用</p><p>action用于异步操作,用dispatch调用</p><p>Modules，和redux的reducer相似</p><p>有getters</p><p>有namespaced</p><p>组件调用都是dispatch action</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-与angualr1-react-不同体验整理&quot;&gt;&lt;a href=&quot;#vue-与angualr1-react-不同体验整理&quot; class=&quot;headerlink&quot; title=&quot;vue 与angualr1 ,react 不同体验整理&quot;&gt;&lt;/a&gt;vue 与an
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="http://lry1994.github.io/tags/vue/"/>
    
      <category term="react" scheme="http://lry1994.github.io/tags/react/"/>
    
      <category term="angular" scheme="http://lry1994.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>vue 一些需要注意的点</title>
    <link href="http://lry1994.github.io/2017/2017-12-6-vue-attention.html"/>
    <id>http://lry1994.github.io/2017/2017-12-6-vue-attention.html</id>
    <published>2017-12-05T16:00:00.000Z</published>
    <updated>2018-03-30T05:33:08.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><a href="http://www.2ality.com/2015/08/getting-started-es6.html" target="_blank" rel="noopener">ES6 Javascript</a></li><li><a href="http://vuejs.org" target="_blank" rel="noopener">Vue JS</a> 框架和 <a href="http://npmjs.org" target="_blank" rel="noopener">NPM</a> 生态</li><li><a href="http://router.vuejs.org/" target="_blank" rel="noopener">Vue Router</a></li><li><a href="https://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">Vuex</a></li><li><a href="https://vue-loader.vuejs.org/zh-cn/" target="_blank" rel="noopener">.vue files</a></li><li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a></li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a></li><li><a href="http://element.eleme.io/#/zh-CN/component" target="_blank" rel="noopener">Element-ui</a></li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a></li><li><a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a></li></ul><h2 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h2><p>不要为了编辑内容而打开另一个页面，应该直接在上下文中实现编辑。<br>能在这个页面解决的问题，就不要去其它页面解决，因为任何页面刷新和跳转都会引起变化盲视（Change Blindness），导致用户心流（Flow）被打断</p><p>『格式塔学派』中的连续律（Law of Continuity）所描述的，在知觉过程中人们往往倾向于使知觉对象的直线继续成为直线，使曲线继续成为曲线。在界面设计中，将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用户更流畅地接收信息。</p><p>冒号对齐（右对齐）能让内容锁定在一定范围内，让用户眼球顺着冒号的视觉流，就能找到所有填写项，从而提高填写效率。为了快速对比数值大小，建议所有数值取相同有效位数，并且右对齐。</p><p>在一些需要用户慎重决策的场景中，系统应该保持中立，不能替用户或者诱导用户做出判断。</p><p>单字段行内编辑，当『易读性』远比『易编辑性』重要时，可以使用『单击编辑』。</p><p>当『易读性』为主，同时又要突出操作行的『易编辑性』时，可使用『文字链/图标编辑』。</p><p>当需要增强按钮的响应性时，可以通过增加用户点击热区的范围，而不是增大按钮形状，从而增强响应性，又不缺失美感。</p><p>颜需色遵守 WCAG 2.0 的标准，操作类的色彩搭配都应满足颜色对比值 3:1 的最低标准。文本和背景色之间至少保持最小 4.5:1 的对比度（AA 级），正文内容都保持了 7:1 以上的 AAA 级对比度。</p><p>在操作前引导告知用户操作的目的或重要性，能促进用户更愿意去执行。</p><p>当用户填写的内容出错的时候，你的报错信息应当符合用户的认知，用易于理解的方式表述出来。</p><p>直接使用『你』、『我』来和用户对话，与用户建立亲密感。避免使用『您』，让用户感觉太过疏远。</p><p>不要在同一个句式中混用『你』和『我』，交互中指代混乱会让用户相当纠结。</p><h2 id="vue"><a href="#vue" class="headerlink" title="ｖｕｅ"></a>ｖｕｅ</h2><ul><li>不要在选项属性或回调上使用箭头函数</li><li>计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。</li><li>当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</li><li>表单元素不要复用它们，只需添加一个具有唯一值的 key 属性即可</li><li>v-show 不支持 <code>&lt;template&gt;</code>元素， v-else也不支持</li><li>v-for 具有比 v-if 更高的优先级。<br>它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。</p></li><li><p>vue数组的变异方法，：push()pop()shift()unshift()splice()sort()reverse()<br>  非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice()</p></li><li><p>Vue 不能检测以下变动的数组：</p><ol><li><p>当你利用索引直接设置一个项时，例如：<code>vm.items[indexOfItem] = newValue</code><br>解决方法</p><p><code>javascript// Vue.setVue.set(example1.items, indexOfItem, newValue)或者// Array.prototype.spliceexample1.items.splice(indexOfItem, 1, newValue)</code></p></li><li><p>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code><br>解决方法</p><p><code>example1.items.splice(newLength)</code></p></li></ol><ul><li><p>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用<br><code>Vue.set(object, key, value)</code>方法向嵌套对象添加响应式属性。<br>还可以使用<code>this.$set</code>实例方法，或者</p><p><code>javascriptthis.userProfile = Object.assign({}, this.userProfile, {age: 27,favoriteColor: &#39;Vue Green&#39;})</code></p></li></ul></li><li><p>事件修饰符。</p><p>.stop .prevent. capture .self .once .native</p><p><a href="mailto:``@click.prevent.self" target="_blank" rel="noopener">``@click.prevent.self</a> <code>会阻止所有的点击，而</code>@click.self.prevent<code></code> 只会阻止对元素自身的点击。</p></li></ul><ul><li><p>构造 Vue 实例时传入的各种选项大多数都可以在组件里使用。只有一个例外：data 必须是函数。</p></li><li><p>Vue 实例指的是 new Vue</p><p>组件指的是 Vue.component,或者new Vue里面的component</p></li><li><p>组件实例的作用域是孤立的</p></li><li><p>当使用的不是字符串模板时，camelCase (驼峰式命名) 的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)</p></li><li><p>初学者常犯的一个错误是使用字面量语法传递数值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递了一个字符串 "1" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为它是一个字面量 prop，它的值是字符串 “1” 而不是一个数值。</p><p>如果想传递一个真正的 JavaScript 数值，则需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递真正的数值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。注意在 JavaScript 中对象和数组是    引用类型，指向同一个内存空间，</p><p>  如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。</p></li><li><p>.sync 修饰符对一个 prop 进行“双向绑定”.默认Prop是单向绑定的。</p><p>从 2.3.0 起我们重新引入了 .sync 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。<br>如下代码<br><code>&lt;comp :foo.sync=&quot;bar&quot;&gt;&lt;/comp&gt;</code><br>会被扩展为：<br><code>&lt;comp :foo=&quot;bar&quot; @update:foo=&quot;val =&gt; bar = val&quot;&gt;&lt;/comp&gt;</code><br>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：<br><code>this.$emit(&#39;update:foo&#39;, newValue)</code></p></li></ul><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>  Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><ol><li>最好提前在你的 store 中初始化好所有所需属性。</li><li><p>当需要在对象上添加新属性时，你应该使用</p><p><code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, </p><p>或者以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：</p><p><code>state.obj = { ...state.obj, newProp: 123 }</code></p><p>mutation 必须是同步函数</p><p>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise</p><p>在 Vuex 模块化中，state 是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下。</p><p><code>getter({state,getters,rootState})</code>由于 getters 不区分模块，所以不同模块中的 getters 如果重名，Vuex 会报出<code>&#39;duplicate getter key: [重复的getter名]&#39;</code> 错误。</p><p><code>mutations(state)</code> mutation 的回调函数中只接收唯一的参数——当前模块的 state。mutations 与 getters 类似，不同模块的 mutation 均可以通过 <code>store.commit</code> 直接触发。</p><p><code>action({state,rootState, getters, mutations, actions})</code>与 mutations 类似，不同模块的 actions 均可以通过 <code>store.dispatch</code> 直接触发.</p><p>在 action 中可以通过 context.commit 跨模块调用 mutation，同时一个模块的 action 也可以调用其他模块的 action</p><p>同样的，当不同模块中有同名 action 时，通过 store.dispatch 调用，会依次触发所有同名 actions。</p></li></ol><h2 id="babel"><a href="#babel" class="headerlink" title="ｂａｂｅｌ"></a>ｂａｂｅｌ</h2><p>transform-runtime最大的作用主要有几下几点：</p><ol><li><p>解决编译中产生的重复的工具函数，减小代码体积</p></li><li><p>只支持新的Javascript语法扩展，比如<code>Set</code>，<code>Map</code>…不支持<br> <code>Object.assign，&quot;foobar&quot;.includes(&quot;foo&quot;)</code><br> 这些对于API的扩展，所以需要使用这些新的API功能需要引入<code>babel-polyfill</code></p><p> <code>&quot;presets&quot;: [&quot;env&quot;]</code> 表示<code>babel-preset-env</code></p><p> 每年每个 preset 只编译当年批准的内容。 而 babel-preset-env 相当于 es2015 ，es2016 ，es2017 及最新版本。</p></li></ol><h2 id="vue－loader"><a href="#vue－loader" class="headerlink" title="ｖｕｅ－ｌｏａｄｅｒ"></a>ｖｕｅ－ｌｏａｄｅｒ</h2><p>  使用 scoped 后，父组件的样式将不会渗透到子组件中。</p><p>  通过 v-html 创建的 DOM 内容不受作用域内的样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式</p><p>  <code>sass-resources-loader</code>:在每个组件里加载一个设置文件，而无需每次都将其显式导入 </p><p>  Vue 组件中的所有 JavaScript 默认使用 <code>babel-loader</code>处理</p><p>  <code>file-loader</code> 可以指定要复制和放置资源文件的位置，以及如何使用版本哈希命名以获得更好的缓存此外，这意味着 你可以就近管理图片文件，可以使用相对路径而不用担心布署时URL问题。使用正确的配置，Webpack 将会在打包输出中自动重写文件路径为正确的URL。</p><p>  <code>url-loader</code> 允许你有条件将文件转换为内联的 <code>base-64 URL</code> (当文件小于给定的阈值)，这会减少小文件的 HTTP 请求。如果文件大于该阈值，会自动的交给 file-loader 处理。</p><p>  对于 css, 由<code>vue-style-loader</code> 返回的结果通常不太有用。使用 <code>postcss</code>插件将会是更好的选择。</p><p>  <code>extract-text-webpack-plugin</code>:Extract text from a bundle, or bundles, into a separate file.</p><pre><code>``javascriptloader: &apos;vue-loader&apos;,        options: {          extractCSS: true        }``</code></pre><p><code>HtmlWebpackPlugin</code>： 使得webpack入口点生成的文件都会在生成的HTML文件中的script标签内。<br><code>ExtractTextPlugin</code>提取CSS，然后包含在HTML head中的link标签内。</p><h2 id="完整的导航解析流程-vue-router"><a href="#完整的导航解析流程-vue-router" class="headerlink" title="完整的导航解析流程 vue-router"></a>完整的导航解析流程 vue-router</h2><ol><li>导航被触发。</li><li>在失活的组件里调用beforeRouteLeave 。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2015/08/getting-started-es6.h
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="http://lry1994.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>读《月亮与六便士》</title>
    <link href="http://lry1994.github.io/2017/2017-12-5-moon-and-six-bians.html"/>
    <id>http://lry1994.github.io/2017/2017-12-5-moon-and-six-bians.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2018-03-01T05:35:39.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/book/moon-and-six-bians.jpg" alt="cover"></p><p>我不是一个有看书习惯的人，有一日突然觉得得多看书，充实一下生活。又在中国好声音听到了有人唱《越过山丘》，词写得贼好，作词人高晓松。然后我又去挖掘了一下高晓松的资料，发现他真是一个才子啊！然后想读书又不知道读什么书，看到高晓松推荐过这本，刚好京东读书有优惠，于是乎，买来看了。</p><p>第一次看，这本不是小说题材吧，觉得是一篇作者对斯特里克兰的回忆录。还以为，斯特里克兰是一个真实存在的人，上网查了才知道是虚构的。因为是虚构的，所以才叫做小说吧。</p><p>对于斯特里克兰这个人，我首先是厌恶的，抛弃妻子，即使去追求理想，但是也不能违背道德的底线。再到后来，他无耻地抢了斯特里克夫的妻子布兰奇时候，我对他咬牙切齿。可怜的斯特里克夫好心收留将死的斯特里克兰，却被反将一军。既然需要女人，又为何要抛弃自己的妻子，还美言道自己是去追求理想。</p><p>对于这个妻子布兰奇，真不知她喜欢他什么。后来果不其然，布兰奇被斯特里克兰抛弃了。“布兰奇自杀了！”I was shocked!宁愿自杀也不愿回到斯特里克夫身边。布兰奇有斯特里克夫这个丈夫，我觉得很庆幸，在布兰奇背叛他的时候，自杀的时候，斯特里克夫一直在身边守着，哀求她回到她身边。斯特里克夫是深爱着布兰奇的，但是他好可怜，心地善良却没有得到回报。</p><p>到后来，斯特里克兰去了一座美丽的岛上，和啊塔结了婚，我以为这个啊塔也会和布兰奇、斯特里克兰夫人一样被抛弃，没想到居然没有，还生了两个孩子。“啊塔，她不会打扰我”。我突然有点点理解他为什么离开布兰奇、斯特里克兰夫人。一个人在专心做一件事情的时候，是不希望被打扰的。可能是布兰奇、斯特里克兰夫人会打扰他画画，所以才抛弃她们吧。后来斯特里克兰得了麻风病，阿塔不离不弃。</p><p>斯特里克兰是以高更为原型创作的，与斯特里克兰不同的是，高更并没有断绝和妻儿的联系，看到这一点我就安心了。</p><p>附一下越过山丘的词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">越过山丘，遇见十九岁的我</span><br><span class="line">戴着一双白手套，喝着我的喜酒</span><br><span class="line">他问我幸福与否，是否永别了忧愁</span><br><span class="line">为何婚礼上那么多人，没有一个当年的朋友</span><br><span class="line"></span><br><span class="line">我说我曾经挽留，他们纷纷去人海漂流</span><br><span class="line">那个你深爱的小妞，嫁了隔壁的王某</span><br><span class="line">我问她幸福与否，她哭着点了点头</span><br><span class="line">后来遇见过那么多人，想对你说却张不开口</span><br><span class="line"></span><br><span class="line">就让我随你去，让我随你去，</span><br><span class="line">回到二十岁狂奔的路口，做个形单影只的歌手</span><br><span class="line">就让我随你去，让我随你去，</span><br><span class="line">逆着背影婆娑的人流，向着那座荒芜的山丘，挥挥衣袖。</span><br><span class="line"></span><br><span class="line">越过山丘，遇见六十岁的我 </span><br><span class="line">拄着一根白手杖，在听鸟儿歌唱</span><br><span class="line">我问他幸福与否，他笑着摆了摆手</span><br><span class="line">在他身边围绕着一群，当年流放归来的朋友</span><br><span class="line"></span><br><span class="line">他说你不必挽留，爱是一个人的等候</span><br><span class="line">等到房顶开出了花，这里就是天下</span><br><span class="line">总有人幸福白头，总有人哭着分手</span><br><span class="line">无论相遇还是不相遇，都是献给岁月的序曲</span><br><span class="line"></span><br><span class="line">就让我随你去，让我随你去，</span><br><span class="line">去到六十岁停下的渡口，等着被一条小船接走</span><br><span class="line">就让我随你去，让我随你去，</span><br><span class="line">随着熙熙攘攘的人流，向着开满鲜花的山丘，挥挥衣袖。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/book/moon-and-six-bians.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;我不是一个有看书习惯的人，有一日突然觉得得多看书，充实一下生活。又在中国好声音听到了有人唱《越过山丘》，词写得贼好，作词人高晓松。然后我又去
      
    
    </summary>
    
      <category term="生活" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="阅读笔记" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文学" scheme="http://lry1994.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>2017-12随笔笔记</title>
    <link href="http://lry1994.github.io/2017/2017-12-suibi.html"/>
    <id>http://lry1994.github.io/2017/2017-12-suibi.html</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2018-03-07T03:03:19.837Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>昨晚在公司的OA系统提交账务报销的时候，发现保存老是保存不了，看了控制台，console出现了错误，OA是以前的老系统，用原生的js写的。具   体原因是 document.getElementById(xx)取不到值。（我的OA只能用IE打开==）</p><p>  然后去检查元素看了一下，发现并没有id==xx的元素，都是写成name=xx,当时我理所应当地以为是OA有bug,手动在name=xx的后面加上id=xx,再点击保存就OK了。</p><p>  今天查了一下，原来不是有bug。</p><blockquote><p>在 IE6 IE7 IE8(Q) 中，支持以 document.getElementById(elementName) 的方式获取 A APPLET BUTTON FORM IFRAME IMG INPUT MAP OBJECT EMBED SELECT TEXTAREA 元素，而其他浏览器的任何元素均不支持该方式。</p></blockquote></li></ul><pre><code>参考[SD9001: IE6 IE7 IE8(Q) 中的 getElementById 方法能以 name 属性为参数获取某些元素](http://www.w3help.org/zh-cn/causes/SD9001)实验了一下，用IE8版本，成功了吼吼吼</code></pre><ul><li><code>Polyfill</code>的准确意思为：用于实现浏览器并不支持的原生API的代码。<br>  例如，querySelectorAll是很多现代浏览器都支持的原生Web API，但是有些古老的浏览器并不支持，那么假设有人写了库，只要用了这个库， 你就可以在古老的浏览器里面使用<code>document.querySelectorAll</code>，使用方法跟现代浏览器原生API无异。那么这个库就可以称为<code>Polyfill</code>或者<code>Polyfiller</code>。<br>  好，那么问题就来了。jQuery是不是一个Polyfill?答案是No。因为它并不是实现一些标准的原生API，而是封装了自己API。一个Polyfill是抹平新老浏览器 标准原生API 之间的差距的一种封装，而不是实现自己的API。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;昨晚在公司的OA系统提交账务报销的时候，发现保存老是保存不了，看了控制台，console出现了错误，OA是以前的老系统，用原生的js写的。具   体原因是 document.getElementById(xx)取不到值。（我的OA只能用IE打开==）&lt;/p
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="随笔笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%9A%8F%E7%AC%94%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>读《穆斯林的葬礼》</title>
    <link href="http://lry1994.github.io/2017/2017-11-29-muslims-funeral.html"/>
    <id>http://lry1994.github.io/2017/2017-11-29-muslims-funeral.html</id>
    <published>2017-11-28T16:00:00.000Z</published>
    <updated>2018-03-01T05:35:30.786Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/book/muslimsfuneral.png" alt="cover"></p><p>刚开始听到穆斯林的葬礼是初中的时候，那时没时间没资源看小说也就不了了之。如今重新想起这个名字，以为这是一部讲一家子因为穆斯林的身份而导致了悲剧的小说，看了之后才发现穆斯林的身份只是个定语，起修饰作用。</p><p>故事主人公韩子奇跟随着他的巴巴路过”玉王”梁玉清玉坊拜访的时候，深深地认知到，自己是为玉而生，决定拜梁玉清为师。梁玉清认为自己只是一个琢玉的人，不会做生意，所以一直以来只做着工匠的活，顾客买卖的中间差价被汇远斋的老板所赚。在一次买卖中因为梁玉清积劳成疾倒下的时候把几乎要完成的玉船砸坏，含恨吐血身亡。蒲绥昌落井下石让梁玉清一家人赔偿毁约费用，玉王一家没落。而此时韩子奇为了替师傅报仇，忍受着师娘师妹的辱骂去了汇远斋当学徒，几年之后靠着在里面学到的东西重振奇珍斋，同时与梁玉清的大女儿壁儿结婚，生下一个儿子天星。后来世界大战，韩子奇为了保护自己的玉器宝物，带着宝物去英国避险，梁玉清的小女儿玉儿偷偷跟去。最后在战争的恐惧无奈下，韩子奇和玉儿在一起生下了一个女儿，新月。多年后回到中国，玉儿心里愧疚独自离开。新月长大，却因心脏病离世。之后韩子奇也倒下了，在他将死之时说出，“我不是回回”。看到这句话时被惊讶到了，全文好像没有哪里表现过他不是穆斯林，当时穆斯林不能和汉族通婚。</p><p>各路简介是这样的：《穆斯林的葬礼》是中国当代文学中第一部表现回族人民特别是现代都市回族人民的生存境况和内心情感世界的史诗性作品。它通过描述一个回族穆斯林家庭60年的风雨变迁和三代人的悲惨境遇，力求如实呈现处于伊斯兰文化和华夏文化激烈碰撞与融合中的当代都市回族人民的艰难处境。同时，也充分展现了奇妙而充满异域色彩的伊斯兰文化和回族文化。<br>抱歉，我并没有体会到所谓的“伊斯兰文化和华夏文化激烈碰撞”，里面好像也没有写到特别的回族文化，只是一些习俗，我以为的“激烈碰撞”是指藏族天葬的那种毁三观的冲击。“当代都市回族人民的艰难处境”小说里面也没有写到单单回族的艰难，给我的感觉是那个时期所有人都艰难啊。</p><p>我不了解回回的重要性。整本书好像跟穆斯林没有太大关系啊，把穆斯林的葬礼换成基督徒的葬礼，也不影响故事的发展，只不过把里面描写的穆斯林习俗换成基督教的习俗。<br>作者之所以书名为《穆斯林的葬礼》难道是因为韩子奇的汉族血统破坏了回回血统纯净性所以这本书叫穆斯林的（血统）葬礼吗？还是因为这本书一共描述了三次葬礼呢？我觉得这本书更适合叫做《玉器商与小姨子私生女被原配收养，苦命美少女与美男班主任相爱后死于心脏病》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/book/muslimsfuneral.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚开始听到穆斯林的葬礼是初中的时候，那时没时间没资源看小说也就不了了之。如今重新想起这个名字，以为这是一部讲一家子因为穆斯林的身份而导致了悲剧的小说
      
    
    </summary>
    
      <category term="生活" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="阅读笔记" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文学" scheme="http://lry1994.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>f8app在window安装教程</title>
    <link href="http://lry1994.github.io/2017/2017-11-21-f8app-guide.html"/>
    <id>http://lry1994.github.io/2017/2017-11-21-f8app-guide.html</id>
    <published>2017-11-20T16:00:00.000Z</published>
    <updated>2018-03-02T03:11:20.890Z</updated>
    
    <content type="html"><![CDATA[<p>md写图片还要上传图床，太懒了</p><p><a href="http://blog.csdn.net/lry1994/article/details/78589019" target="_blank" rel="noopener">http://blog.csdn.net/lry1994/article/details/78589019</a></p><p>这货，花了我好几天时间<br>IDE：androidStudio,可以按照提示修改错误</p><pre><code>1、建立一个空的文件夹！！！这一步很重要2、$ git clone https://github.com/fbsamples/f8app.git3、$ cd f8app4、$ npm install这一步我出现了好多不知所措的错误，然后神奇的是，多装几次就好了！！！</code></pre><p>5、运行<code>mongod --dbpath &quot;W://MongoDB//data&quot;</code><br>    <a href="https://github.com/ReactWindows/f8app/blob/data/mongodb/db.zip" target="_blank" rel="noopener">https://github.com/ReactWindows/f8app/blob/data/mongodb/db.zip</a></p><pre><code>把db.zip解压后的文件拷贝到W://MongoDB//data下mongod --dbpath &quot;W://MongoDB//data&quot;打开mongodb确保运行起来:https://www.cnblogs.com/Joans/p/3706406.html</code></pre><p>6、启动 Parse/GraphQL servers</p><pre><code>$ npm startnpm run import-data 这条命令运行会百分百报错SyntaxError:Unexpected token P in JSON at position 0 ，所以不要这个命令了。什么去除https证书验证、代理都没有，因为那个请求链接已经关闭</code></pre><p>   参考链接<a href="http://blog.csdn.net/industriously/article/details/73302207" target="_blank" rel="noopener">http://blog.csdn.net/industriously/article/details/73302207</a></p><p>7、确认下面的地址是可以访问的，并且是有数据的。<br><a href="http://localhost:8080/dashboard" target="_blank" rel="noopener">http://localhost:8080/dashboard</a></p><p><a href="http://localhost:8080/graphql" target="_blank" rel="noopener">http://localhost:8080/graphql</a><br>打开<a href="http://localhost:8080/graphql" target="_blank" rel="noopener">http://localhost:8080/graphql</a></p><p>输入</p><pre><code>``query{schedule{titlespeakers{    name    title    }location{    name    }}}``</code></pre><p>运行有结果</p><p>8、react-native start  这句必须有</p><p>9、react-native run-android</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot;java.lang.RuntimeException: Timeout of 120000 reached waiting for exclusiveaccess to file:/Users/weidingqiang/.gradle/wrapper/dists/gradle-2.4-all/3i2gobhdl0fm2tosnn15g540i0/gradle-2.4-all.zip</span><br><span class="line"></span><br><span class="line">at org.gradle.wrapper.ExclusiveFileAccessManager.access(ExclusiveFileAccessManager.java:61)</span><br><span class="line"></span><br><span class="line">at org.gradle.wrapper.Install.createDist(Install.java:47)</span><br><span class="line"></span><br><span class="line">at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:129)</span><br><span class="line"></span><br><span class="line">at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:48)</span><br></pre></td></tr></table></figure><p>解决方法</p><p><a href="https://services.gradle.org/distributions/ 下载链接" target="_blank" rel="noopener">下载链接</a></p><p>1.重新下载gradle-3.3-all.zip，进入一堆乱码的文件夹，比如2n0i7hqatcbtk57vvql575dbap</p><p>2.不要删除里面的.lck和.part等文件，直接拷贝下载的gra</p><p>dle-3.3-all.zip文件到该目录</p><p>在androidstudio运行，按照他的suggestion改就OK了</p><p>接下来出现的都是版本问题，我也不知道怎么改了，改了好多次，最后可以了</p><p>最后成功运行！！！！！</p><p>运行方式<br>react-native  init 项目名</p><p>reactNative利用androidStudio运行：</p><p>在androidStudio 打开android文件夹，一定要打开这个，不然不能正常运行</p><p>在项目目录下运行react-native start 启动package server,</p><p>在androidstudio点击run-&gt;app</p><p>adb shell input keyevent 82 打开菜单</p><p>或者</p><p>reactNative真机运行：USB手机连接电脑，</p><p>在项目目录下运行react-native run-android</p><p>摇晃设备或按Menu键可以打开调试菜单，点击Dev Settings，</p><p>选Debug server host for device，</p><p>输入你的正在运行packager的那台电脑的局域网IP加:8081（同时要保证手机和电脑在同一网段，且没有防火墙阻拦），再按back键返回，</p><p>再按Menu键，在调试菜单中选择Reload JS，就应该可以看到运行的结果了。</p><p>adb devices查看连接电脑的手机设备</p><p>creact-react-native-app 项目名这种方法是创建纯粹的react-native，没有和安卓混合开发</p><p>真机运行react-native遇到了的问题</p><p>1、adbserver version (32) doesn’t match this client (36); killing…</p><p>最后原因是因为手机驱动安装失败</p><p>解决方法：豌豆荚</p><p>2、</p><p>解决方法</p><p>3、</p><p>解决方法：修改两个地方</p><p><a href="http://blog.csdn.net/mapboo/article/details/53419838" target="_blank" rel="noopener">http://blog.csdn.net/mapboo/article/details/53419838</a></p><p>其他：</p><p>构建 F8 App / ReactNative 开发指南</p><p><a href="https://f8-app.liaohuqiu.net/" target="_blank" rel="noopener">https://f8-app.liaohuqiu.net/</a></p><p>F8App-ReactNative项目源码分析4-js篇</p><p><a href="http://blog.csdn.net/offbye/article/details/51586227" target="_blank" rel="noopener">http://blog.csdn.net/offbye/article/details/51586227</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;md写图片还要上传图床，太懒了&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/lry1994/article/details/78589019&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.ne
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="react-native" scheme="http://lry1994.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>react-cnode实践笔记</title>
    <link href="http://lry1994.github.io/2017/2017-9-25-react-cnode-guide.html"/>
    <id>http://lry1994.github.io/2017/2017-9-25-react-cnode-guide.html</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2018-03-02T03:03:53.890Z</updated>
    
    <content type="html"><![CDATA[<p>参照源码</p><p><a href="http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332" target="_blank" rel="noopener">http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332</a></p><p>这里面写得有点乱，看不太明白，所以自己学着边学边做,项目地址</p><p><a href="https://github.com/LRY1994/react-cnode-re" target="_blank" rel="noopener">https://github.com/LRY1994/react-cnode-re</a></p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><p>1.搭建react项目结构，直接用官网的方法 create-react-app react-cnode-re</p><p>2.添加less配置<br>使用create-react-app 创建的项目默认不支持less，按照<a href="https://segmentfault.com/a/1190000010162614配置" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010162614配置</a></p><h3 id="用到的知识点"><a href="#用到的知识点" class="headerlink" title="用到的知识点"></a>用到的知识点</h3><p>1.react小书，里面讲得很通俗易懂 <a href="http://huziketang.com/books/react/" target="_blank" rel="noopener">http://huziketang.com/books/react/</a></p><p>2.布局使用flex.css，移动端flex布局神器，兼容微信，UC，webview等移动端主流浏览器08.10</p><p>npm install flex.css –save</p><p>flex.css使用方法</p><pre><code>dir：主轴方向        top：从上到下        right：从右到左    bottom：从上到下    left：从左到右（默认）main：主轴对齐方式    right：从右到左    left：从左到右（默认）    justify：两端对齐        center：居中对齐cross：交叉轴对齐方式    top：从上到下    bottom：从上到下    baseline：跟随内容高度对齐    center：居中对齐    stretch：高度并排铺满（默认）box：子元素设置    mean：子元素平分空间    first：第一个子元素不要多余空间，其他子元素平分多余空间    last：最后一个子元素不要多余空间，其他子元素平分多余空间    justify：两端第一个元素不要多余空间，其他子元素平分多余空间</code></pre><p>3.整个项目的基础结构就是</p><pre><code>&lt;Provider store={store}&gt;    &lt;Router history={history}&gt;        &lt;Switch&gt;            &lt;Route key=’’ path=’’ component=’’/&gt;            &lt;Route key=’’ path=’’ component=’’/&gt;            ………………………………..        &lt;/Switch&gt;    &lt;/Router&gt;&lt;/Provider&gt;</code></pre><p>4.下拉动态加载用到时 get-next-page 插件</p><p>她自己自动监听了这些事件，不用自己写触发事件，比如下拉的时候回自动拉取下一页数据</p><p>this.monitorEvent = [‘DOMContentLoaded’, ‘load’, ‘click’, ‘touchstart’, ‘touchend’, ‘haschange’, ‘online’, ‘pageshow’, ‘popstate’, ‘resize’, ‘storage’, ‘mousewheel’, ‘scroll’];</p><p>只需要写好el,拉取的数据就会放在el </p><p>使用方法：</p><pre><code>import GetNextPage from ‘get-next-page’new GetNextPage(el,setting)setting参数如下/*元素在可视区位置，符合其中一个条件就会触发加载机制*/top    //元素在顶部伸出的距离才加载right  //元素在右边伸出的距离才加载bottom //元素在底部伸出的距离才加载left   //元素在左边伸出的距离才加载    /*    发送到服务器的相关数据*/url  //发送到服务器的地址data //发送到服务器的数据pageName  //分页的参数名称，用来加载完成后+1/*    回调方法*/start  //开始加载时调用方法load //加载成功时调用方法error  //开始加载时调用方法end  //加载完成时调用方法   </code></pre><h3 id="遇到的问题及得到的知识点"><a href="#遇到的问题及得到的知识点" class="headerlink" title="遇到的问题及得到的知识点"></a>遇到的问题及得到的知识点</h3><p>1.You should not use <route> or withRouter() outside a <router></router></route></p><p>源码里面是每个路由导航的Component都包含一个Rooter，我想要整个页面就用一个Footer，但是Footer里面包含了<route>,<route>必须包含 在<rooter>里面，所以不可以这样写</rooter></route></route></p><pre><code>render(&lt;Provider store={store}&gt;        &lt;div&gt;        {router}        &lt;Footer/&gt;    &lt;/div&gt;&lt;/Provider&gt;,document.getElementById(&apos;root&apos;))</code></pre><p>2.React.Children.only expected to receive a single React element child.</p><pre><code>&lt;Router&gt;&lt;Provider&gt;里面只能有一个一级子节点,Provider的store是必须的，Router的history是必须的</code></pre><p>History用这种方法创造</p><pre><code>import createBrowserHistory from &apos;history/createBrowserHistory&apos;;const history = createBrowserHistory();</code></pre><p>好像还可以这样写。但是不知道有什么区别</p><pre><code>var history = process.env.NODE_ENV !== &apos;production&apos; ? browserHistory : hashHistory;</code></pre><p>3.修改react启动的端口号</p><p>打开react项目的 package.json文件</p><p>将 scripts中的start键值对</p><pre><code>&quot;start&quot;: &quot;node scripts/start.js&quot;,</code></pre><p>修改为<br>    “start”: “set PORT=3000&amp;&amp;node scripts/start.js”,</p><p>4.React并没有一个自己的Component处理网络请求，自己包装HttpService.js</p><p>5.render 方法必须要返回一个 JSX 元素。而且必须要用一个外层的 JSX 元素把所有内容包裹起来。返回并列多个 JSX 元素是不合法的</p><p>6.{this.props.children}相当于angular的<ui-view></ui-view></p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/1.jpg" alt="Aaron Swartz"></p><p>参考 <a href="https://segmentfault.com/q/1010000009616045" target="_blank" rel="noopener">https://segmentfault.com/q/1010000009616045</a></p><p>react-router4没有indexRoute了。 react-router4版本中路由的本质变成了React组件，也就是自定义标签。所以你可以像使用组件一样是用路由。那么嵌套路由无非就是组件嵌套的写法（自定义标签嵌套而已）</p><p>7.</p><pre><code>&lt;Route path=&quot;/&quot; component={App} /&gt;&lt;Route exact path=&quot;/&quot; component={Home} /&gt;&lt;Route path=&quot;topics&quot; component={Topics} /&gt;&lt;Route path=&quot;/topics/:id&quot; component={Topic} /&gt;</code></pre><p>这里用react-router-dom，用{this.props.children}渲染不出组件，放弃这种做法</p><p>8.没有传入action 之前，会出现这个错误</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/2.jpg" alt="Aaron Swartz"></p><p>9.想要在chrome控制台下查看react,出现这个问题</p><p>proxyConsole.js:56 The previous state received by the reducer has unexpected type of “Function”. Expected argument to be an object with the following keys: “User”</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/3.jpg" alt="Aaron Swartz"></p><p>原因见以下链接</p><p><a href="https://stackoverflow.com/questions/38074154/redux-the-previous-state-received-by-the-reducer-has-unexpected-type-of-functi" target="_blank" rel="noopener">https://stackoverflow.com/questions/38074154/redux-the-previous-state-received-by-the-reducer-has-unexpected-type-of-functi</a></p><p>改成</p><pre><code>const store = createStore(    combineReducers(reducer),    compose(applyMiddleware(thunk),composeWithDevTools())    );</code></pre><p>10.在reducer里面返回新的state,就是store</p><p>reducer只有在createStore的时候用到，其他地方没有用到，不用管。</p><p>Connet的时候就是组件丛store里面取出自己需要的东西，仅仅是自己需要的数据。</p><p>只有触发的时候用到dispatch，其他时候没有用到。</p><p>刚开始想像一般推荐的那种方法那样弄两个文件夹Component和Container，试了一天，最后发现store是放共享的东西，我为什么什么都要往里面放。还有一个组件写两个文件很繁琐，直接像源码里面在组件最后connect一下就好了</p><p>总体流程就是</p><pre><code>ReducercreateStore(reducer)actionconnect(props,action)this.props.（action.type）(arg)手动调用this.props.（action.type）(arg)--&gt;react-redux自动对应到reducer--&gt;react-redux自动更新props</code></pre><p>11.前往某个制定的页面</p><pre><code>this.context.router.history.push({                    pathname: &apos;/user/&apos; + res.loginname                });</code></pre><p>12.mapDispatchToProps可以返回一个对象，action(‘User’)返回对象,每个元素都是函数</p><pre><code>{    &apos;signinSuccess&apos;:( target)=&gt;{        _ID: User,         target: target,         type: &apos;signinSuccess&apos; },&apos;signin&apos;: ( target)=&gt;{        _ID: User,         target: target,         type: &apos;signin&apos;},‘setState’: ( target)=&gt;{        _ID: User,         target: target,         type: ‘setState’},}export default (_ID) =&gt; {    var action = {};    var arr = [        &apos;signinSuccess&apos;, //登录成功        &apos;signin&apos;, //退出登录        &apos;setState&apos; //设置状态    ];    for (let i = 0; i &lt; arr.length; i++) {        action[arr[i]] = (target) =&gt; {            return {                 _ID: _ID,                 target: target,                 type: arr[i]             };        }    }    return action;} export default connect((state) =&gt; { return { User: state.User }; }, action(&apos;User&apos;))(SignIn); //连接reduxconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])(组件)</code></pre><p>[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function): 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。</p><p>13.在signin里面不connect的时候super(props)输出来的props是这样的，默认的props是<br><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/4.jpg" alt="Aaron Swartz"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">history:</span><br><span class="line">    action:&quot;POP&quot;/&quot;PUSH&quot;</span><br><span class="line">    block:ƒ block()</span><br><span class="line">    createHref:ƒ createHref(location)</span><br><span class="line">    go:ƒ go(n)</span><br><span class="line">    goBack:ƒ goBack()</span><br><span class="line">    goForward:ƒ goForward()</span><br><span class="line">    length:2//浏览器历史列表中的 URL 数量</span><br><span class="line">    listen:ƒ listen(listener)</span><br><span class="line">    location:&#123;</span><br><span class="line">pathname: &quot;/signin&quot;, //同window.location.pathname</span><br><span class="line">search: &quot;&quot;, //同window.location.search</span><br><span class="line">hash: &quot;&quot;, </span><br><span class="line">state: undefined,// 一个捆绑在这个地址上的object对象</span><br><span class="line">key: &quot;wytc8y&quot;&#125;</span><br><span class="line">    push:ƒ push(path, state)</span><br><span class="line">    replace:ƒ replace(path, state)</span><br><span class="line">location:和history.location内容一样</span><br><span class="line">match:</span><br><span class="line">    isExact:true //路由extract设置为true</span><br><span class="line">    params:&#123;&#125;</span><br><span class="line">    path:&quot;/signin&quot;</span><br><span class="line">    url:&quot;/signin&quot;</span><br><span class="line">staticContext:undefined</span><br></pre></td></tr></table></figure></p><p>connect之后多了User,和三个action setState,signin,signinSuccess</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/5.jpg" alt="Aaron Swartz"></p><p>我把default改成return null,User值会变化<br><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/6.png" alt="Image text"><br><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/7.png" alt="Aaron Swartz"></p><p>User为什么在props上？因为connect的时候取名叫做User</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/8.png" alt="Aaron Swartz"></p><p>14.在user reducer这里输出看看action有什么<br>刚开始是这样的，应该是combineReducer的时候先占位，但是还没有装入</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/9.png" alt="Aaron Swartz"></p><p>登录成功后两处输出是一样的， </p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/10.png" alt="Aaron Swartz"></p><p>Action</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/11.jpg" alt="Aaron Swartz"></p><p>15<br><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/12.png" alt="Aaron Swartz"></p><p>验证成功，把reducer函数名称改一下</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/13.png" alt="Aaron Swartz"><br><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/14.png" alt="Aaron Swartz"></p><p>16.高阶组件是一个函数（而不是组件）,原项目里面的GetNextPage.jx相当于IndexList的高阶组件，用到了get-next-page插件</p><p><a href="https://segmentfault.com/n/1330000011305070" target="_blank" rel="noopener">用于下拉自动加载数据get-next-page插件</a></p><p>17.组件必须大写字母开头，不然会当做html的标签</p><p>18.<br>this.refs.dataload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=&quot;dataload&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>19.生命周期知识点</p><p>Mounting</p><p>These methods are called when an instance of a component is being created and inserted into the DOM:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•constructor()</span><br><span class="line">•componentWillMount()</span><br><span class="line">•render()</span><br><span class="line">•componentDidMount()</span><br></pre></td></tr></table></figure></p><p>Updating</p><p>These methods are called when a component is being re-rendered:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">•componentWillReceiveProps()</span><br><span class="line">•shouldComponentUpdate()</span><br><span class="line">•componentWillUpdate()</span><br><span class="line">•render()</span><br><span class="line">•componentDidUpdate()</span><br></pre></td></tr></table></figure></p><p>Unmounting</p><p>This method is called when a component is being removed from the DOM:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">•componentWillUnmount()</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/15.png" alt="Aaron Swartz"></p><p>打开localhost的时候，/home初始化，因为调用了两次setState,所以调用了两次componentWillReceiveProps,<br>Prop改变会自动触发componentWillReceiveProps, shouldComponentUpdate ,componentWillUpdate ,render,componentDidUpdate,每一次改变prop就会触发这些<br>State改变需要使用setState方法设置，然后会自动调用shouldComponentUpdate,componentWillUpdate,render, componentDidUpdate()。跟Prop改变不同的是，state改变可能不会立即触发，他会和其他合并之后再触发</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/16.png" alt="Aaron Swartz"></p><p>原因</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/17.png" alt="Aaron Swartz"></p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/18.png" alt="Aaron Swartz"></p><p>下拉的时候同样是两次</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/19.png" alt="Aaron Swartz"></p><p>接着切换为tab=good</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/20.png" alt="Aaron Swartz"></p><p>这里多了一次是URL改变也触发了一次setState</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/21.png" alt="Aaron Swartz"></p><p>tab=good的时候下拉</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/22.png" alt="Aaron Swartz"></p><p>点击“发表”</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/23.png" alt="Aaron Swartz"></p><p>再回来“首页”，</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/24.png" alt="Aaron Swartz"></p><p>但是什么原理导致HomeContainer的prop改变？？ 每次调用action就会引起props改变，这是redux内部自动实现的</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/25.png" alt="Aaron Swartz"></p><p>17.super()和super(props)的区别在于能否在子类prototype的constructor中调用this,props</p><p>18.首页用一个数组存储每个tab之前浏览的情况,但是这里有个情况，/home和/home?tab=all区别存储了</p><p><img src="https://raw.githubusercontent.com/LRY1994/react-cnode-re/master/pictrue_for_readme/26.png" alt="Aaron Swartz"></p><p>19.获取参数方式</p><p><a href="http://localhost:4000/home?tab=good" target="_blank" rel="noopener">http://localhost:4000/home?tab=good</a></p><pre><code>queryString.parse(props.location.search).tab</code></pre><p><a href="http://localhost:4000/topic/5555" target="_blank" rel="noopener">http://localhost:4000/topic/5555</a> </p><pre><code>&lt;Route path=&quot;users&quot; component={Users}&gt;    &lt;Route path=&quot;/user/:userId&quot; component={User}/&gt;&lt;/Route&gt;&lt;Link to={/user/${user.id}}&gt;{user.name}&lt;/Link&gt;    props.match.params. userId</code></pre><p>20.props.dangerouslySetInnerHTML must be in the form {__html: …}</p><pre><code>dangerouslySetInnerHTML=\{\{__html:content\}\}</code></pre><p>21.前往某个页面</p><pre><code>this.context.router.history.push({                pathname: &apos;/topic/&apos; + res.topic_id            });</code></pre><p>22.任何想访问context里面的属性的组件都必须显式的指定一个contextTypes 的属性。如果没有指定改属性，那么组件通过 this.context 访问属性将会出错</p><p>23.process.cwd()当前工作目录（Current Work Directory）</p><p>24.this.context.router.push(‘/‘) ，注：这个写法会把跳转载入浏览器历史，若不想留下历史记录则可以 this.context.router.replace(‘/‘) </p><p>最后我把源码里面的redux形式改成这样connect(mapStateToProps,mapDispatchToProps)(SignIn)这种形式，在网上看好像大家也比较接受这种形式</p><pre><code>const mapStateToProps = (state) =&gt; {    return {    User: state.User    }}const mapDispatchToProps = (dispatch) =&gt; {    return {        signinSuccess: (user) =&gt; {            dispatch(signinSuccess(user))        }    }}export default connect(mapStateToProps,mapDispatchToProps)(SignIn); //连接redux</code></pre><h3 id="待解决（已解决）"><a href="#待解决（已解决）" class="headerlink" title="待解决（已解决）"></a>待解决（已解决）</h3><p>npm run build的时候出错</p><blockquote><p>Failed to minify the code from this file: ./~/get-next-page/dist/get-next-page.js:59 Read more here:      <a href="http://bit.ly/2tRViJ9" target="_blank" rel="noopener">http://bit.ly/2tRViJ9</a> </p></blockquote><p> 原项目是自己写的webpack配置文件。我全是create-react-app自动生成的，不想改,网上查到这段话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm run build fails to minify</span><br><span class="line"></span><br><span class="line">You may occasionally find a package you depend on needs compiled or ships code for a non-browser environment.</span><br><span class="line">This is considered poor practice in the ecosystem and does not have an escape hatch in Create React App.</span><br><span class="line"></span><br><span class="line">To resolve this:</span><br><span class="line"></span><br><span class="line">Open an issue on the dependency&apos;s issue tracker and ask that the package be published pre-compiled (retaining ES6 Modules).</span><br><span class="line">Fork the package and publish a corrected version yourself.</span><br><span class="line">If the dependency is small enough, copy it to your src/ folder and treat it as application code.</span><br><span class="line">Something Missing?</span><br></pre></td></tr></table></figure><p>我这里用第三种方法，把get-netx-page.js放到/src/lib里面，相应的地方再改改，就可以了，npm run build之后就会生成build文件夹</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>参考 <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment" target="_blank" rel="noopener">部署方法</a></p><pre><code>&gt;npm install -g serve&gt;serve -s build打开localhost:5000 ,成功</code></pre><h3 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h3><p>通过createHistory()方法生成的history和react-router中的history有什么区别？？？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参照源码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://react-china.org/t/webpack-react-react-router-redux-less-flex-css-es6-react-cnode/6332&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="react" scheme="http://lry1994.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>学习资源收集</title>
    <link href="http://lry1994.github.io/learning-resource.html"/>
    <id>http://lry1994.github.io/learning-resource.html</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-03-08T01:30:03.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Learning-resource"><a href="#Learning-resource" class="headerlink" title="Learning-resource"></a>Learning-resource</h1><h2 id="前端面试题目"><a href="#前端面试题目" class="headerlink" title="前端面试题目"></a>前端面试题目</h2><ul><li><a href="https://segmentfault.com/a/1190000013331105?utm_source=index-hottest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013331105?utm_source=index-hottest</a></li><li><a href="https://github.com/qiu-deqing/FE-interview" target="_blank" rel="noopener">https://github.com/qiu-deqing/FE-interview</a></li><li><a href="https://github.com/fouber/blog" target="_blank" rel="noopener">https://github.com/fouber/blog</a></li><li><a href="https://www.imooc.com/article/20319" target="_blank" rel="noopener">https://www.imooc.com/article/20319</a></li><li><a href="http://caibaojian.com/40-html5-interview.html" target="_blank" rel="noopener">http://caibaojian.com/40-html5-interview.html</a></li></ul><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><ul><li>css3 grid layout <a href="https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-items" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-items</a></li></ul><h2 id="full-stack"><a href="#full-stack" class="headerlink" title="full stack"></a>full stack</h2><ul><li>Growth Engineering: The Definitive Guide。全栈增长工程师指南 <a href="http://growth.phodal.com/" target="_blank" rel="noopener">http://growth.phodal.com/</a></li><li>全栈增长工程师实战 <a href="http://growth-in-action.phodal.com/" target="_blank" rel="noopener">http://growth-in-action.phodal.com/</a></li></ul><h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><ul><li><p>Ovilia’s blog <a href="http://zhangwenli.com/blog" target="_blank" rel="noopener">http://zhangwenli.com/blog</a><br>源码：<a href="https://github.com/Ovilia/blog" target="_blank" rel="noopener">https://github.com/Ovilia/blog</a></p></li><li><p>axuebin<br><a href="https://github.com/axuebin/blog" target="_blank" rel="noopener">https://github.com/axuebin/blog</a></p></li><li><p><a href="https://github.com/simongfxu/simongfxu.github.com" target="_blank" rel="noopener">https://github.com/simongfxu/simongfxu.github.com</a></p></li></ul><h2 id="react-react-native-redux"><a href="#react-react-native-redux" class="headerlink" title="react,react-native,redux"></a>react,react-native,redux</h2><ul><li><p>react小书里面的例子<br><a href="https://github.com/huzidaha/react-naive-book-examples" target="_blank" rel="noopener">https://github.com/huzidaha/react-naive-book-examples</a></p></li><li><p>一个 react + redux 的完整项目 和 个人总结<br><a href="https://github.com/bailicangdu/react-pxq" target="_blank" rel="noopener">https://github.com/bailicangdu/react-pxq</a></p></li><li><p>一个react+redux+webpack+ES6+antd的SPA的后台管理框架demo<br><a href="https://github.com/duxianwei520/react" target="_blank" rel="noopener">https://github.com/duxianwei520/react</a></p></li><li><p>基于webpack + react + react-router + redux + less + flex.css + ES6 的React版cnode社区<br><a href="https://github.com/lzxb/react-cnode" target="_blank" rel="noopener">https://github.com/lzxb/react-cnode</a></p></li><li><p>React Native指南汇集了各类react-native学习资源、开源App和组件<br><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="noopener">https://github.com/reactnativecn/react-native-guide</a></p></li><li><p>Source code of the official F8 app of 2016, powered by React Native and other Facebook open source projects.<br><a href="https://github.com/fbsamples/f8app" target="_blank" rel="noopener">https://github.com/fbsamples/f8app</a></p></li></ul><ul><li>Redux 莞式教程。本教程深入浅出，配套入门、进阶源码解读以及文档注释丰满的 Demo 等一条龙服务<br><a href="https://github.com/kenberkeley/redux-simple-tutorial" target="_blank" rel="noopener">https://github.com/kenberkeley/redux-simple-tutorial</a></li></ul><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><ul><li><p>express框架应用<br><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">https://github.com/nswbmw/N-blog</a></p></li><li><p>express+mongodb+bootstrap blog system<br><a href="https://github.com/mz121star/NJBlog" target="_blank" rel="noopener">https://github.com/mz121star/NJBlog</a></p></li><li><p>《Node.js 包教不包会》 by alsotang<br><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">https://github.com/alsotang/node-lessons</a></p></li></ul><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ul><li><p>A curated list of awesome things related to Vue.js<br><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">https://github.com/vuejs/awesome-vue</a></p></li><li><p>记录vue-webapck的学习基础<br><a href="https://github.com/guowenfh/vue-webpack" target="_blank" rel="noopener">https://github.com/guowenfh/vue-webpack</a></p></li><li><p>Learn Vuex by Building a Notes App<br><a href="https://github.com/coligo-io/notes-app-vuejs-vuex" target="_blank" rel="noopener">https://github.com/coligo-io/notes-app-vuejs-vuex</a></p></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><p>Packaged version of Ace code editor<br><a href="https://github.com/ajaxorg/ace-builds" target="_blank" rel="noopener">https://github.com/ajaxorg/ace-builds</a></p></li><li><p>PNotify is a JavaScript notification plugin, developed by SciActive. PNotify can also provide desktop notifications based on the Web Notifications spec. If desktop notifications are not available or not allowed, PNotify will fall back to displaying the notice as a regular, in-browser notice.<br><a href="https://github.com/sciactive/pnotify" target="_blank" rel="noopener">https://github.com/sciactive/pnotify</a></p></li><li><p>JsGen is a next generation，free, open source web software that you can generate a powerful website, such as blog, forum, etc. It is coded by pure JavaScript, based on Node.js, AngularJS, MongoDB.<br><a href="https://github.com/zensh/jsgen" target="_blank" rel="noopener">https://github.com/zensh/jsgen</a></p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>Web Development With Node and Express, first edition.配套代码<br><a href="https://github.com/EthanRBrown/web-development-with-node-and-express" target="_blank" rel="noopener">https://github.com/EthanRBrown/web-development-with-node-and-express</a></p></li><li><p>《A Practitioner’s Guide to Software Test Design》的中文翻译<br><a href="https://github.com/miaoyinniao/Software-Test-Design-Guide-Cn" target="_blank" rel="noopener">https://github.com/miaoyinniao/Software-Test-Design-Guide-Cn</a></p></li><li><p>全栈工程师培训材料—阮一峰<br><a href="https://github.com/ruanyf/jstraining" target="_blank" rel="noopener">https://github.com/ruanyf/jstraining</a></p></li><li><p>分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者<br><a href="https://github.com/LittlewhiteChen/Front-end-collect" target="_blank" rel="noopener">https://github.com/LittlewhiteChen/Front-end-collect</a></p></li><li><p>前端技能汇总 Frontend Knowledge Structure<br><a href="https://github.com/JacksonTian/fks" target="_blank" rel="noopener">https://github.com/JacksonTian/fks</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Learning-resource&quot;&gt;&lt;a href=&quot;#Learning-resource&quot; class=&quot;headerlink&quot; title=&quot;Learning-resource&quot;&gt;&lt;/a&gt;Learning-resource&lt;/h1&gt;&lt;h2 id=&quot;前端面试题
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="资料收集" scheme="http://lry1994.github.io/tags/%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
</feed>
